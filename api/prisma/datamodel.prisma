enum UserRole {
  ADMIN,
  USER
}

type Employee {
  id: ID! @unique
  firstName: String!
  middleName: String
  lastName: String!
  profilePictureUrl: String,
  lmsEmpId: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAccount {
  id: ID! @unique
  employeeId: Employee! @relation(name: "EmployeeOnUserAccount")
  isActive: Boolean!
  password: String!
  userRole: UserRole!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserAccountToken {
  id: ID! @unique
  user: UserAccount!
  refreshToken: String
}

type Game {
  id: ID! @unique
  name: String!
  shortName: String!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Tournament {
  id: ID! @unique
  game: Game!
  season: String!
  startDate: DateTime!
  finishDate: DateTime
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Category {
  id: ID! @unique
  name: String!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubTournament {
  id: ID! @unique
  tournament: Tournament!
  category: Category!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type SubTournamentPlayer {
  id: ID! @unique
  subTournament: SubTournament!
  player: Employee!
  position: String
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Team {
  id: ID! @unique
  name: String!
  logoImage: String
  subTournament: SubTournament!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TeamPlayer {
  id: ID! @unique
  team: Team!
  player: SubTournamentPlayer!
  isCaptain: Boolean! @default(value: "false")
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Status {
  id: ID! @unique
  name: String!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Round {
  id: ID! @unique
  name: String!
  shortName: String!
  sortOrder: Int!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Fixture {
  id: ID! @unique
  subTournament: SubTournament!
  status: Status!
  dateTime: DateTime
  homeTeam: Team @relation(name: "HomeTeamOnFixture")
  awayTeam: Team @relation(name: "AwayTeamOnFixture")
  round: Round!
  homeTeamParentFixture: Fixture @relation(name: "HomeTeamParentFixtureOnFixture")
  awayTeamParentFixture: Fixture @relation(name: "AwayTeamParentFixtureOnFixture")
  images: [String]
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FootballScore {
  id: ID! @unique
  fixture: Fixture! @unique
  homeTeamFTScore: Int
  awayTeamFTScore: Int
  homeTeamAetScore: Int
  awayTeamAetScore: Int
  homeTeamPenaltyScore: Int
  awayTeamPenaltyScore: Int
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum FootballActivityType {
  GOAL,
  OWN_GOAL,
  RED_CARD,
  YELLOW_CARD,
  DOUBLE_YELLOW_CARD
}

type FootballScoreActivity {
  id: ID! @unique
  fixture: Fixture!
  teamPlayer: TeamPlayer! @relation(name: "ActivistPlayerOnFixture")
  activityType: FootballActivityType!
  assistedBy: TeamPlayer @relation(name: "AssisterOnFixture")
  activityTime: String
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum ChessWinningMethod {
  TIME,
  CHECKMATE
}

type ChessScore {
  id: ID! @unique
  fixture: Fixture! @unique
  winnerTeam: Team
  winningMethod: ChessWinningMethod
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CarromBoardScore {
  id: ID! @unique
  fixture: Fixture! @unique
  homeTeamScore: Int
  awayTeamScore: Int
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CarromBoardScoreActivity {
  id: ID! @unique
  fixture: Fixture!
  team: Team!
  points: Int!
  order: Int!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TableTennisScore {
  id: ID! @unique
  fixture: Fixture! @unique
  homeTeamScore: Int
  awayTeamScore: Int
  setsCount: Int!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type TableTennisScoreActivity {
  id: ID! @unique
  fixture: Fixture!
  set: Int!
  homeTeamPoints: Int!
  awayTeamPoints: Int!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CounterStrikeFScore {
  id: ID! @unique
  fixture: Fixture! @unique
  homeTeamScore: Int
  awayTeamScore: Int
  setsCount: Int!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CounterStrikeScoreSet {
  id: ID! @unique
  fixture: Fixture!
  set: Int!
  homeTeamScore: Int!
  awayTeamScore: Int!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type CounterStrikeScoreSetActivity {
  id: ID! @unique
  set: CounterStrikeScoreSet!
  teamPlayer: TeamPlayer!
  kills: Int!
  deaths: Int!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DotaScore {
  id: ID! @unique
  fixture: Fixture! @unique
  setsCount: Int!
  winnerTeam: Team
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type DotaScoreActivity {
  id: ID! @unique
  fixture: Fixture!
  set: Int!
  winnerTeam: Team!
  updatedBy: UserAccount!
  createdAt: DateTime!
  updatedAt: DateTime!
}
