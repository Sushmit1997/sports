/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Employee: EmployeeObject
      EmployeeConnection: EmployeeConnectionObject
      PageInfo: PageInfoObject
      EmployeeEdge: EmployeeEdgeObject
      AggregateEmployee: AggregateEmployeeObject
      UserAccount: UserAccountObject
      UserAccountConnection: UserAccountConnectionObject
      UserAccountEdge: UserAccountEdgeObject
      AggregateUserAccount: AggregateUserAccountObject
      UserAccountToken: UserAccountTokenObject
      UserAccountTokenConnection: UserAccountTokenConnectionObject
      UserAccountTokenEdge: UserAccountTokenEdgeObject
      AggregateUserAccountToken: AggregateUserAccountTokenObject
      Game: GameObject
      GameConnection: GameConnectionObject
      GameEdge: GameEdgeObject
      AggregateGame: AggregateGameObject
      Tournament: TournamentObject
      TournamentConnection: TournamentConnectionObject
      TournamentEdge: TournamentEdgeObject
      AggregateTournament: AggregateTournamentObject
      Category: CategoryObject
      CategoryConnection: CategoryConnectionObject
      CategoryEdge: CategoryEdgeObject
      AggregateCategory: AggregateCategoryObject
      SubTournament: SubTournamentObject
      SubTournamentConnection: SubTournamentConnectionObject
      SubTournamentEdge: SubTournamentEdgeObject
      AggregateSubTournament: AggregateSubTournamentObject
      SubTournamentPlayer: SubTournamentPlayerObject
      SubTournamentPlayerConnection: SubTournamentPlayerConnectionObject
      SubTournamentPlayerEdge: SubTournamentPlayerEdgeObject
      AggregateSubTournamentPlayer: AggregateSubTournamentPlayerObject
      Team: TeamObject
      TeamConnection: TeamConnectionObject
      TeamEdge: TeamEdgeObject
      AggregateTeam: AggregateTeamObject
      TeamPlayer: TeamPlayerObject
      TeamPlayerConnection: TeamPlayerConnectionObject
      TeamPlayerEdge: TeamPlayerEdgeObject
      AggregateTeamPlayer: AggregateTeamPlayerObject
      Status: StatusObject
      StatusConnection: StatusConnectionObject
      StatusEdge: StatusEdgeObject
      AggregateStatus: AggregateStatusObject
      Round: RoundObject
      RoundConnection: RoundConnectionObject
      RoundEdge: RoundEdgeObject
      AggregateRound: AggregateRoundObject
      Fixture: FixtureObject
      FixtureConnection: FixtureConnectionObject
      FixtureEdge: FixtureEdgeObject
      AggregateFixture: AggregateFixtureObject
      FootballScore: FootballScoreObject
      FootballScoreConnection: FootballScoreConnectionObject
      FootballScoreEdge: FootballScoreEdgeObject
      AggregateFootballScore: AggregateFootballScoreObject
      FootballScoreActivity: FootballScoreActivityObject
      FootballScoreActivityConnection: FootballScoreActivityConnectionObject
      FootballScoreActivityEdge: FootballScoreActivityEdgeObject
      AggregateFootballScoreActivity: AggregateFootballScoreActivityObject
      ChessScore: ChessScoreObject
      ChessScoreConnection: ChessScoreConnectionObject
      ChessScoreEdge: ChessScoreEdgeObject
      AggregateChessScore: AggregateChessScoreObject
      CarromBoardScore: CarromBoardScoreObject
      CarromBoardScoreConnection: CarromBoardScoreConnectionObject
      CarromBoardScoreEdge: CarromBoardScoreEdgeObject
      AggregateCarromBoardScore: AggregateCarromBoardScoreObject
      CarromBoardScoreActivity: CarromBoardScoreActivityObject
      CarromBoardScoreActivityConnection: CarromBoardScoreActivityConnectionObject
      CarromBoardScoreActivityEdge: CarromBoardScoreActivityEdgeObject
      AggregateCarromBoardScoreActivity: AggregateCarromBoardScoreActivityObject
      TableTennisScore: TableTennisScoreObject
      TableTennisScoreConnection: TableTennisScoreConnectionObject
      TableTennisScoreEdge: TableTennisScoreEdgeObject
      AggregateTableTennisScore: AggregateTableTennisScoreObject
      TableTennisScoreActivity: TableTennisScoreActivityObject
      TableTennisScoreActivityConnection: TableTennisScoreActivityConnectionObject
      TableTennisScoreActivityEdge: TableTennisScoreActivityEdgeObject
      AggregateTableTennisScoreActivity: AggregateTableTennisScoreActivityObject
      CounterStrikeFScore: CounterStrikeFScoreObject
      CounterStrikeFScoreConnection: CounterStrikeFScoreConnectionObject
      CounterStrikeFScoreEdge: CounterStrikeFScoreEdgeObject
      AggregateCounterStrikeFScore: AggregateCounterStrikeFScoreObject
      CounterStrikeScoreSet: CounterStrikeScoreSetObject
      CounterStrikeScoreSetConnection: CounterStrikeScoreSetConnectionObject
      CounterStrikeScoreSetEdge: CounterStrikeScoreSetEdgeObject
      AggregateCounterStrikeScoreSet: AggregateCounterStrikeScoreSetObject
      CounterStrikeScoreSetActivity: CounterStrikeScoreSetActivityObject
      CounterStrikeScoreSetActivityConnection: CounterStrikeScoreSetActivityConnectionObject
      CounterStrikeScoreSetActivityEdge: CounterStrikeScoreSetActivityEdgeObject
      AggregateCounterStrikeScoreSetActivity: AggregateCounterStrikeScoreSetActivityObject
      DotaScore: DotaScoreObject
      DotaScoreConnection: DotaScoreConnectionObject
      DotaScoreEdge: DotaScoreEdgeObject
      AggregateDotaScore: AggregateDotaScoreObject
      DotaScoreActivity: DotaScoreActivityObject
      DotaScoreActivityConnection: DotaScoreActivityConnectionObject
      DotaScoreActivityEdge: DotaScoreActivityEdgeObject
      AggregateDotaScoreActivity: AggregateDotaScoreActivityObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadObject
      EmployeePreviousValues: EmployeePreviousValuesObject
      UserAccountSubscriptionPayload: UserAccountSubscriptionPayloadObject
      UserAccountPreviousValues: UserAccountPreviousValuesObject
      UserAccountTokenSubscriptionPayload: UserAccountTokenSubscriptionPayloadObject
      UserAccountTokenPreviousValues: UserAccountTokenPreviousValuesObject
      GameSubscriptionPayload: GameSubscriptionPayloadObject
      GamePreviousValues: GamePreviousValuesObject
      TournamentSubscriptionPayload: TournamentSubscriptionPayloadObject
      TournamentPreviousValues: TournamentPreviousValuesObject
      CategorySubscriptionPayload: CategorySubscriptionPayloadObject
      CategoryPreviousValues: CategoryPreviousValuesObject
      SubTournamentSubscriptionPayload: SubTournamentSubscriptionPayloadObject
      SubTournamentPreviousValues: SubTournamentPreviousValuesObject
      SubTournamentPlayerSubscriptionPayload: SubTournamentPlayerSubscriptionPayloadObject
      SubTournamentPlayerPreviousValues: SubTournamentPlayerPreviousValuesObject
      TeamSubscriptionPayload: TeamSubscriptionPayloadObject
      TeamPreviousValues: TeamPreviousValuesObject
      TeamPlayerSubscriptionPayload: TeamPlayerSubscriptionPayloadObject
      TeamPlayerPreviousValues: TeamPlayerPreviousValuesObject
      StatusSubscriptionPayload: StatusSubscriptionPayloadObject
      StatusPreviousValues: StatusPreviousValuesObject
      RoundSubscriptionPayload: RoundSubscriptionPayloadObject
      RoundPreviousValues: RoundPreviousValuesObject
      FixtureSubscriptionPayload: FixtureSubscriptionPayloadObject
      FixturePreviousValues: FixturePreviousValuesObject
      FootballScoreSubscriptionPayload: FootballScoreSubscriptionPayloadObject
      FootballScorePreviousValues: FootballScorePreviousValuesObject
      FootballScoreActivitySubscriptionPayload: FootballScoreActivitySubscriptionPayloadObject
      FootballScoreActivityPreviousValues: FootballScoreActivityPreviousValuesObject
      ChessScoreSubscriptionPayload: ChessScoreSubscriptionPayloadObject
      ChessScorePreviousValues: ChessScorePreviousValuesObject
      CarromBoardScoreSubscriptionPayload: CarromBoardScoreSubscriptionPayloadObject
      CarromBoardScorePreviousValues: CarromBoardScorePreviousValuesObject
      CarromBoardScoreActivitySubscriptionPayload: CarromBoardScoreActivitySubscriptionPayloadObject
      CarromBoardScoreActivityPreviousValues: CarromBoardScoreActivityPreviousValuesObject
      TableTennisScoreSubscriptionPayload: TableTennisScoreSubscriptionPayloadObject
      TableTennisScorePreviousValues: TableTennisScorePreviousValuesObject
      TableTennisScoreActivitySubscriptionPayload: TableTennisScoreActivitySubscriptionPayloadObject
      TableTennisScoreActivityPreviousValues: TableTennisScoreActivityPreviousValuesObject
      CounterStrikeFScoreSubscriptionPayload: CounterStrikeFScoreSubscriptionPayloadObject
      CounterStrikeFScorePreviousValues: CounterStrikeFScorePreviousValuesObject
      CounterStrikeScoreSetSubscriptionPayload: CounterStrikeScoreSetSubscriptionPayloadObject
      CounterStrikeScoreSetPreviousValues: CounterStrikeScoreSetPreviousValuesObject
      CounterStrikeScoreSetActivitySubscriptionPayload: CounterStrikeScoreSetActivitySubscriptionPayloadObject
      CounterStrikeScoreSetActivityPreviousValues: CounterStrikeScoreSetActivityPreviousValuesObject
      DotaScoreSubscriptionPayload: DotaScoreSubscriptionPayloadObject
      DotaScorePreviousValues: DotaScorePreviousValuesObject
      DotaScoreActivitySubscriptionPayload: DotaScoreActivitySubscriptionPayloadObject
      DotaScoreActivityPreviousValues: DotaScoreActivityPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Employee: EmployeeFieldDetails
      EmployeeConnection: EmployeeConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      EmployeeEdge: EmployeeEdgeFieldDetails
      AggregateEmployee: AggregateEmployeeFieldDetails
      UserAccount: UserAccountFieldDetails
      UserAccountConnection: UserAccountConnectionFieldDetails
      UserAccountEdge: UserAccountEdgeFieldDetails
      AggregateUserAccount: AggregateUserAccountFieldDetails
      UserAccountToken: UserAccountTokenFieldDetails
      UserAccountTokenConnection: UserAccountTokenConnectionFieldDetails
      UserAccountTokenEdge: UserAccountTokenEdgeFieldDetails
      AggregateUserAccountToken: AggregateUserAccountTokenFieldDetails
      Game: GameFieldDetails
      GameConnection: GameConnectionFieldDetails
      GameEdge: GameEdgeFieldDetails
      AggregateGame: AggregateGameFieldDetails
      Tournament: TournamentFieldDetails
      TournamentConnection: TournamentConnectionFieldDetails
      TournamentEdge: TournamentEdgeFieldDetails
      AggregateTournament: AggregateTournamentFieldDetails
      Category: CategoryFieldDetails
      CategoryConnection: CategoryConnectionFieldDetails
      CategoryEdge: CategoryEdgeFieldDetails
      AggregateCategory: AggregateCategoryFieldDetails
      SubTournament: SubTournamentFieldDetails
      SubTournamentConnection: SubTournamentConnectionFieldDetails
      SubTournamentEdge: SubTournamentEdgeFieldDetails
      AggregateSubTournament: AggregateSubTournamentFieldDetails
      SubTournamentPlayer: SubTournamentPlayerFieldDetails
      SubTournamentPlayerConnection: SubTournamentPlayerConnectionFieldDetails
      SubTournamentPlayerEdge: SubTournamentPlayerEdgeFieldDetails
      AggregateSubTournamentPlayer: AggregateSubTournamentPlayerFieldDetails
      Team: TeamFieldDetails
      TeamConnection: TeamConnectionFieldDetails
      TeamEdge: TeamEdgeFieldDetails
      AggregateTeam: AggregateTeamFieldDetails
      TeamPlayer: TeamPlayerFieldDetails
      TeamPlayerConnection: TeamPlayerConnectionFieldDetails
      TeamPlayerEdge: TeamPlayerEdgeFieldDetails
      AggregateTeamPlayer: AggregateTeamPlayerFieldDetails
      Status: StatusFieldDetails
      StatusConnection: StatusConnectionFieldDetails
      StatusEdge: StatusEdgeFieldDetails
      AggregateStatus: AggregateStatusFieldDetails
      Round: RoundFieldDetails
      RoundConnection: RoundConnectionFieldDetails
      RoundEdge: RoundEdgeFieldDetails
      AggregateRound: AggregateRoundFieldDetails
      Fixture: FixtureFieldDetails
      FixtureConnection: FixtureConnectionFieldDetails
      FixtureEdge: FixtureEdgeFieldDetails
      AggregateFixture: AggregateFixtureFieldDetails
      FootballScore: FootballScoreFieldDetails
      FootballScoreConnection: FootballScoreConnectionFieldDetails
      FootballScoreEdge: FootballScoreEdgeFieldDetails
      AggregateFootballScore: AggregateFootballScoreFieldDetails
      FootballScoreActivity: FootballScoreActivityFieldDetails
      FootballScoreActivityConnection: FootballScoreActivityConnectionFieldDetails
      FootballScoreActivityEdge: FootballScoreActivityEdgeFieldDetails
      AggregateFootballScoreActivity: AggregateFootballScoreActivityFieldDetails
      ChessScore: ChessScoreFieldDetails
      ChessScoreConnection: ChessScoreConnectionFieldDetails
      ChessScoreEdge: ChessScoreEdgeFieldDetails
      AggregateChessScore: AggregateChessScoreFieldDetails
      CarromBoardScore: CarromBoardScoreFieldDetails
      CarromBoardScoreConnection: CarromBoardScoreConnectionFieldDetails
      CarromBoardScoreEdge: CarromBoardScoreEdgeFieldDetails
      AggregateCarromBoardScore: AggregateCarromBoardScoreFieldDetails
      CarromBoardScoreActivity: CarromBoardScoreActivityFieldDetails
      CarromBoardScoreActivityConnection: CarromBoardScoreActivityConnectionFieldDetails
      CarromBoardScoreActivityEdge: CarromBoardScoreActivityEdgeFieldDetails
      AggregateCarromBoardScoreActivity: AggregateCarromBoardScoreActivityFieldDetails
      TableTennisScore: TableTennisScoreFieldDetails
      TableTennisScoreConnection: TableTennisScoreConnectionFieldDetails
      TableTennisScoreEdge: TableTennisScoreEdgeFieldDetails
      AggregateTableTennisScore: AggregateTableTennisScoreFieldDetails
      TableTennisScoreActivity: TableTennisScoreActivityFieldDetails
      TableTennisScoreActivityConnection: TableTennisScoreActivityConnectionFieldDetails
      TableTennisScoreActivityEdge: TableTennisScoreActivityEdgeFieldDetails
      AggregateTableTennisScoreActivity: AggregateTableTennisScoreActivityFieldDetails
      CounterStrikeFScore: CounterStrikeFScoreFieldDetails
      CounterStrikeFScoreConnection: CounterStrikeFScoreConnectionFieldDetails
      CounterStrikeFScoreEdge: CounterStrikeFScoreEdgeFieldDetails
      AggregateCounterStrikeFScore: AggregateCounterStrikeFScoreFieldDetails
      CounterStrikeScoreSet: CounterStrikeScoreSetFieldDetails
      CounterStrikeScoreSetConnection: CounterStrikeScoreSetConnectionFieldDetails
      CounterStrikeScoreSetEdge: CounterStrikeScoreSetEdgeFieldDetails
      AggregateCounterStrikeScoreSet: AggregateCounterStrikeScoreSetFieldDetails
      CounterStrikeScoreSetActivity: CounterStrikeScoreSetActivityFieldDetails
      CounterStrikeScoreSetActivityConnection: CounterStrikeScoreSetActivityConnectionFieldDetails
      CounterStrikeScoreSetActivityEdge: CounterStrikeScoreSetActivityEdgeFieldDetails
      AggregateCounterStrikeScoreSetActivity: AggregateCounterStrikeScoreSetActivityFieldDetails
      DotaScore: DotaScoreFieldDetails
      DotaScoreConnection: DotaScoreConnectionFieldDetails
      DotaScoreEdge: DotaScoreEdgeFieldDetails
      AggregateDotaScore: AggregateDotaScoreFieldDetails
      DotaScoreActivity: DotaScoreActivityFieldDetails
      DotaScoreActivityConnection: DotaScoreActivityConnectionFieldDetails
      DotaScoreActivityEdge: DotaScoreActivityEdgeFieldDetails
      AggregateDotaScoreActivity: AggregateDotaScoreActivityFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      EmployeeSubscriptionPayload: EmployeeSubscriptionPayloadFieldDetails
      EmployeePreviousValues: EmployeePreviousValuesFieldDetails
      UserAccountSubscriptionPayload: UserAccountSubscriptionPayloadFieldDetails
      UserAccountPreviousValues: UserAccountPreviousValuesFieldDetails
      UserAccountTokenSubscriptionPayload: UserAccountTokenSubscriptionPayloadFieldDetails
      UserAccountTokenPreviousValues: UserAccountTokenPreviousValuesFieldDetails
      GameSubscriptionPayload: GameSubscriptionPayloadFieldDetails
      GamePreviousValues: GamePreviousValuesFieldDetails
      TournamentSubscriptionPayload: TournamentSubscriptionPayloadFieldDetails
      TournamentPreviousValues: TournamentPreviousValuesFieldDetails
      CategorySubscriptionPayload: CategorySubscriptionPayloadFieldDetails
      CategoryPreviousValues: CategoryPreviousValuesFieldDetails
      SubTournamentSubscriptionPayload: SubTournamentSubscriptionPayloadFieldDetails
      SubTournamentPreviousValues: SubTournamentPreviousValuesFieldDetails
      SubTournamentPlayerSubscriptionPayload: SubTournamentPlayerSubscriptionPayloadFieldDetails
      SubTournamentPlayerPreviousValues: SubTournamentPlayerPreviousValuesFieldDetails
      TeamSubscriptionPayload: TeamSubscriptionPayloadFieldDetails
      TeamPreviousValues: TeamPreviousValuesFieldDetails
      TeamPlayerSubscriptionPayload: TeamPlayerSubscriptionPayloadFieldDetails
      TeamPlayerPreviousValues: TeamPlayerPreviousValuesFieldDetails
      StatusSubscriptionPayload: StatusSubscriptionPayloadFieldDetails
      StatusPreviousValues: StatusPreviousValuesFieldDetails
      RoundSubscriptionPayload: RoundSubscriptionPayloadFieldDetails
      RoundPreviousValues: RoundPreviousValuesFieldDetails
      FixtureSubscriptionPayload: FixtureSubscriptionPayloadFieldDetails
      FixturePreviousValues: FixturePreviousValuesFieldDetails
      FootballScoreSubscriptionPayload: FootballScoreSubscriptionPayloadFieldDetails
      FootballScorePreviousValues: FootballScorePreviousValuesFieldDetails
      FootballScoreActivitySubscriptionPayload: FootballScoreActivitySubscriptionPayloadFieldDetails
      FootballScoreActivityPreviousValues: FootballScoreActivityPreviousValuesFieldDetails
      ChessScoreSubscriptionPayload: ChessScoreSubscriptionPayloadFieldDetails
      ChessScorePreviousValues: ChessScorePreviousValuesFieldDetails
      CarromBoardScoreSubscriptionPayload: CarromBoardScoreSubscriptionPayloadFieldDetails
      CarromBoardScorePreviousValues: CarromBoardScorePreviousValuesFieldDetails
      CarromBoardScoreActivitySubscriptionPayload: CarromBoardScoreActivitySubscriptionPayloadFieldDetails
      CarromBoardScoreActivityPreviousValues: CarromBoardScoreActivityPreviousValuesFieldDetails
      TableTennisScoreSubscriptionPayload: TableTennisScoreSubscriptionPayloadFieldDetails
      TableTennisScorePreviousValues: TableTennisScorePreviousValuesFieldDetails
      TableTennisScoreActivitySubscriptionPayload: TableTennisScoreActivitySubscriptionPayloadFieldDetails
      TableTennisScoreActivityPreviousValues: TableTennisScoreActivityPreviousValuesFieldDetails
      CounterStrikeFScoreSubscriptionPayload: CounterStrikeFScoreSubscriptionPayloadFieldDetails
      CounterStrikeFScorePreviousValues: CounterStrikeFScorePreviousValuesFieldDetails
      CounterStrikeScoreSetSubscriptionPayload: CounterStrikeScoreSetSubscriptionPayloadFieldDetails
      CounterStrikeScoreSetPreviousValues: CounterStrikeScoreSetPreviousValuesFieldDetails
      CounterStrikeScoreSetActivitySubscriptionPayload: CounterStrikeScoreSetActivitySubscriptionPayloadFieldDetails
      CounterStrikeScoreSetActivityPreviousValues: CounterStrikeScoreSetActivityPreviousValuesFieldDetails
      DotaScoreSubscriptionPayload: DotaScoreSubscriptionPayloadFieldDetails
      DotaScorePreviousValues: DotaScorePreviousValuesFieldDetails
      DotaScoreActivitySubscriptionPayload: DotaScoreActivitySubscriptionPayloadFieldDetails
      DotaScoreActivityPreviousValues: DotaScoreActivityPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      EmployeeWhereUniqueInput: EmployeeWhereUniqueInputInputObject
      EmployeeWhereInput: EmployeeWhereInputInputObject
      UserAccountWhereUniqueInput: UserAccountWhereUniqueInputInputObject
      UserAccountWhereInput: UserAccountWhereInputInputObject
      UserAccountTokenWhereUniqueInput: UserAccountTokenWhereUniqueInputInputObject
      UserAccountTokenWhereInput: UserAccountTokenWhereInputInputObject
      GameWhereUniqueInput: GameWhereUniqueInputInputObject
      GameWhereInput: GameWhereInputInputObject
      TournamentWhereUniqueInput: TournamentWhereUniqueInputInputObject
      TournamentWhereInput: TournamentWhereInputInputObject
      CategoryWhereUniqueInput: CategoryWhereUniqueInputInputObject
      CategoryWhereInput: CategoryWhereInputInputObject
      SubTournamentWhereUniqueInput: SubTournamentWhereUniqueInputInputObject
      SubTournamentWhereInput: SubTournamentWhereInputInputObject
      SubTournamentPlayerWhereUniqueInput: SubTournamentPlayerWhereUniqueInputInputObject
      SubTournamentPlayerWhereInput: SubTournamentPlayerWhereInputInputObject
      TeamWhereUniqueInput: TeamWhereUniqueInputInputObject
      TeamWhereInput: TeamWhereInputInputObject
      TeamPlayerWhereUniqueInput: TeamPlayerWhereUniqueInputInputObject
      TeamPlayerWhereInput: TeamPlayerWhereInputInputObject
      StatusWhereUniqueInput: StatusWhereUniqueInputInputObject
      StatusWhereInput: StatusWhereInputInputObject
      RoundWhereUniqueInput: RoundWhereUniqueInputInputObject
      RoundWhereInput: RoundWhereInputInputObject
      FixtureWhereUniqueInput: FixtureWhereUniqueInputInputObject
      FixtureWhereInput: FixtureWhereInputInputObject
      FootballScoreWhereUniqueInput: FootballScoreWhereUniqueInputInputObject
      FootballScoreWhereInput: FootballScoreWhereInputInputObject
      FootballScoreActivityWhereUniqueInput: FootballScoreActivityWhereUniqueInputInputObject
      FootballScoreActivityWhereInput: FootballScoreActivityWhereInputInputObject
      ChessScoreWhereUniqueInput: ChessScoreWhereUniqueInputInputObject
      ChessScoreWhereInput: ChessScoreWhereInputInputObject
      CarromBoardScoreWhereUniqueInput: CarromBoardScoreWhereUniqueInputInputObject
      CarromBoardScoreWhereInput: CarromBoardScoreWhereInputInputObject
      CarromBoardScoreActivityWhereUniqueInput: CarromBoardScoreActivityWhereUniqueInputInputObject
      CarromBoardScoreActivityWhereInput: CarromBoardScoreActivityWhereInputInputObject
      TableTennisScoreWhereUniqueInput: TableTennisScoreWhereUniqueInputInputObject
      TableTennisScoreWhereInput: TableTennisScoreWhereInputInputObject
      TableTennisScoreActivityWhereUniqueInput: TableTennisScoreActivityWhereUniqueInputInputObject
      TableTennisScoreActivityWhereInput: TableTennisScoreActivityWhereInputInputObject
      CounterStrikeFScoreWhereUniqueInput: CounterStrikeFScoreWhereUniqueInputInputObject
      CounterStrikeFScoreWhereInput: CounterStrikeFScoreWhereInputInputObject
      CounterStrikeScoreSetWhereUniqueInput: CounterStrikeScoreSetWhereUniqueInputInputObject
      CounterStrikeScoreSetWhereInput: CounterStrikeScoreSetWhereInputInputObject
      CounterStrikeScoreSetActivityWhereUniqueInput: CounterStrikeScoreSetActivityWhereUniqueInputInputObject
      CounterStrikeScoreSetActivityWhereInput: CounterStrikeScoreSetActivityWhereInputInputObject
      DotaScoreWhereUniqueInput: DotaScoreWhereUniqueInputInputObject
      DotaScoreWhereInput: DotaScoreWhereInputInputObject
      DotaScoreActivityWhereUniqueInput: DotaScoreActivityWhereUniqueInputInputObject
      DotaScoreActivityWhereInput: DotaScoreActivityWhereInputInputObject
      EmployeeCreateInput: EmployeeCreateInputInputObject
      EmployeeUpdateInput: EmployeeUpdateInputInputObject
      EmployeeUpdateManyMutationInput: EmployeeUpdateManyMutationInputInputObject
      UserAccountCreateInput: UserAccountCreateInputInputObject
      EmployeeCreateOneInput: EmployeeCreateOneInputInputObject
      UserAccountUpdateInput: UserAccountUpdateInputInputObject
      EmployeeUpdateOneRequiredInput: EmployeeUpdateOneRequiredInputInputObject
      EmployeeUpdateDataInput: EmployeeUpdateDataInputInputObject
      EmployeeUpsertNestedInput: EmployeeUpsertNestedInputInputObject
      UserAccountUpdateManyMutationInput: UserAccountUpdateManyMutationInputInputObject
      UserAccountTokenCreateInput: UserAccountTokenCreateInputInputObject
      UserAccountCreateOneInput: UserAccountCreateOneInputInputObject
      UserAccountTokenUpdateInput: UserAccountTokenUpdateInputInputObject
      UserAccountUpdateOneRequiredInput: UserAccountUpdateOneRequiredInputInputObject
      UserAccountUpdateDataInput: UserAccountUpdateDataInputInputObject
      UserAccountUpsertNestedInput: UserAccountUpsertNestedInputInputObject
      UserAccountTokenUpdateManyMutationInput: UserAccountTokenUpdateManyMutationInputInputObject
      GameCreateInput: GameCreateInputInputObject
      GameUpdateInput: GameUpdateInputInputObject
      GameUpdateManyMutationInput: GameUpdateManyMutationInputInputObject
      TournamentCreateInput: TournamentCreateInputInputObject
      GameCreateOneInput: GameCreateOneInputInputObject
      TournamentUpdateInput: TournamentUpdateInputInputObject
      GameUpdateOneRequiredInput: GameUpdateOneRequiredInputInputObject
      GameUpdateDataInput: GameUpdateDataInputInputObject
      GameUpsertNestedInput: GameUpsertNestedInputInputObject
      TournamentUpdateManyMutationInput: TournamentUpdateManyMutationInputInputObject
      CategoryCreateInput: CategoryCreateInputInputObject
      CategoryUpdateInput: CategoryUpdateInputInputObject
      CategoryUpdateManyMutationInput: CategoryUpdateManyMutationInputInputObject
      SubTournamentCreateInput: SubTournamentCreateInputInputObject
      TournamentCreateOneInput: TournamentCreateOneInputInputObject
      CategoryCreateOneInput: CategoryCreateOneInputInputObject
      SubTournamentUpdateInput: SubTournamentUpdateInputInputObject
      TournamentUpdateOneRequiredInput: TournamentUpdateOneRequiredInputInputObject
      TournamentUpdateDataInput: TournamentUpdateDataInputInputObject
      TournamentUpsertNestedInput: TournamentUpsertNestedInputInputObject
      CategoryUpdateOneRequiredInput: CategoryUpdateOneRequiredInputInputObject
      CategoryUpdateDataInput: CategoryUpdateDataInputInputObject
      CategoryUpsertNestedInput: CategoryUpsertNestedInputInputObject
      SubTournamentPlayerCreateInput: SubTournamentPlayerCreateInputInputObject
      SubTournamentCreateOneInput: SubTournamentCreateOneInputInputObject
      SubTournamentPlayerUpdateInput: SubTournamentPlayerUpdateInputInputObject
      SubTournamentUpdateOneRequiredInput: SubTournamentUpdateOneRequiredInputInputObject
      SubTournamentUpdateDataInput: SubTournamentUpdateDataInputInputObject
      SubTournamentUpsertNestedInput: SubTournamentUpsertNestedInputInputObject
      SubTournamentPlayerUpdateManyMutationInput: SubTournamentPlayerUpdateManyMutationInputInputObject
      TeamCreateInput: TeamCreateInputInputObject
      TeamUpdateInput: TeamUpdateInputInputObject
      TeamUpdateManyMutationInput: TeamUpdateManyMutationInputInputObject
      TeamPlayerCreateInput: TeamPlayerCreateInputInputObject
      TeamCreateOneInput: TeamCreateOneInputInputObject
      SubTournamentPlayerCreateOneInput: SubTournamentPlayerCreateOneInputInputObject
      TeamPlayerUpdateInput: TeamPlayerUpdateInputInputObject
      TeamUpdateOneRequiredInput: TeamUpdateOneRequiredInputInputObject
      TeamUpdateDataInput: TeamUpdateDataInputInputObject
      TeamUpsertNestedInput: TeamUpsertNestedInputInputObject
      SubTournamentPlayerUpdateOneRequiredInput: SubTournamentPlayerUpdateOneRequiredInputInputObject
      SubTournamentPlayerUpdateDataInput: SubTournamentPlayerUpdateDataInputInputObject
      SubTournamentPlayerUpsertNestedInput: SubTournamentPlayerUpsertNestedInputInputObject
      TeamPlayerUpdateManyMutationInput: TeamPlayerUpdateManyMutationInputInputObject
      StatusCreateInput: StatusCreateInputInputObject
      StatusUpdateInput: StatusUpdateInputInputObject
      StatusUpdateManyMutationInput: StatusUpdateManyMutationInputInputObject
      RoundCreateInput: RoundCreateInputInputObject
      RoundUpdateInput: RoundUpdateInputInputObject
      RoundUpdateManyMutationInput: RoundUpdateManyMutationInputInputObject
      FixtureCreateInput: FixtureCreateInputInputObject
      StatusCreateOneInput: StatusCreateOneInputInputObject
      RoundCreateOneInput: RoundCreateOneInputInputObject
      FixtureCreateOneWithoutHomeTeamParentFixtureInput: FixtureCreateOneWithoutHomeTeamParentFixtureInputInputObject
      FixtureCreateWithoutHomeTeamParentFixtureInput: FixtureCreateWithoutHomeTeamParentFixtureInputInputObject
      FixtureCreateOneWithoutAwayTeamParentFixtureInput: FixtureCreateOneWithoutAwayTeamParentFixtureInputInputObject
      FixtureCreateWithoutAwayTeamParentFixtureInput: FixtureCreateWithoutAwayTeamParentFixtureInputInputObject
      FixtureCreateimagesInput: FixtureCreateimagesInputInputObject
      FixtureUpdateInput: FixtureUpdateInputInputObject
      StatusUpdateOneRequiredInput: StatusUpdateOneRequiredInputInputObject
      StatusUpdateDataInput: StatusUpdateDataInputInputObject
      StatusUpsertNestedInput: StatusUpsertNestedInputInputObject
      TeamUpdateOneInput: TeamUpdateOneInputInputObject
      RoundUpdateOneRequiredInput: RoundUpdateOneRequiredInputInputObject
      RoundUpdateDataInput: RoundUpdateDataInputInputObject
      RoundUpsertNestedInput: RoundUpsertNestedInputInputObject
      FixtureUpdateOneWithoutHomeTeamParentFixtureInput: FixtureUpdateOneWithoutHomeTeamParentFixtureInputInputObject
      FixtureUpdateWithoutHomeTeamParentFixtureDataInput: FixtureUpdateWithoutHomeTeamParentFixtureDataInputInputObject
      FixtureUpdateOneWithoutAwayTeamParentFixtureInput: FixtureUpdateOneWithoutAwayTeamParentFixtureInputInputObject
      FixtureUpdateWithoutAwayTeamParentFixtureDataInput: FixtureUpdateWithoutAwayTeamParentFixtureDataInputInputObject
      FixtureUpdateimagesInput: FixtureUpdateimagesInputInputObject
      FixtureUpsertWithoutAwayTeamParentFixtureInput: FixtureUpsertWithoutAwayTeamParentFixtureInputInputObject
      FixtureUpsertWithoutHomeTeamParentFixtureInput: FixtureUpsertWithoutHomeTeamParentFixtureInputInputObject
      FixtureUpdateManyMutationInput: FixtureUpdateManyMutationInputInputObject
      FootballScoreCreateInput: FootballScoreCreateInputInputObject
      FixtureCreateOneInput: FixtureCreateOneInputInputObject
      FootballScoreUpdateInput: FootballScoreUpdateInputInputObject
      FixtureUpdateOneRequiredInput: FixtureUpdateOneRequiredInputInputObject
      FixtureUpdateDataInput: FixtureUpdateDataInputInputObject
      FixtureUpsertNestedInput: FixtureUpsertNestedInputInputObject
      FootballScoreUpdateManyMutationInput: FootballScoreUpdateManyMutationInputInputObject
      FootballScoreActivityCreateInput: FootballScoreActivityCreateInputInputObject
      TeamPlayerCreateOneInput: TeamPlayerCreateOneInputInputObject
      FootballScoreActivityUpdateInput: FootballScoreActivityUpdateInputInputObject
      TeamPlayerUpdateOneRequiredInput: TeamPlayerUpdateOneRequiredInputInputObject
      TeamPlayerUpdateDataInput: TeamPlayerUpdateDataInputInputObject
      TeamPlayerUpsertNestedInput: TeamPlayerUpsertNestedInputInputObject
      TeamPlayerUpdateOneInput: TeamPlayerUpdateOneInputInputObject
      FootballScoreActivityUpdateManyMutationInput: FootballScoreActivityUpdateManyMutationInputInputObject
      ChessScoreCreateInput: ChessScoreCreateInputInputObject
      ChessScoreUpdateInput: ChessScoreUpdateInputInputObject
      ChessScoreUpdateManyMutationInput: ChessScoreUpdateManyMutationInputInputObject
      CarromBoardScoreCreateInput: CarromBoardScoreCreateInputInputObject
      CarromBoardScoreUpdateInput: CarromBoardScoreUpdateInputInputObject
      CarromBoardScoreUpdateManyMutationInput: CarromBoardScoreUpdateManyMutationInputInputObject
      CarromBoardScoreActivityCreateInput: CarromBoardScoreActivityCreateInputInputObject
      CarromBoardScoreActivityUpdateInput: CarromBoardScoreActivityUpdateInputInputObject
      CarromBoardScoreActivityUpdateManyMutationInput: CarromBoardScoreActivityUpdateManyMutationInputInputObject
      TableTennisScoreCreateInput: TableTennisScoreCreateInputInputObject
      TableTennisScoreUpdateInput: TableTennisScoreUpdateInputInputObject
      TableTennisScoreUpdateManyMutationInput: TableTennisScoreUpdateManyMutationInputInputObject
      TableTennisScoreActivityCreateInput: TableTennisScoreActivityCreateInputInputObject
      TableTennisScoreActivityUpdateInput: TableTennisScoreActivityUpdateInputInputObject
      TableTennisScoreActivityUpdateManyMutationInput: TableTennisScoreActivityUpdateManyMutationInputInputObject
      CounterStrikeFScoreCreateInput: CounterStrikeFScoreCreateInputInputObject
      CounterStrikeFScoreUpdateInput: CounterStrikeFScoreUpdateInputInputObject
      CounterStrikeFScoreUpdateManyMutationInput: CounterStrikeFScoreUpdateManyMutationInputInputObject
      CounterStrikeScoreSetCreateInput: CounterStrikeScoreSetCreateInputInputObject
      CounterStrikeScoreSetUpdateInput: CounterStrikeScoreSetUpdateInputInputObject
      CounterStrikeScoreSetUpdateManyMutationInput: CounterStrikeScoreSetUpdateManyMutationInputInputObject
      CounterStrikeScoreSetActivityCreateInput: CounterStrikeScoreSetActivityCreateInputInputObject
      CounterStrikeScoreSetCreateOneInput: CounterStrikeScoreSetCreateOneInputInputObject
      CounterStrikeScoreSetActivityUpdateInput: CounterStrikeScoreSetActivityUpdateInputInputObject
      CounterStrikeScoreSetUpdateOneRequiredInput: CounterStrikeScoreSetUpdateOneRequiredInputInputObject
      CounterStrikeScoreSetUpdateDataInput: CounterStrikeScoreSetUpdateDataInputInputObject
      CounterStrikeScoreSetUpsertNestedInput: CounterStrikeScoreSetUpsertNestedInputInputObject
      CounterStrikeScoreSetActivityUpdateManyMutationInput: CounterStrikeScoreSetActivityUpdateManyMutationInputInputObject
      DotaScoreCreateInput: DotaScoreCreateInputInputObject
      DotaScoreUpdateInput: DotaScoreUpdateInputInputObject
      DotaScoreUpdateManyMutationInput: DotaScoreUpdateManyMutationInputInputObject
      DotaScoreActivityCreateInput: DotaScoreActivityCreateInputInputObject
      DotaScoreActivityUpdateInput: DotaScoreActivityUpdateInputInputObject
      DotaScoreActivityUpdateManyMutationInput: DotaScoreActivityUpdateManyMutationInputInputObject
      EmployeeSubscriptionWhereInput: EmployeeSubscriptionWhereInputInputObject
      UserAccountSubscriptionWhereInput: UserAccountSubscriptionWhereInputInputObject
      UserAccountTokenSubscriptionWhereInput: UserAccountTokenSubscriptionWhereInputInputObject
      GameSubscriptionWhereInput: GameSubscriptionWhereInputInputObject
      TournamentSubscriptionWhereInput: TournamentSubscriptionWhereInputInputObject
      CategorySubscriptionWhereInput: CategorySubscriptionWhereInputInputObject
      SubTournamentSubscriptionWhereInput: SubTournamentSubscriptionWhereInputInputObject
      SubTournamentPlayerSubscriptionWhereInput: SubTournamentPlayerSubscriptionWhereInputInputObject
      TeamSubscriptionWhereInput: TeamSubscriptionWhereInputInputObject
      TeamPlayerSubscriptionWhereInput: TeamPlayerSubscriptionWhereInputInputObject
      StatusSubscriptionWhereInput: StatusSubscriptionWhereInputInputObject
      RoundSubscriptionWhereInput: RoundSubscriptionWhereInputInputObject
      FixtureSubscriptionWhereInput: FixtureSubscriptionWhereInputInputObject
      FootballScoreSubscriptionWhereInput: FootballScoreSubscriptionWhereInputInputObject
      FootballScoreActivitySubscriptionWhereInput: FootballScoreActivitySubscriptionWhereInputInputObject
      ChessScoreSubscriptionWhereInput: ChessScoreSubscriptionWhereInputInputObject
      CarromBoardScoreSubscriptionWhereInput: CarromBoardScoreSubscriptionWhereInputInputObject
      CarromBoardScoreActivitySubscriptionWhereInput: CarromBoardScoreActivitySubscriptionWhereInputInputObject
      TableTennisScoreSubscriptionWhereInput: TableTennisScoreSubscriptionWhereInputInputObject
      TableTennisScoreActivitySubscriptionWhereInput: TableTennisScoreActivitySubscriptionWhereInputInputObject
      CounterStrikeFScoreSubscriptionWhereInput: CounterStrikeFScoreSubscriptionWhereInputInputObject
      CounterStrikeScoreSetSubscriptionWhereInput: CounterStrikeScoreSetSubscriptionWhereInputInputObject
      CounterStrikeScoreSetActivitySubscriptionWhereInput: CounterStrikeScoreSetActivitySubscriptionWhereInputInputObject
      DotaScoreSubscriptionWhereInput: DotaScoreSubscriptionWhereInputInputObject
      DotaScoreActivitySubscriptionWhereInput: DotaScoreActivitySubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    EmployeeOrderByInput: EmployeeOrderByInputValues,
    UserRole: UserRoleValues,
    UserAccountOrderByInput: UserAccountOrderByInputValues,
    UserAccountTokenOrderByInput: UserAccountTokenOrderByInputValues,
    GameOrderByInput: GameOrderByInputValues,
    TournamentOrderByInput: TournamentOrderByInputValues,
    CategoryOrderByInput: CategoryOrderByInputValues,
    SubTournamentOrderByInput: SubTournamentOrderByInputValues,
    SubTournamentPlayerOrderByInput: SubTournamentPlayerOrderByInputValues,
    TeamOrderByInput: TeamOrderByInputValues,
    TeamPlayerOrderByInput: TeamPlayerOrderByInputValues,
    StatusOrderByInput: StatusOrderByInputValues,
    RoundOrderByInput: RoundOrderByInputValues,
    FixtureOrderByInput: FixtureOrderByInputValues,
    FootballScoreOrderByInput: FootballScoreOrderByInputValues,
    FootballActivityType: FootballActivityTypeValues,
    FootballScoreActivityOrderByInput: FootballScoreActivityOrderByInputValues,
    ChessWinningMethod: ChessWinningMethodValues,
    ChessScoreOrderByInput: ChessScoreOrderByInputValues,
    CarromBoardScoreOrderByInput: CarromBoardScoreOrderByInputValues,
    CarromBoardScoreActivityOrderByInput: CarromBoardScoreActivityOrderByInputValues,
    TableTennisScoreOrderByInput: TableTennisScoreOrderByInputValues,
    TableTennisScoreActivityOrderByInput: TableTennisScoreActivityOrderByInputValues,
    CounterStrikeFScoreOrderByInput: CounterStrikeFScoreOrderByInputValues,
    CounterStrikeScoreSetOrderByInput: CounterStrikeScoreSetOrderByInputValues,
    CounterStrikeScoreSetActivityOrderByInput: CounterStrikeScoreSetActivityOrderByInputValues,
    DotaScoreOrderByInput: DotaScoreOrderByInputValues,
    DotaScoreActivityOrderByInput: DotaScoreActivityOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'employee', args?: QueryEmployeeArgs[] | false, alias?: string  } 
  | { name: 'employees', args?: QueryEmployeesArgs[] | false, alias?: string  } 
  | { name: 'employeesConnection', args?: QueryEmployeesConnectionArgs[] | false, alias?: string  } 
  | { name: 'userAccount', args?: QueryUserAccountArgs[] | false, alias?: string  } 
  | { name: 'userAccounts', args?: QueryUserAccountsArgs[] | false, alias?: string  } 
  | { name: 'userAccountsConnection', args?: QueryUserAccountsConnectionArgs[] | false, alias?: string  } 
  | { name: 'userAccountToken', args?: QueryUserAccountTokenArgs[] | false, alias?: string  } 
  | { name: 'userAccountTokens', args?: QueryUserAccountTokensArgs[] | false, alias?: string  } 
  | { name: 'userAccountTokensConnection', args?: QueryUserAccountTokensConnectionArgs[] | false, alias?: string  } 
  | { name: 'game', args?: QueryGameArgs[] | false, alias?: string  } 
  | { name: 'games', args?: QueryGamesArgs[] | false, alias?: string  } 
  | { name: 'gamesConnection', args?: QueryGamesConnectionArgs[] | false, alias?: string  } 
  | { name: 'tournament', args?: QueryTournamentArgs[] | false, alias?: string  } 
  | { name: 'tournaments', args?: QueryTournamentsArgs[] | false, alias?: string  } 
  | { name: 'tournamentsConnection', args?: QueryTournamentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'category', args?: QueryCategoryArgs[] | false, alias?: string  } 
  | { name: 'categories', args?: QueryCategoriesArgs[] | false, alias?: string  } 
  | { name: 'categoriesConnection', args?: QueryCategoriesConnectionArgs[] | false, alias?: string  } 
  | { name: 'subTournament', args?: QuerySubTournamentArgs[] | false, alias?: string  } 
  | { name: 'subTournaments', args?: QuerySubTournamentsArgs[] | false, alias?: string  } 
  | { name: 'subTournamentsConnection', args?: QuerySubTournamentsConnectionArgs[] | false, alias?: string  } 
  | { name: 'subTournamentPlayer', args?: QuerySubTournamentPlayerArgs[] | false, alias?: string  } 
  | { name: 'subTournamentPlayers', args?: QuerySubTournamentPlayersArgs[] | false, alias?: string  } 
  | { name: 'subTournamentPlayersConnection', args?: QuerySubTournamentPlayersConnectionArgs[] | false, alias?: string  } 
  | { name: 'team', args?: QueryTeamArgs[] | false, alias?: string  } 
  | { name: 'teams', args?: QueryTeamsArgs[] | false, alias?: string  } 
  | { name: 'teamsConnection', args?: QueryTeamsConnectionArgs[] | false, alias?: string  } 
  | { name: 'teamPlayer', args?: QueryTeamPlayerArgs[] | false, alias?: string  } 
  | { name: 'teamPlayers', args?: QueryTeamPlayersArgs[] | false, alias?: string  } 
  | { name: 'teamPlayersConnection', args?: QueryTeamPlayersConnectionArgs[] | false, alias?: string  } 
  | { name: 'status', args?: QueryStatusArgs[] | false, alias?: string  } 
  | { name: 'statuses', args?: QueryStatusesArgs[] | false, alias?: string  } 
  | { name: 'statusesConnection', args?: QueryStatusesConnectionArgs[] | false, alias?: string  } 
  | { name: 'round', args?: QueryRoundArgs[] | false, alias?: string  } 
  | { name: 'rounds', args?: QueryRoundsArgs[] | false, alias?: string  } 
  | { name: 'roundsConnection', args?: QueryRoundsConnectionArgs[] | false, alias?: string  } 
  | { name: 'fixture', args?: QueryFixtureArgs[] | false, alias?: string  } 
  | { name: 'fixtures', args?: QueryFixturesArgs[] | false, alias?: string  } 
  | { name: 'fixturesConnection', args?: QueryFixturesConnectionArgs[] | false, alias?: string  } 
  | { name: 'footballScore', args?: QueryFootballScoreArgs[] | false, alias?: string  } 
  | { name: 'footballScores', args?: QueryFootballScoresArgs[] | false, alias?: string  } 
  | { name: 'footballScoresConnection', args?: QueryFootballScoresConnectionArgs[] | false, alias?: string  } 
  | { name: 'footballScoreActivity', args?: QueryFootballScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'footballScoreActivities', args?: QueryFootballScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'footballScoreActivitiesConnection', args?: QueryFootballScoreActivitiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'chessScore', args?: QueryChessScoreArgs[] | false, alias?: string  } 
  | { name: 'chessScores', args?: QueryChessScoresArgs[] | false, alias?: string  } 
  | { name: 'chessScoresConnection', args?: QueryChessScoresConnectionArgs[] | false, alias?: string  } 
  | { name: 'carromBoardScore', args?: QueryCarromBoardScoreArgs[] | false, alias?: string  } 
  | { name: 'carromBoardScores', args?: QueryCarromBoardScoresArgs[] | false, alias?: string  } 
  | { name: 'carromBoardScoresConnection', args?: QueryCarromBoardScoresConnectionArgs[] | false, alias?: string  } 
  | { name: 'carromBoardScoreActivity', args?: QueryCarromBoardScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'carromBoardScoreActivities', args?: QueryCarromBoardScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'carromBoardScoreActivitiesConnection', args?: QueryCarromBoardScoreActivitiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'tableTennisScore', args?: QueryTableTennisScoreArgs[] | false, alias?: string  } 
  | { name: 'tableTennisScores', args?: QueryTableTennisScoresArgs[] | false, alias?: string  } 
  | { name: 'tableTennisScoresConnection', args?: QueryTableTennisScoresConnectionArgs[] | false, alias?: string  } 
  | { name: 'tableTennisScoreActivity', args?: QueryTableTennisScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'tableTennisScoreActivities', args?: QueryTableTennisScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'tableTennisScoreActivitiesConnection', args?: QueryTableTennisScoreActivitiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeFScore', args?: QueryCounterStrikeFScoreArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeFScores', args?: QueryCounterStrikeFScoresArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeFScoresConnection', args?: QueryCounterStrikeFScoresConnectionArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeScoreSet', args?: QueryCounterStrikeScoreSetArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeScoreSets', args?: QueryCounterStrikeScoreSetsArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeScoreSetsConnection', args?: QueryCounterStrikeScoreSetsConnectionArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeScoreSetActivity', args?: QueryCounterStrikeScoreSetActivityArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeScoreSetActivities', args?: QueryCounterStrikeScoreSetActivitiesArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeScoreSetActivitiesConnection', args?: QueryCounterStrikeScoreSetActivitiesConnectionArgs[] | false, alias?: string  } 
  | { name: 'dotaScore', args?: QueryDotaScoreArgs[] | false, alias?: string  } 
  | { name: 'dotaScores', args?: QueryDotaScoresArgs[] | false, alias?: string  } 
  | { name: 'dotaScoresConnection', args?: QueryDotaScoresConnectionArgs[] | false, alias?: string  } 
  | { name: 'dotaScoreActivity', args?: QueryDotaScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'dotaScoreActivities', args?: QueryDotaScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'dotaScoreActivitiesConnection', args?: QueryDotaScoreActivitiesConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'employee'
  | 'employees'
  | 'employeesConnection'
  | 'userAccount'
  | 'userAccounts'
  | 'userAccountsConnection'
  | 'userAccountToken'
  | 'userAccountTokens'
  | 'userAccountTokensConnection'
  | 'game'
  | 'games'
  | 'gamesConnection'
  | 'tournament'
  | 'tournaments'
  | 'tournamentsConnection'
  | 'category'
  | 'categories'
  | 'categoriesConnection'
  | 'subTournament'
  | 'subTournaments'
  | 'subTournamentsConnection'
  | 'subTournamentPlayer'
  | 'subTournamentPlayers'
  | 'subTournamentPlayersConnection'
  | 'team'
  | 'teams'
  | 'teamsConnection'
  | 'teamPlayer'
  | 'teamPlayers'
  | 'teamPlayersConnection'
  | 'status'
  | 'statuses'
  | 'statusesConnection'
  | 'round'
  | 'rounds'
  | 'roundsConnection'
  | 'fixture'
  | 'fixtures'
  | 'fixturesConnection'
  | 'footballScore'
  | 'footballScores'
  | 'footballScoresConnection'
  | 'footballScoreActivity'
  | 'footballScoreActivities'
  | 'footballScoreActivitiesConnection'
  | 'chessScore'
  | 'chessScores'
  | 'chessScoresConnection'
  | 'carromBoardScore'
  | 'carromBoardScores'
  | 'carromBoardScoresConnection'
  | 'carromBoardScoreActivity'
  | 'carromBoardScoreActivities'
  | 'carromBoardScoreActivitiesConnection'
  | 'tableTennisScore'
  | 'tableTennisScores'
  | 'tableTennisScoresConnection'
  | 'tableTennisScoreActivity'
  | 'tableTennisScoreActivities'
  | 'tableTennisScoreActivitiesConnection'
  | 'counterStrikeFScore'
  | 'counterStrikeFScores'
  | 'counterStrikeFScoresConnection'
  | 'counterStrikeScoreSet'
  | 'counterStrikeScoreSets'
  | 'counterStrikeScoreSetsConnection'
  | 'counterStrikeScoreSetActivity'
  | 'counterStrikeScoreSetActivities'
  | 'counterStrikeScoreSetActivitiesConnection'
  | 'dotaScore'
  | 'dotaScores'
  | 'dotaScoresConnection'
  | 'dotaScoreActivity'
  | 'dotaScoreActivities'
  | 'dotaScoreActivitiesConnection'


type QueryEmployeeArgs =
  | 'where'
type QueryEmployeesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryEmployeesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserAccountArgs =
  | 'where'
type QueryUserAccountsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserAccountsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserAccountTokenArgs =
  | 'where'
type QueryUserAccountTokensArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryUserAccountTokensConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGameArgs =
  | 'where'
type QueryGamesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryGamesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTournamentArgs =
  | 'where'
type QueryTournamentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTournamentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCategoryArgs =
  | 'where'
type QueryCategoriesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCategoriesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySubTournamentArgs =
  | 'where'
type QuerySubTournamentsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySubTournamentsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySubTournamentPlayerArgs =
  | 'where'
type QuerySubTournamentPlayersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySubTournamentPlayersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamArgs =
  | 'where'
type QueryTeamsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamPlayerArgs =
  | 'where'
type QueryTeamPlayersArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTeamPlayersConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryStatusArgs =
  | 'where'
type QueryStatusesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryStatusesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRoundArgs =
  | 'where'
type QueryRoundsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryRoundsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFixtureArgs =
  | 'where'
type QueryFixturesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFixturesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFootballScoreArgs =
  | 'where'
type QueryFootballScoresArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFootballScoresConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFootballScoreActivityArgs =
  | 'where'
type QueryFootballScoreActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryFootballScoreActivitiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryChessScoreArgs =
  | 'where'
type QueryChessScoresArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryChessScoresConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCarromBoardScoreArgs =
  | 'where'
type QueryCarromBoardScoresArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCarromBoardScoresConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCarromBoardScoreActivityArgs =
  | 'where'
type QueryCarromBoardScoreActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCarromBoardScoreActivitiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTableTennisScoreArgs =
  | 'where'
type QueryTableTennisScoresArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTableTennisScoresConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTableTennisScoreActivityArgs =
  | 'where'
type QueryTableTennisScoreActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryTableTennisScoreActivitiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCounterStrikeFScoreArgs =
  | 'where'
type QueryCounterStrikeFScoresArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCounterStrikeFScoresConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCounterStrikeScoreSetArgs =
  | 'where'
type QueryCounterStrikeScoreSetsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCounterStrikeScoreSetsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCounterStrikeScoreSetActivityArgs =
  | 'where'
type QueryCounterStrikeScoreSetActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryCounterStrikeScoreSetActivitiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDotaScoreArgs =
  | 'where'
type QueryDotaScoresArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDotaScoresConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDotaScoreActivityArgs =
  | 'where'
type QueryDotaScoreActivitiesArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDotaScoreActivitiesConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  employee: {
    type: 'Employee'
    args: Record<QueryEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  employees: {
    type: 'Employee'
    args: Record<QueryEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee[]> | prisma.Employee[]
  }
  employeesConnection: {
    type: 'EmployeeConnection'
    args: Record<QueryEmployeesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: EmployeeWhereInput | null, orderBy?: prisma.EmployeeOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeConnection> | prisma.EmployeeConnection
  }
  userAccount: {
    type: 'UserAccount'
    args: Record<QueryUserAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserAccountWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount | null> | prisma.UserAccount | null
  }
  userAccounts: {
    type: 'UserAccount'
    args: Record<QueryUserAccountsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserAccountWhereInput | null, orderBy?: prisma.UserAccountOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount[]> | prisma.UserAccount[]
  }
  userAccountsConnection: {
    type: 'UserAccountConnection'
    args: Record<QueryUserAccountsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserAccountWhereInput | null, orderBy?: prisma.UserAccountOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountConnection> | prisma.UserAccountConnection
  }
  userAccountToken: {
    type: 'UserAccountToken'
    args: Record<QueryUserAccountTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: UserAccountTokenWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountToken | null> | prisma.UserAccountToken | null
  }
  userAccountTokens: {
    type: 'UserAccountToken'
    args: Record<QueryUserAccountTokensArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserAccountTokenWhereInput | null, orderBy?: prisma.UserAccountTokenOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountToken[]> | prisma.UserAccountToken[]
  }
  userAccountTokensConnection: {
    type: 'UserAccountTokenConnection'
    args: Record<QueryUserAccountTokensConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: UserAccountTokenWhereInput | null, orderBy?: prisma.UserAccountTokenOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountTokenConnection> | prisma.UserAccountTokenConnection
  }
  game: {
    type: 'Game'
    args: Record<QueryGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: GameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game | null> | prisma.Game | null
  }
  games: {
    type: 'Game'
    args: Record<QueryGamesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GameWhereInput | null, orderBy?: prisma.GameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game[]> | prisma.Game[]
  }
  gamesConnection: {
    type: 'GameConnection'
    args: Record<QueryGamesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: GameWhereInput | null, orderBy?: prisma.GameOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GameConnection> | prisma.GameConnection
  }
  tournament: {
    type: 'Tournament'
    args: Record<QueryTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TournamentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament | null> | prisma.Tournament | null
  }
  tournaments: {
    type: 'Tournament'
    args: Record<QueryTournamentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TournamentWhereInput | null, orderBy?: prisma.TournamentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament[]> | prisma.Tournament[]
  }
  tournamentsConnection: {
    type: 'TournamentConnection'
    args: Record<QueryTournamentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TournamentWhereInput | null, orderBy?: prisma.TournamentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TournamentConnection> | prisma.TournamentConnection
  }
  category: {
    type: 'Category'
    args: Record<QueryCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  categories: {
    type: 'Category'
    args: Record<QueryCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category[]> | prisma.Category[]
  }
  categoriesConnection: {
    type: 'CategoryConnection'
    args: Record<QueryCategoriesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CategoryWhereInput | null, orderBy?: prisma.CategoryOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryConnection> | prisma.CategoryConnection
  }
  subTournament: {
    type: 'SubTournament'
    args: Record<QuerySubTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SubTournamentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament | null> | prisma.SubTournament | null
  }
  subTournaments: {
    type: 'SubTournament'
    args: Record<QuerySubTournamentsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SubTournamentWhereInput | null, orderBy?: prisma.SubTournamentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament[]> | prisma.SubTournament[]
  }
  subTournamentsConnection: {
    type: 'SubTournamentConnection'
    args: Record<QuerySubTournamentsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SubTournamentWhereInput | null, orderBy?: prisma.SubTournamentOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentConnection> | prisma.SubTournamentConnection
  }
  subTournamentPlayer: {
    type: 'SubTournamentPlayer'
    args: Record<QuerySubTournamentPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SubTournamentPlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer | null> | prisma.SubTournamentPlayer | null
  }
  subTournamentPlayers: {
    type: 'SubTournamentPlayer'
    args: Record<QuerySubTournamentPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SubTournamentPlayerWhereInput | null, orderBy?: prisma.SubTournamentPlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer[]> | prisma.SubTournamentPlayer[]
  }
  subTournamentPlayersConnection: {
    type: 'SubTournamentPlayerConnection'
    args: Record<QuerySubTournamentPlayersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SubTournamentPlayerWhereInput | null, orderBy?: prisma.SubTournamentPlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayerConnection> | prisma.SubTournamentPlayerConnection
  }
  team: {
    type: 'Team'
    args: Record<QueryTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  teams: {
    type: 'Team'
    args: Record<QueryTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team[]> | prisma.Team[]
  }
  teamsConnection: {
    type: 'TeamConnection'
    args: Record<QueryTeamsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamWhereInput | null, orderBy?: prisma.TeamOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamConnection> | prisma.TeamConnection
  }
  teamPlayer: {
    type: 'TeamPlayer'
    args: Record<QueryTeamPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TeamPlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer | null> | prisma.TeamPlayer | null
  }
  teamPlayers: {
    type: 'TeamPlayer'
    args: Record<QueryTeamPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamPlayerWhereInput | null, orderBy?: prisma.TeamPlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer[]> | prisma.TeamPlayer[]
  }
  teamPlayersConnection: {
    type: 'TeamPlayerConnection'
    args: Record<QueryTeamPlayersConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TeamPlayerWhereInput | null, orderBy?: prisma.TeamPlayerOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayerConnection> | prisma.TeamPlayerConnection
  }
  status: {
    type: 'Status'
    args: Record<QueryStatusArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: StatusWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status | null> | prisma.Status | null
  }
  statuses: {
    type: 'Status'
    args: Record<QueryStatusesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StatusWhereInput | null, orderBy?: prisma.StatusOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status[]> | prisma.Status[]
  }
  statusesConnection: {
    type: 'StatusConnection'
    args: Record<QueryStatusesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: StatusWhereInput | null, orderBy?: prisma.StatusOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatusConnection> | prisma.StatusConnection
  }
  round: {
    type: 'Round'
    args: Record<QueryRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: RoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round | null> | prisma.Round | null
  }
  rounds: {
    type: 'Round'
    args: Record<QueryRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RoundWhereInput | null, orderBy?: prisma.RoundOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round[]> | prisma.Round[]
  }
  roundsConnection: {
    type: 'RoundConnection'
    args: Record<QueryRoundsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: RoundWhereInput | null, orderBy?: prisma.RoundOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoundConnection> | prisma.RoundConnection
  }
  fixture: {
    type: 'Fixture'
    args: Record<QueryFixtureArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FixtureWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture | null> | prisma.Fixture | null
  }
  fixtures: {
    type: 'Fixture'
    args: Record<QueryFixturesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FixtureWhereInput | null, orderBy?: prisma.FixtureOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture[]> | prisma.Fixture[]
  }
  fixturesConnection: {
    type: 'FixtureConnection'
    args: Record<QueryFixturesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FixtureWhereInput | null, orderBy?: prisma.FixtureOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FixtureConnection> | prisma.FixtureConnection
  }
  footballScore: {
    type: 'FootballScore'
    args: Record<QueryFootballScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FootballScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScore | null> | prisma.FootballScore | null
  }
  footballScores: {
    type: 'FootballScore'
    args: Record<QueryFootballScoresArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FootballScoreWhereInput | null, orderBy?: prisma.FootballScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScore[]> | prisma.FootballScore[]
  }
  footballScoresConnection: {
    type: 'FootballScoreConnection'
    args: Record<QueryFootballScoresConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FootballScoreWhereInput | null, orderBy?: prisma.FootballScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreConnection> | prisma.FootballScoreConnection
  }
  footballScoreActivity: {
    type: 'FootballScoreActivity'
    args: Record<QueryFootballScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: FootballScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivity | null> | prisma.FootballScoreActivity | null
  }
  footballScoreActivities: {
    type: 'FootballScoreActivity'
    args: Record<QueryFootballScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FootballScoreActivityWhereInput | null, orderBy?: prisma.FootballScoreActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivity[]> | prisma.FootballScoreActivity[]
  }
  footballScoreActivitiesConnection: {
    type: 'FootballScoreActivityConnection'
    args: Record<QueryFootballScoreActivitiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: FootballScoreActivityWhereInput | null, orderBy?: prisma.FootballScoreActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivityConnection> | prisma.FootballScoreActivityConnection
  }
  chessScore: {
    type: 'ChessScore'
    args: Record<QueryChessScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: ChessScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScore | null> | prisma.ChessScore | null
  }
  chessScores: {
    type: 'ChessScore'
    args: Record<QueryChessScoresArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ChessScoreWhereInput | null, orderBy?: prisma.ChessScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScore[]> | prisma.ChessScore[]
  }
  chessScoresConnection: {
    type: 'ChessScoreConnection'
    args: Record<QueryChessScoresConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: ChessScoreWhereInput | null, orderBy?: prisma.ChessScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScoreConnection> | prisma.ChessScoreConnection
  }
  carromBoardScore: {
    type: 'CarromBoardScore'
    args: Record<QueryCarromBoardScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CarromBoardScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScore | null> | prisma.CarromBoardScore | null
  }
  carromBoardScores: {
    type: 'CarromBoardScore'
    args: Record<QueryCarromBoardScoresArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CarromBoardScoreWhereInput | null, orderBy?: prisma.CarromBoardScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScore[]> | prisma.CarromBoardScore[]
  }
  carromBoardScoresConnection: {
    type: 'CarromBoardScoreConnection'
    args: Record<QueryCarromBoardScoresConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CarromBoardScoreWhereInput | null, orderBy?: prisma.CarromBoardScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreConnection> | prisma.CarromBoardScoreConnection
  }
  carromBoardScoreActivity: {
    type: 'CarromBoardScoreActivity'
    args: Record<QueryCarromBoardScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CarromBoardScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivity | null> | prisma.CarromBoardScoreActivity | null
  }
  carromBoardScoreActivities: {
    type: 'CarromBoardScoreActivity'
    args: Record<QueryCarromBoardScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CarromBoardScoreActivityWhereInput | null, orderBy?: prisma.CarromBoardScoreActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivity[]> | prisma.CarromBoardScoreActivity[]
  }
  carromBoardScoreActivitiesConnection: {
    type: 'CarromBoardScoreActivityConnection'
    args: Record<QueryCarromBoardScoreActivitiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CarromBoardScoreActivityWhereInput | null, orderBy?: prisma.CarromBoardScoreActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivityConnection> | prisma.CarromBoardScoreActivityConnection
  }
  tableTennisScore: {
    type: 'TableTennisScore'
    args: Record<QueryTableTennisScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TableTennisScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScore | null> | prisma.TableTennisScore | null
  }
  tableTennisScores: {
    type: 'TableTennisScore'
    args: Record<QueryTableTennisScoresArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TableTennisScoreWhereInput | null, orderBy?: prisma.TableTennisScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScore[]> | prisma.TableTennisScore[]
  }
  tableTennisScoresConnection: {
    type: 'TableTennisScoreConnection'
    args: Record<QueryTableTennisScoresConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TableTennisScoreWhereInput | null, orderBy?: prisma.TableTennisScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreConnection> | prisma.TableTennisScoreConnection
  }
  tableTennisScoreActivity: {
    type: 'TableTennisScoreActivity'
    args: Record<QueryTableTennisScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: TableTennisScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivity | null> | prisma.TableTennisScoreActivity | null
  }
  tableTennisScoreActivities: {
    type: 'TableTennisScoreActivity'
    args: Record<QueryTableTennisScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TableTennisScoreActivityWhereInput | null, orderBy?: prisma.TableTennisScoreActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivity[]> | prisma.TableTennisScoreActivity[]
  }
  tableTennisScoreActivitiesConnection: {
    type: 'TableTennisScoreActivityConnection'
    args: Record<QueryTableTennisScoreActivitiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: TableTennisScoreActivityWhereInput | null, orderBy?: prisma.TableTennisScoreActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivityConnection> | prisma.TableTennisScoreActivityConnection
  }
  counterStrikeFScore: {
    type: 'CounterStrikeFScore'
    args: Record<QueryCounterStrikeFScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CounterStrikeFScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScore | null> | prisma.CounterStrikeFScore | null
  }
  counterStrikeFScores: {
    type: 'CounterStrikeFScore'
    args: Record<QueryCounterStrikeFScoresArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CounterStrikeFScoreWhereInput | null, orderBy?: prisma.CounterStrikeFScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScore[]> | prisma.CounterStrikeFScore[]
  }
  counterStrikeFScoresConnection: {
    type: 'CounterStrikeFScoreConnection'
    args: Record<QueryCounterStrikeFScoresConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CounterStrikeFScoreWhereInput | null, orderBy?: prisma.CounterStrikeFScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScoreConnection> | prisma.CounterStrikeFScoreConnection
  }
  counterStrikeScoreSet: {
    type: 'CounterStrikeScoreSet'
    args: Record<QueryCounterStrikeScoreSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CounterStrikeScoreSetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet | null> | prisma.CounterStrikeScoreSet | null
  }
  counterStrikeScoreSets: {
    type: 'CounterStrikeScoreSet'
    args: Record<QueryCounterStrikeScoreSetsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CounterStrikeScoreSetWhereInput | null, orderBy?: prisma.CounterStrikeScoreSetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet[]> | prisma.CounterStrikeScoreSet[]
  }
  counterStrikeScoreSetsConnection: {
    type: 'CounterStrikeScoreSetConnection'
    args: Record<QueryCounterStrikeScoreSetsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CounterStrikeScoreSetWhereInput | null, orderBy?: prisma.CounterStrikeScoreSetOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetConnection> | prisma.CounterStrikeScoreSetConnection
  }
  counterStrikeScoreSetActivity: {
    type: 'CounterStrikeScoreSetActivity'
    args: Record<QueryCounterStrikeScoreSetActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: CounterStrikeScoreSetActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivity | null> | prisma.CounterStrikeScoreSetActivity | null
  }
  counterStrikeScoreSetActivities: {
    type: 'CounterStrikeScoreSetActivity'
    args: Record<QueryCounterStrikeScoreSetActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CounterStrikeScoreSetActivityWhereInput | null, orderBy?: prisma.CounterStrikeScoreSetActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivity[]> | prisma.CounterStrikeScoreSetActivity[]
  }
  counterStrikeScoreSetActivitiesConnection: {
    type: 'CounterStrikeScoreSetActivityConnection'
    args: Record<QueryCounterStrikeScoreSetActivitiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: CounterStrikeScoreSetActivityWhereInput | null, orderBy?: prisma.CounterStrikeScoreSetActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivityConnection> | prisma.CounterStrikeScoreSetActivityConnection
  }
  dotaScore: {
    type: 'DotaScore'
    args: Record<QueryDotaScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DotaScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScore | null> | prisma.DotaScore | null
  }
  dotaScores: {
    type: 'DotaScore'
    args: Record<QueryDotaScoresArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DotaScoreWhereInput | null, orderBy?: prisma.DotaScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScore[]> | prisma.DotaScore[]
  }
  dotaScoresConnection: {
    type: 'DotaScoreConnection'
    args: Record<QueryDotaScoresConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DotaScoreWhereInput | null, orderBy?: prisma.DotaScoreOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreConnection> | prisma.DotaScoreConnection
  }
  dotaScoreActivity: {
    type: 'DotaScoreActivity'
    args: Record<QueryDotaScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DotaScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivity | null> | prisma.DotaScoreActivity | null
  }
  dotaScoreActivities: {
    type: 'DotaScoreActivity'
    args: Record<QueryDotaScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DotaScoreActivityWhereInput | null, orderBy?: prisma.DotaScoreActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivity[]> | prisma.DotaScoreActivity[]
  }
  dotaScoreActivitiesConnection: {
    type: 'DotaScoreActivityConnection'
    args: Record<QueryDotaScoreActivitiesConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DotaScoreActivityWhereInput | null, orderBy?: prisma.DotaScoreActivityOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivityConnection> | prisma.DotaScoreActivityConnection
  }
}
  

// Types for Employee

type EmployeeObject =
  | EmployeeFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'middleName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'profilePictureUrl', args?: [] | false, alias?: string  } 
  | { name: 'lmsEmpId', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type EmployeeFields =
  | 'id'
  | 'firstName'
  | 'middleName'
  | 'lastName'
  | 'profilePictureUrl'
  | 'lmsEmpId'
  | 'createdAt'
  | 'updatedAt'



  

export interface EmployeeFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middleName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profilePictureUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lmsEmpId: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for EmployeeConnection

type EmployeeConnectionObject =
  | EmployeeConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type EmployeeConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface EmployeeConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'EmployeeEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeEdge[]> | prisma.EmployeeEdge[]
  }
  aggregate: {
    type: 'AggregateEmployee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateEmployee> | prisma.AggregateEmployee
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for EmployeeEdge

type EmployeeEdgeObject =
  | EmployeeEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type EmployeeEdgeFields =
  | 'node'
  | 'cursor'



  

export interface EmployeeEdgeFieldDetails {
  node: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateEmployee

type AggregateEmployeeObject =
  | AggregateEmployeeFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateEmployeeFields =
  | 'count'



  

export interface AggregateEmployeeFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserAccount

type UserAccountObject =
  | UserAccountFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'employeeId', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'userRole', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserAccountFields =
  | 'id'
  | 'employeeId'
  | 'isActive'
  | 'password'
  | 'userRole'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserAccountFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  employeeId: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccount">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userRole: {
    type: 'UserRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccount">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserRole> | prisma.UserRole
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserAccountConnection

type UserAccountConnectionObject =
  | UserAccountConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserAccountConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserAccountConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserAccountEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountEdge[]> | prisma.UserAccountEdge[]
  }
  aggregate: {
    type: 'AggregateUserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserAccount> | prisma.AggregateUserAccount
  }
}
  

// Types for UserAccountEdge

type UserAccountEdgeObject =
  | UserAccountEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserAccountEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserAccountEdgeFieldDetails {
  node: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserAccount

type AggregateUserAccountObject =
  | AggregateUserAccountFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserAccountFields =
  | 'count'



  

export interface AggregateUserAccountFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserAccountToken

type UserAccountTokenObject =
  | UserAccountTokenFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'user', args?: [] | false, alias?: string  } 
  | { name: 'refreshToken', args?: [] | false, alias?: string  } 

type UserAccountTokenFields =
  | 'id'
  | 'user'
  | 'refreshToken'



  

export interface UserAccountTokenFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  user: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountToken">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  refreshToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for UserAccountTokenConnection

type UserAccountTokenConnectionObject =
  | UserAccountTokenConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type UserAccountTokenConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface UserAccountTokenConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountTokenConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'UserAccountTokenEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountTokenConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountTokenEdge[]> | prisma.UserAccountTokenEdge[]
  }
  aggregate: {
    type: 'AggregateUserAccountToken'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountTokenConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateUserAccountToken> | prisma.AggregateUserAccountToken
  }
}
  

// Types for UserAccountTokenEdge

type UserAccountTokenEdgeObject =
  | UserAccountTokenEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type UserAccountTokenEdgeFields =
  | 'node'
  | 'cursor'



  

export interface UserAccountTokenEdgeFieldDetails {
  node: {
    type: 'UserAccountToken'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountTokenEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountToken> | prisma.UserAccountToken
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateUserAccountToken

type AggregateUserAccountTokenObject =
  | AggregateUserAccountTokenFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateUserAccountTokenFields =
  | 'count'



  

export interface AggregateUserAccountTokenFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Game

type GameObject =
  | GameFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'shortName', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type GameFields =
  | 'id'
  | 'name'
  | 'shortName'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface GameFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  shortName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Game">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for GameConnection

type GameConnectionObject =
  | GameConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type GameConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface GameConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'GameEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"GameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GameEdge[]> | prisma.GameEdge[]
  }
  aggregate: {
    type: 'AggregateGame'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GameConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateGame> | prisma.AggregateGame
  }
}
  

// Types for GameEdge

type GameEdgeObject =
  | GameEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type GameEdgeFields =
  | 'node'
  | 'cursor'



  

export interface GameEdgeFieldDetails {
  node: {
    type: 'Game'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GameEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game> | prisma.Game
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateGame

type AggregateGameObject =
  | AggregateGameFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateGameFields =
  | 'count'



  

export interface AggregateGameFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Tournament

type TournamentObject =
  | TournamentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'game', args?: [] | false, alias?: string  } 
  | { name: 'season', args?: [] | false, alias?: string  } 
  | { name: 'startDate', args?: [] | false, alias?: string  } 
  | { name: 'finishDate', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TournamentFields =
  | 'id'
  | 'game'
  | 'season'
  | 'startDate'
  | 'finishDate'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface TournamentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  game: {
    type: 'Game'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Tournament">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game> | prisma.Game
  }
  season: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  finishDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Tournament">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TournamentConnection

type TournamentConnectionObject =
  | TournamentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TournamentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TournamentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TournamentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TournamentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TournamentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TournamentEdge[]> | prisma.TournamentEdge[]
  }
  aggregate: {
    type: 'AggregateTournament'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TournamentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTournament> | prisma.AggregateTournament
  }
}
  

// Types for TournamentEdge

type TournamentEdgeObject =
  | TournamentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TournamentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TournamentEdgeFieldDetails {
  node: {
    type: 'Tournament'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TournamentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament> | prisma.Tournament
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTournament

type AggregateTournamentObject =
  | AggregateTournamentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTournamentFields =
  | 'count'



  

export interface AggregateTournamentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Category

type CategoryObject =
  | CategoryFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CategoryFields =
  | 'id'
  | 'name'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface CategoryFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Category">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CategoryConnection

type CategoryConnectionObject =
  | CategoryConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CategoryConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CategoryConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CategoryEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryEdge[]> | prisma.CategoryEdge[]
  }
  aggregate: {
    type: 'AggregateCategory'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCategory> | prisma.AggregateCategory
  }
}
  

// Types for CategoryEdge

type CategoryEdgeObject =
  | CategoryEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CategoryEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CategoryEdgeFieldDetails {
  node: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategoryEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCategory

type AggregateCategoryObject =
  | AggregateCategoryFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCategoryFields =
  | 'count'



  

export interface AggregateCategoryFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubTournament

type SubTournamentObject =
  | SubTournamentFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'tournament', args?: [] | false, alias?: string  } 
  | { name: 'category', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SubTournamentFields =
  | 'id'
  | 'tournament'
  | 'category'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface SubTournamentFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  tournament: {
    type: 'Tournament'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournament">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament> | prisma.Tournament
  }
  category: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournament">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournament">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubTournamentConnection

type SubTournamentConnectionObject =
  | SubTournamentConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SubTournamentConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SubTournamentConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SubTournamentEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentEdge[]> | prisma.SubTournamentEdge[]
  }
  aggregate: {
    type: 'AggregateSubTournament'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSubTournament> | prisma.AggregateSubTournament
  }
}
  

// Types for SubTournamentEdge

type SubTournamentEdgeObject =
  | SubTournamentEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SubTournamentEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SubTournamentEdgeFieldDetails {
  node: {
    type: 'SubTournament'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament> | prisma.SubTournament
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSubTournament

type AggregateSubTournamentObject =
  | AggregateSubTournamentFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSubTournamentFields =
  | 'count'



  

export interface AggregateSubTournamentFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubTournamentPlayer

type SubTournamentPlayerObject =
  | SubTournamentPlayerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'subTournament', args?: [] | false, alias?: string  } 
  | { name: 'player', args?: [] | false, alias?: string  } 
  | { name: 'position', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SubTournamentPlayerFields =
  | 'id'
  | 'subTournament'
  | 'player'
  | 'position'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface SubTournamentPlayerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subTournament: {
    type: 'SubTournament'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentPlayer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament> | prisma.SubTournament
  }
  player: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentPlayer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  position: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentPlayer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubTournamentPlayerConnection

type SubTournamentPlayerConnectionObject =
  | SubTournamentPlayerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SubTournamentPlayerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SubTournamentPlayerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentPlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SubTournamentPlayerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentPlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayerEdge[]> | prisma.SubTournamentPlayerEdge[]
  }
  aggregate: {
    type: 'AggregateSubTournamentPlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentPlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSubTournamentPlayer> | prisma.AggregateSubTournamentPlayer
  }
}
  

// Types for SubTournamentPlayerEdge

type SubTournamentPlayerEdgeObject =
  | SubTournamentPlayerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SubTournamentPlayerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SubTournamentPlayerEdgeFieldDetails {
  node: {
    type: 'SubTournamentPlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentPlayerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer> | prisma.SubTournamentPlayer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSubTournamentPlayer

type AggregateSubTournamentPlayerObject =
  | AggregateSubTournamentPlayerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSubTournamentPlayerFields =
  | 'count'



  

export interface AggregateSubTournamentPlayerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Team

type TeamObject =
  | TeamFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'logoImage', args?: [] | false, alias?: string  } 
  | { name: 'subTournament', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TeamFields =
  | 'id'
  | 'name'
  | 'logoImage'
  | 'subTournament'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface TeamFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  logoImage: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  subTournament: {
    type: 'SubTournament'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Team">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament> | prisma.SubTournament
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Team">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamConnection

type TeamConnectionObject =
  | TeamConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TeamConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TeamConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TeamEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamEdge[]> | prisma.TeamEdge[]
  }
  aggregate: {
    type: 'AggregateTeam'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTeam> | prisma.AggregateTeam
  }
}
  

// Types for TeamEdge

type TeamEdgeObject =
  | TeamEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TeamEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TeamEdgeFieldDetails {
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTeam

type AggregateTeamObject =
  | AggregateTeamFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTeamFields =
  | 'count'



  

export interface AggregateTeamFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamPlayer

type TeamPlayerObject =
  | TeamPlayerFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'team', args?: [] | false, alias?: string  } 
  | { name: 'player', args?: [] | false, alias?: string  } 
  | { name: 'isCaptain', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TeamPlayerFields =
  | 'id'
  | 'team'
  | 'player'
  | 'isCaptain'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface TeamPlayerFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  team: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamPlayer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  player: {
    type: 'SubTournamentPlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamPlayer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer> | prisma.SubTournamentPlayer
  }
  isCaptain: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamPlayer">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamPlayerConnection

type TeamPlayerConnectionObject =
  | TeamPlayerConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TeamPlayerConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TeamPlayerConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamPlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TeamPlayerEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TeamPlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayerEdge[]> | prisma.TeamPlayerEdge[]
  }
  aggregate: {
    type: 'AggregateTeamPlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamPlayerConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTeamPlayer> | prisma.AggregateTeamPlayer
  }
}
  

// Types for TeamPlayerEdge

type TeamPlayerEdgeObject =
  | TeamPlayerEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TeamPlayerEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TeamPlayerEdgeFieldDetails {
  node: {
    type: 'TeamPlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamPlayerEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer> | prisma.TeamPlayer
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTeamPlayer

type AggregateTeamPlayerObject =
  | AggregateTeamPlayerFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTeamPlayerFields =
  | 'count'



  

export interface AggregateTeamPlayerFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Status

type StatusObject =
  | StatusFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type StatusFields =
  | 'id'
  | 'name'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface StatusFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Status">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for StatusConnection

type StatusConnectionObject =
  | StatusConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type StatusConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface StatusConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StatusConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'StatusEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"StatusConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatusEdge[]> | prisma.StatusEdge[]
  }
  aggregate: {
    type: 'AggregateStatus'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StatusConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateStatus> | prisma.AggregateStatus
  }
}
  

// Types for StatusEdge

type StatusEdgeObject =
  | StatusEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type StatusEdgeFields =
  | 'node'
  | 'cursor'



  

export interface StatusEdgeFieldDetails {
  node: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StatusEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateStatus

type AggregateStatusObject =
  | AggregateStatusFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateStatusFields =
  | 'count'



  

export interface AggregateStatusFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Round

type RoundObject =
  | RoundFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'shortName', args?: [] | false, alias?: string  } 
  | { name: 'sortOrder', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type RoundFields =
  | 'id'
  | 'name'
  | 'shortName'
  | 'sortOrder'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface RoundFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  shortName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sortOrder: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Round">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RoundConnection

type RoundConnectionObject =
  | RoundConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type RoundConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface RoundConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'RoundEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"RoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoundEdge[]> | prisma.RoundEdge[]
  }
  aggregate: {
    type: 'AggregateRound'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoundConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateRound> | prisma.AggregateRound
  }
}
  

// Types for RoundEdge

type RoundEdgeObject =
  | RoundEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type RoundEdgeFields =
  | 'node'
  | 'cursor'



  

export interface RoundEdgeFieldDetails {
  node: {
    type: 'Round'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoundEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round> | prisma.Round
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateRound

type AggregateRoundObject =
  | AggregateRoundFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateRoundFields =
  | 'count'



  

export interface AggregateRoundFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Fixture

type FixtureObject =
  | FixtureFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'subTournament', args?: [] | false, alias?: string  } 
  | { name: 'status', args?: [] | false, alias?: string  } 
  | { name: 'dateTime', args?: [] | false, alias?: string  } 
  | { name: 'homeTeam', args?: [] | false, alias?: string  } 
  | { name: 'awayTeam', args?: [] | false, alias?: string  } 
  | { name: 'round', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamParentFixture', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamParentFixture', args?: [] | false, alias?: string  } 
  | { name: 'images', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FixtureFields =
  | 'id'
  | 'subTournament'
  | 'status'
  | 'dateTime'
  | 'homeTeam'
  | 'awayTeam'
  | 'round'
  | 'homeTeamParentFixture'
  | 'awayTeamParentFixture'
  | 'images'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface FixtureFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  subTournament: {
    type: 'SubTournament'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Fixture">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament> | prisma.SubTournament
  }
  status: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Fixture">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  dateTime: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  homeTeam: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Fixture">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  awayTeam: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Fixture">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  round: {
    type: 'Round'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Fixture">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round> | prisma.Round
  }
  homeTeamParentFixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Fixture">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture | null> | prisma.Fixture | null
  }
  awayTeamParentFixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Fixture">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture | null> | prisma.Fixture | null
  }
  images: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Fixture">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FixtureConnection

type FixtureConnectionObject =
  | FixtureConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FixtureConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FixtureConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FixtureConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FixtureEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FixtureConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FixtureEdge[]> | prisma.FixtureEdge[]
  }
  aggregate: {
    type: 'AggregateFixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FixtureConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFixture> | prisma.AggregateFixture
  }
}
  

// Types for FixtureEdge

type FixtureEdgeObject =
  | FixtureEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FixtureEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FixtureEdgeFieldDetails {
  node: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FixtureEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFixture

type AggregateFixtureObject =
  | AggregateFixtureFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFixtureFields =
  | 'count'



  

export interface AggregateFixtureFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FootballScore

type FootballScoreObject =
  | FootballScoreFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamFTScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamFTScore', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamAetScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamAetScore', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamPenaltyScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamPenaltyScore', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FootballScoreFields =
  | 'id'
  | 'fixture'
  | 'homeTeamFTScore'
  | 'awayTeamFTScore'
  | 'homeTeamAetScore'
  | 'awayTeamAetScore'
  | 'homeTeamPenaltyScore'
  | 'awayTeamPenaltyScore'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface FootballScoreFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  homeTeamFTScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamFTScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  homeTeamAetScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamAetScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  homeTeamPenaltyScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamPenaltyScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FootballScoreConnection

type FootballScoreConnectionObject =
  | FootballScoreConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FootballScoreConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FootballScoreConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FootballScoreEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreEdge[]> | prisma.FootballScoreEdge[]
  }
  aggregate: {
    type: 'AggregateFootballScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFootballScore> | prisma.AggregateFootballScore
  }
}
  

// Types for FootballScoreEdge

type FootballScoreEdgeObject =
  | FootballScoreEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FootballScoreEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FootballScoreEdgeFieldDetails {
  node: {
    type: 'FootballScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScore> | prisma.FootballScore
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFootballScore

type AggregateFootballScoreObject =
  | AggregateFootballScoreFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFootballScoreFields =
  | 'count'



  

export interface AggregateFootballScoreFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FootballScoreActivity

type FootballScoreActivityObject =
  | FootballScoreActivityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'teamPlayer', args?: [] | false, alias?: string  } 
  | { name: 'activityType', args?: [] | false, alias?: string  } 
  | { name: 'assistedBy', args?: [] | false, alias?: string  } 
  | { name: 'activityTime', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FootballScoreActivityFields =
  | 'id'
  | 'fixture'
  | 'teamPlayer'
  | 'activityType'
  | 'assistedBy'
  | 'activityTime'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface FootballScoreActivityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  teamPlayer: {
    type: 'TeamPlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer> | prisma.TeamPlayer
  }
  activityType: {
    type: 'FootballActivityType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballActivityType> | prisma.FootballActivityType
  }
  assistedBy: {
    type: 'TeamPlayer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FootballScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer | null> | prisma.TeamPlayer | null
  }
  activityTime: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FootballScoreActivityConnection

type FootballScoreActivityConnectionObject =
  | FootballScoreActivityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type FootballScoreActivityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface FootballScoreActivityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'FootballScoreActivityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivityEdge[]> | prisma.FootballScoreActivityEdge[]
  }
  aggregate: {
    type: 'AggregateFootballScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateFootballScoreActivity> | prisma.AggregateFootballScoreActivity
  }
}
  

// Types for FootballScoreActivityEdge

type FootballScoreActivityEdgeObject =
  | FootballScoreActivityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type FootballScoreActivityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface FootballScoreActivityEdgeFieldDetails {
  node: {
    type: 'FootballScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivity> | prisma.FootballScoreActivity
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateFootballScoreActivity

type AggregateFootballScoreActivityObject =
  | AggregateFootballScoreActivityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateFootballScoreActivityFields =
  | 'count'



  

export interface AggregateFootballScoreActivityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ChessScore

type ChessScoreObject =
  | ChessScoreFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'winnerTeam', args?: [] | false, alias?: string  } 
  | { name: 'winningMethod', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ChessScoreFields =
  | 'id'
  | 'fixture'
  | 'winnerTeam'
  | 'winningMethod'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface ChessScoreFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChessScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  winnerTeam: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ChessScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  winningMethod: {
    type: 'ChessWinningMethod'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ChessScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessWinningMethod | null> | prisma.ChessWinningMethod | null
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChessScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ChessScoreConnection

type ChessScoreConnectionObject =
  | ChessScoreConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type ChessScoreConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface ChessScoreConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChessScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'ChessScoreEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"ChessScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScoreEdge[]> | prisma.ChessScoreEdge[]
  }
  aggregate: {
    type: 'AggregateChessScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChessScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateChessScore> | prisma.AggregateChessScore
  }
}
  

// Types for ChessScoreEdge

type ChessScoreEdgeObject =
  | ChessScoreEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type ChessScoreEdgeFields =
  | 'node'
  | 'cursor'



  

export interface ChessScoreEdgeFieldDetails {
  node: {
    type: 'ChessScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChessScoreEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScore> | prisma.ChessScore
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateChessScore

type AggregateChessScoreObject =
  | AggregateChessScoreFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateChessScoreFields =
  | 'count'



  

export interface AggregateChessScoreFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CarromBoardScore

type CarromBoardScoreObject =
  | CarromBoardScoreFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CarromBoardScoreFields =
  | 'id'
  | 'fixture'
  | 'homeTeamScore'
  | 'awayTeamScore'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface CarromBoardScoreFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  homeTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CarromBoardScoreConnection

type CarromBoardScoreConnectionObject =
  | CarromBoardScoreConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CarromBoardScoreConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CarromBoardScoreConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CarromBoardScoreEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreEdge[]> | prisma.CarromBoardScoreEdge[]
  }
  aggregate: {
    type: 'AggregateCarromBoardScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCarromBoardScore> | prisma.AggregateCarromBoardScore
  }
}
  

// Types for CarromBoardScoreEdge

type CarromBoardScoreEdgeObject =
  | CarromBoardScoreEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CarromBoardScoreEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CarromBoardScoreEdgeFieldDetails {
  node: {
    type: 'CarromBoardScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScore> | prisma.CarromBoardScore
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCarromBoardScore

type AggregateCarromBoardScoreObject =
  | AggregateCarromBoardScoreFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCarromBoardScoreFields =
  | 'count'



  

export interface AggregateCarromBoardScoreFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CarromBoardScoreActivity

type CarromBoardScoreActivityObject =
  | CarromBoardScoreActivityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'team', args?: [] | false, alias?: string  } 
  | { name: 'points', args?: [] | false, alias?: string  } 
  | { name: 'order', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CarromBoardScoreActivityFields =
  | 'id'
  | 'fixture'
  | 'team'
  | 'points'
  | 'order'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface CarromBoardScoreActivityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  team: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  points: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  order: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CarromBoardScoreActivityConnection

type CarromBoardScoreActivityConnectionObject =
  | CarromBoardScoreActivityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CarromBoardScoreActivityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CarromBoardScoreActivityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CarromBoardScoreActivityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivityEdge[]> | prisma.CarromBoardScoreActivityEdge[]
  }
  aggregate: {
    type: 'AggregateCarromBoardScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCarromBoardScoreActivity> | prisma.AggregateCarromBoardScoreActivity
  }
}
  

// Types for CarromBoardScoreActivityEdge

type CarromBoardScoreActivityEdgeObject =
  | CarromBoardScoreActivityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CarromBoardScoreActivityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CarromBoardScoreActivityEdgeFieldDetails {
  node: {
    type: 'CarromBoardScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivity> | prisma.CarromBoardScoreActivity
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCarromBoardScoreActivity

type AggregateCarromBoardScoreActivityObject =
  | AggregateCarromBoardScoreActivityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCarromBoardScoreActivityFields =
  | 'count'



  

export interface AggregateCarromBoardScoreActivityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TableTennisScore

type TableTennisScoreObject =
  | TableTennisScoreFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'setsCount', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TableTennisScoreFields =
  | 'id'
  | 'fixture'
  | 'homeTeamScore'
  | 'awayTeamScore'
  | 'setsCount'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface TableTennisScoreFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  homeTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  setsCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TableTennisScoreConnection

type TableTennisScoreConnectionObject =
  | TableTennisScoreConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TableTennisScoreConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TableTennisScoreConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TableTennisScoreEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreEdge[]> | prisma.TableTennisScoreEdge[]
  }
  aggregate: {
    type: 'AggregateTableTennisScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTableTennisScore> | prisma.AggregateTableTennisScore
  }
}
  

// Types for TableTennisScoreEdge

type TableTennisScoreEdgeObject =
  | TableTennisScoreEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TableTennisScoreEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TableTennisScoreEdgeFieldDetails {
  node: {
    type: 'TableTennisScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScore> | prisma.TableTennisScore
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTableTennisScore

type AggregateTableTennisScoreObject =
  | AggregateTableTennisScoreFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTableTennisScoreFields =
  | 'count'



  

export interface AggregateTableTennisScoreFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TableTennisScoreActivity

type TableTennisScoreActivityObject =
  | TableTennisScoreActivityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'set', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamPoints', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamPoints', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TableTennisScoreActivityFields =
  | 'id'
  | 'fixture'
  | 'set'
  | 'homeTeamPoints'
  | 'awayTeamPoints'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface TableTennisScoreActivityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  set: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  homeTeamPoints: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  awayTeamPoints: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TableTennisScoreActivityConnection

type TableTennisScoreActivityConnectionObject =
  | TableTennisScoreActivityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type TableTennisScoreActivityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface TableTennisScoreActivityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'TableTennisScoreActivityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivityEdge[]> | prisma.TableTennisScoreActivityEdge[]
  }
  aggregate: {
    type: 'AggregateTableTennisScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateTableTennisScoreActivity> | prisma.AggregateTableTennisScoreActivity
  }
}
  

// Types for TableTennisScoreActivityEdge

type TableTennisScoreActivityEdgeObject =
  | TableTennisScoreActivityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type TableTennisScoreActivityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface TableTennisScoreActivityEdgeFieldDetails {
  node: {
    type: 'TableTennisScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreActivityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivity> | prisma.TableTennisScoreActivity
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateTableTennisScoreActivity

type AggregateTableTennisScoreActivityObject =
  | AggregateTableTennisScoreActivityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateTableTennisScoreActivityFields =
  | 'count'



  

export interface AggregateTableTennisScoreActivityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeFScore

type CounterStrikeFScoreObject =
  | CounterStrikeFScoreFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'setsCount', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CounterStrikeFScoreFields =
  | 'id'
  | 'fixture'
  | 'homeTeamScore'
  | 'awayTeamScore'
  | 'setsCount'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface CounterStrikeFScoreFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeFScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  homeTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  setsCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeFScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeFScoreConnection

type CounterStrikeFScoreConnectionObject =
  | CounterStrikeFScoreConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CounterStrikeFScoreConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CounterStrikeFScoreConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeFScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CounterStrikeFScoreEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeFScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScoreEdge[]> | prisma.CounterStrikeFScoreEdge[]
  }
  aggregate: {
    type: 'AggregateCounterStrikeFScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeFScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCounterStrikeFScore> | prisma.AggregateCounterStrikeFScore
  }
}
  

// Types for CounterStrikeFScoreEdge

type CounterStrikeFScoreEdgeObject =
  | CounterStrikeFScoreEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CounterStrikeFScoreEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CounterStrikeFScoreEdgeFieldDetails {
  node: {
    type: 'CounterStrikeFScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeFScoreEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScore> | prisma.CounterStrikeFScore
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCounterStrikeFScore

type AggregateCounterStrikeFScoreObject =
  | AggregateCounterStrikeFScoreFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCounterStrikeFScoreFields =
  | 'count'



  

export interface AggregateCounterStrikeFScoreFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeScoreSet

type CounterStrikeScoreSetObject =
  | CounterStrikeScoreSetFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'set', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetFields =
  | 'id'
  | 'fixture'
  | 'set'
  | 'homeTeamScore'
  | 'awayTeamScore'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface CounterStrikeScoreSetFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  set: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  homeTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  awayTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSet">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeScoreSetConnection

type CounterStrikeScoreSetConnectionObject =
  | CounterStrikeScoreSetConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CounterStrikeScoreSetConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CounterStrikeScoreSetEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetEdge[]> | prisma.CounterStrikeScoreSetEdge[]
  }
  aggregate: {
    type: 'AggregateCounterStrikeScoreSet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCounterStrikeScoreSet> | prisma.AggregateCounterStrikeScoreSet
  }
}
  

// Types for CounterStrikeScoreSetEdge

type CounterStrikeScoreSetEdgeObject =
  | CounterStrikeScoreSetEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CounterStrikeScoreSetEdgeFieldDetails {
  node: {
    type: 'CounterStrikeScoreSet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet> | prisma.CounterStrikeScoreSet
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCounterStrikeScoreSet

type AggregateCounterStrikeScoreSetObject =
  | AggregateCounterStrikeScoreSetFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCounterStrikeScoreSetFields =
  | 'count'



  

export interface AggregateCounterStrikeScoreSetFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeScoreSetActivity

type CounterStrikeScoreSetActivityObject =
  | CounterStrikeScoreSetActivityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'set', args?: [] | false, alias?: string  } 
  | { name: 'teamPlayer', args?: [] | false, alias?: string  } 
  | { name: 'kills', args?: [] | false, alias?: string  } 
  | { name: 'deaths', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetActivityFields =
  | 'id'
  | 'set'
  | 'teamPlayer'
  | 'kills'
  | 'deaths'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface CounterStrikeScoreSetActivityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  set: {
    type: 'CounterStrikeScoreSet'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet> | prisma.CounterStrikeScoreSet
  }
  teamPlayer: {
    type: 'TeamPlayer'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer> | prisma.TeamPlayer
  }
  kills: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deaths: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeScoreSetActivityConnection

type CounterStrikeScoreSetActivityConnectionObject =
  | CounterStrikeScoreSetActivityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetActivityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface CounterStrikeScoreSetActivityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'CounterStrikeScoreSetActivityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivityEdge[]> | prisma.CounterStrikeScoreSetActivityEdge[]
  }
  aggregate: {
    type: 'AggregateCounterStrikeScoreSetActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateCounterStrikeScoreSetActivity> | prisma.AggregateCounterStrikeScoreSetActivity
  }
}
  

// Types for CounterStrikeScoreSetActivityEdge

type CounterStrikeScoreSetActivityEdgeObject =
  | CounterStrikeScoreSetActivityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetActivityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface CounterStrikeScoreSetActivityEdgeFieldDetails {
  node: {
    type: 'CounterStrikeScoreSetActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivity> | prisma.CounterStrikeScoreSetActivity
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateCounterStrikeScoreSetActivity

type AggregateCounterStrikeScoreSetActivityObject =
  | AggregateCounterStrikeScoreSetActivityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateCounterStrikeScoreSetActivityFields =
  | 'count'



  

export interface AggregateCounterStrikeScoreSetActivityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DotaScore

type DotaScoreObject =
  | DotaScoreFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'setsCount', args?: [] | false, alias?: string  } 
  | { name: 'winnerTeam', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type DotaScoreFields =
  | 'id'
  | 'fixture'
  | 'setsCount'
  | 'winnerTeam'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface DotaScoreFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  setsCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  winnerTeam: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DotaScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScore">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DotaScoreConnection

type DotaScoreConnectionObject =
  | DotaScoreConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DotaScoreConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DotaScoreConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DotaScoreEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreEdge[]> | prisma.DotaScoreEdge[]
  }
  aggregate: {
    type: 'AggregateDotaScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDotaScore> | prisma.AggregateDotaScore
  }
}
  

// Types for DotaScoreEdge

type DotaScoreEdgeObject =
  | DotaScoreEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DotaScoreEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DotaScoreEdgeFieldDetails {
  node: {
    type: 'DotaScore'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScore> | prisma.DotaScore
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDotaScore

type AggregateDotaScoreObject =
  | AggregateDotaScoreFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDotaScoreFields =
  | 'count'



  

export interface AggregateDotaScoreFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DotaScoreActivity

type DotaScoreActivityObject =
  | DotaScoreActivityFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'fixture', args?: [] | false, alias?: string  } 
  | { name: 'set', args?: [] | false, alias?: string  } 
  | { name: 'winnerTeam', args?: [] | false, alias?: string  } 
  | { name: 'updatedBy', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type DotaScoreActivityFields =
  | 'id'
  | 'fixture'
  | 'set'
  | 'winnerTeam'
  | 'updatedBy'
  | 'createdAt'
  | 'updatedAt'



  

export interface DotaScoreActivityFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  fixture: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  set: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  winnerTeam: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  updatedBy: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreActivity">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DotaScoreActivityConnection

type DotaScoreActivityConnectionObject =
  | DotaScoreActivityConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DotaScoreActivityConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DotaScoreActivityConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DotaScoreActivityEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivityEdge[]> | prisma.DotaScoreActivityEdge[]
  }
  aggregate: {
    type: 'AggregateDotaScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreActivityConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDotaScoreActivity> | prisma.AggregateDotaScoreActivity
  }
}
  

// Types for DotaScoreActivityEdge

type DotaScoreActivityEdgeObject =
  | DotaScoreActivityEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DotaScoreActivityEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DotaScoreActivityEdgeFieldDetails {
  node: {
    type: 'DotaScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreActivityEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivity> | prisma.DotaScoreActivity
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDotaScoreActivity

type AggregateDotaScoreActivityObject =
  | AggregateDotaScoreActivityFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDotaScoreActivityFields =
  | 'count'



  

export interface AggregateDotaScoreActivityFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createEmployee', args?: MutationCreateEmployeeArgs[] | false, alias?: string  } 
  | { name: 'updateEmployee', args?: MutationUpdateEmployeeArgs[] | false, alias?: string  } 
  | { name: 'updateManyEmployees', args?: MutationUpdateManyEmployeesArgs[] | false, alias?: string  } 
  | { name: 'upsertEmployee', args?: MutationUpsertEmployeeArgs[] | false, alias?: string  } 
  | { name: 'deleteEmployee', args?: MutationDeleteEmployeeArgs[] | false, alias?: string  } 
  | { name: 'deleteManyEmployees', args?: MutationDeleteManyEmployeesArgs[] | false, alias?: string  } 
  | { name: 'createUserAccount', args?: MutationCreateUserAccountArgs[] | false, alias?: string  } 
  | { name: 'updateUserAccount', args?: MutationUpdateUserAccountArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserAccounts', args?: MutationUpdateManyUserAccountsArgs[] | false, alias?: string  } 
  | { name: 'upsertUserAccount', args?: MutationUpsertUserAccountArgs[] | false, alias?: string  } 
  | { name: 'deleteUserAccount', args?: MutationDeleteUserAccountArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserAccounts', args?: MutationDeleteManyUserAccountsArgs[] | false, alias?: string  } 
  | { name: 'createUserAccountToken', args?: MutationCreateUserAccountTokenArgs[] | false, alias?: string  } 
  | { name: 'updateUserAccountToken', args?: MutationUpdateUserAccountTokenArgs[] | false, alias?: string  } 
  | { name: 'updateManyUserAccountTokens', args?: MutationUpdateManyUserAccountTokensArgs[] | false, alias?: string  } 
  | { name: 'upsertUserAccountToken', args?: MutationUpsertUserAccountTokenArgs[] | false, alias?: string  } 
  | { name: 'deleteUserAccountToken', args?: MutationDeleteUserAccountTokenArgs[] | false, alias?: string  } 
  | { name: 'deleteManyUserAccountTokens', args?: MutationDeleteManyUserAccountTokensArgs[] | false, alias?: string  } 
  | { name: 'createGame', args?: MutationCreateGameArgs[] | false, alias?: string  } 
  | { name: 'updateGame', args?: MutationUpdateGameArgs[] | false, alias?: string  } 
  | { name: 'updateManyGames', args?: MutationUpdateManyGamesArgs[] | false, alias?: string  } 
  | { name: 'upsertGame', args?: MutationUpsertGameArgs[] | false, alias?: string  } 
  | { name: 'deleteGame', args?: MutationDeleteGameArgs[] | false, alias?: string  } 
  | { name: 'deleteManyGames', args?: MutationDeleteManyGamesArgs[] | false, alias?: string  } 
  | { name: 'createTournament', args?: MutationCreateTournamentArgs[] | false, alias?: string  } 
  | { name: 'updateTournament', args?: MutationUpdateTournamentArgs[] | false, alias?: string  } 
  | { name: 'updateManyTournaments', args?: MutationUpdateManyTournamentsArgs[] | false, alias?: string  } 
  | { name: 'upsertTournament', args?: MutationUpsertTournamentArgs[] | false, alias?: string  } 
  | { name: 'deleteTournament', args?: MutationDeleteTournamentArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTournaments', args?: MutationDeleteManyTournamentsArgs[] | false, alias?: string  } 
  | { name: 'createCategory', args?: MutationCreateCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateCategory', args?: MutationUpdateCategoryArgs[] | false, alias?: string  } 
  | { name: 'updateManyCategories', args?: MutationUpdateManyCategoriesArgs[] | false, alias?: string  } 
  | { name: 'upsertCategory', args?: MutationUpsertCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteCategory', args?: MutationDeleteCategoryArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCategories', args?: MutationDeleteManyCategoriesArgs[] | false, alias?: string  } 
  | { name: 'createSubTournament', args?: MutationCreateSubTournamentArgs[] | false, alias?: string  } 
  | { name: 'updateSubTournament', args?: MutationUpdateSubTournamentArgs[] | false, alias?: string  } 
  | { name: 'upsertSubTournament', args?: MutationUpsertSubTournamentArgs[] | false, alias?: string  } 
  | { name: 'deleteSubTournament', args?: MutationDeleteSubTournamentArgs[] | false, alias?: string  } 
  | { name: 'deleteManySubTournaments', args?: MutationDeleteManySubTournamentsArgs[] | false, alias?: string  } 
  | { name: 'createSubTournamentPlayer', args?: MutationCreateSubTournamentPlayerArgs[] | false, alias?: string  } 
  | { name: 'updateSubTournamentPlayer', args?: MutationUpdateSubTournamentPlayerArgs[] | false, alias?: string  } 
  | { name: 'updateManySubTournamentPlayers', args?: MutationUpdateManySubTournamentPlayersArgs[] | false, alias?: string  } 
  | { name: 'upsertSubTournamentPlayer', args?: MutationUpsertSubTournamentPlayerArgs[] | false, alias?: string  } 
  | { name: 'deleteSubTournamentPlayer', args?: MutationDeleteSubTournamentPlayerArgs[] | false, alias?: string  } 
  | { name: 'deleteManySubTournamentPlayers', args?: MutationDeleteManySubTournamentPlayersArgs[] | false, alias?: string  } 
  | { name: 'createTeam', args?: MutationCreateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateTeam', args?: MutationUpdateTeamArgs[] | false, alias?: string  } 
  | { name: 'updateManyTeams', args?: MutationUpdateManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'upsertTeam', args?: MutationUpsertTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteTeam', args?: MutationDeleteTeamArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTeams', args?: MutationDeleteManyTeamsArgs[] | false, alias?: string  } 
  | { name: 'createTeamPlayer', args?: MutationCreateTeamPlayerArgs[] | false, alias?: string  } 
  | { name: 'updateTeamPlayer', args?: MutationUpdateTeamPlayerArgs[] | false, alias?: string  } 
  | { name: 'updateManyTeamPlayers', args?: MutationUpdateManyTeamPlayersArgs[] | false, alias?: string  } 
  | { name: 'upsertTeamPlayer', args?: MutationUpsertTeamPlayerArgs[] | false, alias?: string  } 
  | { name: 'deleteTeamPlayer', args?: MutationDeleteTeamPlayerArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTeamPlayers', args?: MutationDeleteManyTeamPlayersArgs[] | false, alias?: string  } 
  | { name: 'createStatus', args?: MutationCreateStatusArgs[] | false, alias?: string  } 
  | { name: 'updateStatus', args?: MutationUpdateStatusArgs[] | false, alias?: string  } 
  | { name: 'updateManyStatuses', args?: MutationUpdateManyStatusesArgs[] | false, alias?: string  } 
  | { name: 'upsertStatus', args?: MutationUpsertStatusArgs[] | false, alias?: string  } 
  | { name: 'deleteStatus', args?: MutationDeleteStatusArgs[] | false, alias?: string  } 
  | { name: 'deleteManyStatuses', args?: MutationDeleteManyStatusesArgs[] | false, alias?: string  } 
  | { name: 'createRound', args?: MutationCreateRoundArgs[] | false, alias?: string  } 
  | { name: 'updateRound', args?: MutationUpdateRoundArgs[] | false, alias?: string  } 
  | { name: 'updateManyRounds', args?: MutationUpdateManyRoundsArgs[] | false, alias?: string  } 
  | { name: 'upsertRound', args?: MutationUpsertRoundArgs[] | false, alias?: string  } 
  | { name: 'deleteRound', args?: MutationDeleteRoundArgs[] | false, alias?: string  } 
  | { name: 'deleteManyRounds', args?: MutationDeleteManyRoundsArgs[] | false, alias?: string  } 
  | { name: 'createFixture', args?: MutationCreateFixtureArgs[] | false, alias?: string  } 
  | { name: 'updateFixture', args?: MutationUpdateFixtureArgs[] | false, alias?: string  } 
  | { name: 'updateManyFixtures', args?: MutationUpdateManyFixturesArgs[] | false, alias?: string  } 
  | { name: 'upsertFixture', args?: MutationUpsertFixtureArgs[] | false, alias?: string  } 
  | { name: 'deleteFixture', args?: MutationDeleteFixtureArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFixtures', args?: MutationDeleteManyFixturesArgs[] | false, alias?: string  } 
  | { name: 'createFootballScore', args?: MutationCreateFootballScoreArgs[] | false, alias?: string  } 
  | { name: 'updateFootballScore', args?: MutationUpdateFootballScoreArgs[] | false, alias?: string  } 
  | { name: 'updateManyFootballScores', args?: MutationUpdateManyFootballScoresArgs[] | false, alias?: string  } 
  | { name: 'upsertFootballScore', args?: MutationUpsertFootballScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteFootballScore', args?: MutationDeleteFootballScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFootballScores', args?: MutationDeleteManyFootballScoresArgs[] | false, alias?: string  } 
  | { name: 'createFootballScoreActivity', args?: MutationCreateFootballScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'updateFootballScoreActivity', args?: MutationUpdateFootballScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'updateManyFootballScoreActivities', args?: MutationUpdateManyFootballScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'upsertFootballScoreActivity', args?: MutationUpsertFootballScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteFootballScoreActivity', args?: MutationDeleteFootballScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyFootballScoreActivities', args?: MutationDeleteManyFootballScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'createChessScore', args?: MutationCreateChessScoreArgs[] | false, alias?: string  } 
  | { name: 'updateChessScore', args?: MutationUpdateChessScoreArgs[] | false, alias?: string  } 
  | { name: 'updateManyChessScores', args?: MutationUpdateManyChessScoresArgs[] | false, alias?: string  } 
  | { name: 'upsertChessScore', args?: MutationUpsertChessScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteChessScore', args?: MutationDeleteChessScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteManyChessScores', args?: MutationDeleteManyChessScoresArgs[] | false, alias?: string  } 
  | { name: 'createCarromBoardScore', args?: MutationCreateCarromBoardScoreArgs[] | false, alias?: string  } 
  | { name: 'updateCarromBoardScore', args?: MutationUpdateCarromBoardScoreArgs[] | false, alias?: string  } 
  | { name: 'updateManyCarromBoardScores', args?: MutationUpdateManyCarromBoardScoresArgs[] | false, alias?: string  } 
  | { name: 'upsertCarromBoardScore', args?: MutationUpsertCarromBoardScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteCarromBoardScore', args?: MutationDeleteCarromBoardScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCarromBoardScores', args?: MutationDeleteManyCarromBoardScoresArgs[] | false, alias?: string  } 
  | { name: 'createCarromBoardScoreActivity', args?: MutationCreateCarromBoardScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'updateCarromBoardScoreActivity', args?: MutationUpdateCarromBoardScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'updateManyCarromBoardScoreActivities', args?: MutationUpdateManyCarromBoardScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'upsertCarromBoardScoreActivity', args?: MutationUpsertCarromBoardScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteCarromBoardScoreActivity', args?: MutationDeleteCarromBoardScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCarromBoardScoreActivities', args?: MutationDeleteManyCarromBoardScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'createTableTennisScore', args?: MutationCreateTableTennisScoreArgs[] | false, alias?: string  } 
  | { name: 'updateTableTennisScore', args?: MutationUpdateTableTennisScoreArgs[] | false, alias?: string  } 
  | { name: 'updateManyTableTennisScores', args?: MutationUpdateManyTableTennisScoresArgs[] | false, alias?: string  } 
  | { name: 'upsertTableTennisScore', args?: MutationUpsertTableTennisScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteTableTennisScore', args?: MutationDeleteTableTennisScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTableTennisScores', args?: MutationDeleteManyTableTennisScoresArgs[] | false, alias?: string  } 
  | { name: 'createTableTennisScoreActivity', args?: MutationCreateTableTennisScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'updateTableTennisScoreActivity', args?: MutationUpdateTableTennisScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'updateManyTableTennisScoreActivities', args?: MutationUpdateManyTableTennisScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'upsertTableTennisScoreActivity', args?: MutationUpsertTableTennisScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteTableTennisScoreActivity', args?: MutationDeleteTableTennisScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyTableTennisScoreActivities', args?: MutationDeleteManyTableTennisScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'createCounterStrikeFScore', args?: MutationCreateCounterStrikeFScoreArgs[] | false, alias?: string  } 
  | { name: 'updateCounterStrikeFScore', args?: MutationUpdateCounterStrikeFScoreArgs[] | false, alias?: string  } 
  | { name: 'updateManyCounterStrikeFScores', args?: MutationUpdateManyCounterStrikeFScoresArgs[] | false, alias?: string  } 
  | { name: 'upsertCounterStrikeFScore', args?: MutationUpsertCounterStrikeFScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteCounterStrikeFScore', args?: MutationDeleteCounterStrikeFScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCounterStrikeFScores', args?: MutationDeleteManyCounterStrikeFScoresArgs[] | false, alias?: string  } 
  | { name: 'createCounterStrikeScoreSet', args?: MutationCreateCounterStrikeScoreSetArgs[] | false, alias?: string  } 
  | { name: 'updateCounterStrikeScoreSet', args?: MutationUpdateCounterStrikeScoreSetArgs[] | false, alias?: string  } 
  | { name: 'updateManyCounterStrikeScoreSets', args?: MutationUpdateManyCounterStrikeScoreSetsArgs[] | false, alias?: string  } 
  | { name: 'upsertCounterStrikeScoreSet', args?: MutationUpsertCounterStrikeScoreSetArgs[] | false, alias?: string  } 
  | { name: 'deleteCounterStrikeScoreSet', args?: MutationDeleteCounterStrikeScoreSetArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCounterStrikeScoreSets', args?: MutationDeleteManyCounterStrikeScoreSetsArgs[] | false, alias?: string  } 
  | { name: 'createCounterStrikeScoreSetActivity', args?: MutationCreateCounterStrikeScoreSetActivityArgs[] | false, alias?: string  } 
  | { name: 'updateCounterStrikeScoreSetActivity', args?: MutationUpdateCounterStrikeScoreSetActivityArgs[] | false, alias?: string  } 
  | { name: 'updateManyCounterStrikeScoreSetActivities', args?: MutationUpdateManyCounterStrikeScoreSetActivitiesArgs[] | false, alias?: string  } 
  | { name: 'upsertCounterStrikeScoreSetActivity', args?: MutationUpsertCounterStrikeScoreSetActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteCounterStrikeScoreSetActivity', args?: MutationDeleteCounterStrikeScoreSetActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyCounterStrikeScoreSetActivities', args?: MutationDeleteManyCounterStrikeScoreSetActivitiesArgs[] | false, alias?: string  } 
  | { name: 'createDotaScore', args?: MutationCreateDotaScoreArgs[] | false, alias?: string  } 
  | { name: 'updateDotaScore', args?: MutationUpdateDotaScoreArgs[] | false, alias?: string  } 
  | { name: 'updateManyDotaScores', args?: MutationUpdateManyDotaScoresArgs[] | false, alias?: string  } 
  | { name: 'upsertDotaScore', args?: MutationUpsertDotaScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteDotaScore', args?: MutationDeleteDotaScoreArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDotaScores', args?: MutationDeleteManyDotaScoresArgs[] | false, alias?: string  } 
  | { name: 'createDotaScoreActivity', args?: MutationCreateDotaScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'updateDotaScoreActivity', args?: MutationUpdateDotaScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'updateManyDotaScoreActivities', args?: MutationUpdateManyDotaScoreActivitiesArgs[] | false, alias?: string  } 
  | { name: 'upsertDotaScoreActivity', args?: MutationUpsertDotaScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteDotaScoreActivity', args?: MutationDeleteDotaScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDotaScoreActivities', args?: MutationDeleteManyDotaScoreActivitiesArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createEmployee'
  | 'updateEmployee'
  | 'updateManyEmployees'
  | 'upsertEmployee'
  | 'deleteEmployee'
  | 'deleteManyEmployees'
  | 'createUserAccount'
  | 'updateUserAccount'
  | 'updateManyUserAccounts'
  | 'upsertUserAccount'
  | 'deleteUserAccount'
  | 'deleteManyUserAccounts'
  | 'createUserAccountToken'
  | 'updateUserAccountToken'
  | 'updateManyUserAccountTokens'
  | 'upsertUserAccountToken'
  | 'deleteUserAccountToken'
  | 'deleteManyUserAccountTokens'
  | 'createGame'
  | 'updateGame'
  | 'updateManyGames'
  | 'upsertGame'
  | 'deleteGame'
  | 'deleteManyGames'
  | 'createTournament'
  | 'updateTournament'
  | 'updateManyTournaments'
  | 'upsertTournament'
  | 'deleteTournament'
  | 'deleteManyTournaments'
  | 'createCategory'
  | 'updateCategory'
  | 'updateManyCategories'
  | 'upsertCategory'
  | 'deleteCategory'
  | 'deleteManyCategories'
  | 'createSubTournament'
  | 'updateSubTournament'
  | 'upsertSubTournament'
  | 'deleteSubTournament'
  | 'deleteManySubTournaments'
  | 'createSubTournamentPlayer'
  | 'updateSubTournamentPlayer'
  | 'updateManySubTournamentPlayers'
  | 'upsertSubTournamentPlayer'
  | 'deleteSubTournamentPlayer'
  | 'deleteManySubTournamentPlayers'
  | 'createTeam'
  | 'updateTeam'
  | 'updateManyTeams'
  | 'upsertTeam'
  | 'deleteTeam'
  | 'deleteManyTeams'
  | 'createTeamPlayer'
  | 'updateTeamPlayer'
  | 'updateManyTeamPlayers'
  | 'upsertTeamPlayer'
  | 'deleteTeamPlayer'
  | 'deleteManyTeamPlayers'
  | 'createStatus'
  | 'updateStatus'
  | 'updateManyStatuses'
  | 'upsertStatus'
  | 'deleteStatus'
  | 'deleteManyStatuses'
  | 'createRound'
  | 'updateRound'
  | 'updateManyRounds'
  | 'upsertRound'
  | 'deleteRound'
  | 'deleteManyRounds'
  | 'createFixture'
  | 'updateFixture'
  | 'updateManyFixtures'
  | 'upsertFixture'
  | 'deleteFixture'
  | 'deleteManyFixtures'
  | 'createFootballScore'
  | 'updateFootballScore'
  | 'updateManyFootballScores'
  | 'upsertFootballScore'
  | 'deleteFootballScore'
  | 'deleteManyFootballScores'
  | 'createFootballScoreActivity'
  | 'updateFootballScoreActivity'
  | 'updateManyFootballScoreActivities'
  | 'upsertFootballScoreActivity'
  | 'deleteFootballScoreActivity'
  | 'deleteManyFootballScoreActivities'
  | 'createChessScore'
  | 'updateChessScore'
  | 'updateManyChessScores'
  | 'upsertChessScore'
  | 'deleteChessScore'
  | 'deleteManyChessScores'
  | 'createCarromBoardScore'
  | 'updateCarromBoardScore'
  | 'updateManyCarromBoardScores'
  | 'upsertCarromBoardScore'
  | 'deleteCarromBoardScore'
  | 'deleteManyCarromBoardScores'
  | 'createCarromBoardScoreActivity'
  | 'updateCarromBoardScoreActivity'
  | 'updateManyCarromBoardScoreActivities'
  | 'upsertCarromBoardScoreActivity'
  | 'deleteCarromBoardScoreActivity'
  | 'deleteManyCarromBoardScoreActivities'
  | 'createTableTennisScore'
  | 'updateTableTennisScore'
  | 'updateManyTableTennisScores'
  | 'upsertTableTennisScore'
  | 'deleteTableTennisScore'
  | 'deleteManyTableTennisScores'
  | 'createTableTennisScoreActivity'
  | 'updateTableTennisScoreActivity'
  | 'updateManyTableTennisScoreActivities'
  | 'upsertTableTennisScoreActivity'
  | 'deleteTableTennisScoreActivity'
  | 'deleteManyTableTennisScoreActivities'
  | 'createCounterStrikeFScore'
  | 'updateCounterStrikeFScore'
  | 'updateManyCounterStrikeFScores'
  | 'upsertCounterStrikeFScore'
  | 'deleteCounterStrikeFScore'
  | 'deleteManyCounterStrikeFScores'
  | 'createCounterStrikeScoreSet'
  | 'updateCounterStrikeScoreSet'
  | 'updateManyCounterStrikeScoreSets'
  | 'upsertCounterStrikeScoreSet'
  | 'deleteCounterStrikeScoreSet'
  | 'deleteManyCounterStrikeScoreSets'
  | 'createCounterStrikeScoreSetActivity'
  | 'updateCounterStrikeScoreSetActivity'
  | 'updateManyCounterStrikeScoreSetActivities'
  | 'upsertCounterStrikeScoreSetActivity'
  | 'deleteCounterStrikeScoreSetActivity'
  | 'deleteManyCounterStrikeScoreSetActivities'
  | 'createDotaScore'
  | 'updateDotaScore'
  | 'updateManyDotaScores'
  | 'upsertDotaScore'
  | 'deleteDotaScore'
  | 'deleteManyDotaScores'
  | 'createDotaScoreActivity'
  | 'updateDotaScoreActivity'
  | 'updateManyDotaScoreActivities'
  | 'upsertDotaScoreActivity'
  | 'deleteDotaScoreActivity'
  | 'deleteManyDotaScoreActivities'


type MutationCreateEmployeeArgs =
  | 'data'
type MutationUpdateEmployeeArgs =
  | 'data'
  | 'where'
type MutationUpdateManyEmployeesArgs =
  | 'data'
  | 'where'
type MutationUpsertEmployeeArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteEmployeeArgs =
  | 'where'
type MutationDeleteManyEmployeesArgs =
  | 'where'
type MutationCreateUserAccountArgs =
  | 'data'
type MutationUpdateUserAccountArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserAccountsArgs =
  | 'data'
  | 'where'
type MutationUpsertUserAccountArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserAccountArgs =
  | 'where'
type MutationDeleteManyUserAccountsArgs =
  | 'where'
type MutationCreateUserAccountTokenArgs =
  | 'data'
type MutationUpdateUserAccountTokenArgs =
  | 'data'
  | 'where'
type MutationUpdateManyUserAccountTokensArgs =
  | 'data'
  | 'where'
type MutationUpsertUserAccountTokenArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteUserAccountTokenArgs =
  | 'where'
type MutationDeleteManyUserAccountTokensArgs =
  | 'where'
type MutationCreateGameArgs =
  | 'data'
type MutationUpdateGameArgs =
  | 'data'
  | 'where'
type MutationUpdateManyGamesArgs =
  | 'data'
  | 'where'
type MutationUpsertGameArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteGameArgs =
  | 'where'
type MutationDeleteManyGamesArgs =
  | 'where'
type MutationCreateTournamentArgs =
  | 'data'
type MutationUpdateTournamentArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTournamentsArgs =
  | 'data'
  | 'where'
type MutationUpsertTournamentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTournamentArgs =
  | 'where'
type MutationDeleteManyTournamentsArgs =
  | 'where'
type MutationCreateCategoryArgs =
  | 'data'
type MutationUpdateCategoryArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCategoriesArgs =
  | 'data'
  | 'where'
type MutationUpsertCategoryArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCategoryArgs =
  | 'where'
type MutationDeleteManyCategoriesArgs =
  | 'where'
type MutationCreateSubTournamentArgs =
  | 'data'
type MutationUpdateSubTournamentArgs =
  | 'data'
  | 'where'
type MutationUpsertSubTournamentArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSubTournamentArgs =
  | 'where'
type MutationDeleteManySubTournamentsArgs =
  | 'where'
type MutationCreateSubTournamentPlayerArgs =
  | 'data'
type MutationUpdateSubTournamentPlayerArgs =
  | 'data'
  | 'where'
type MutationUpdateManySubTournamentPlayersArgs =
  | 'data'
  | 'where'
type MutationUpsertSubTournamentPlayerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSubTournamentPlayerArgs =
  | 'where'
type MutationDeleteManySubTournamentPlayersArgs =
  | 'where'
type MutationCreateTeamArgs =
  | 'data'
type MutationUpdateTeamArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTeamsArgs =
  | 'data'
  | 'where'
type MutationUpsertTeamArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTeamArgs =
  | 'where'
type MutationDeleteManyTeamsArgs =
  | 'where'
type MutationCreateTeamPlayerArgs =
  | 'data'
type MutationUpdateTeamPlayerArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTeamPlayersArgs =
  | 'data'
  | 'where'
type MutationUpsertTeamPlayerArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTeamPlayerArgs =
  | 'where'
type MutationDeleteManyTeamPlayersArgs =
  | 'where'
type MutationCreateStatusArgs =
  | 'data'
type MutationUpdateStatusArgs =
  | 'data'
  | 'where'
type MutationUpdateManyStatusesArgs =
  | 'data'
  | 'where'
type MutationUpsertStatusArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteStatusArgs =
  | 'where'
type MutationDeleteManyStatusesArgs =
  | 'where'
type MutationCreateRoundArgs =
  | 'data'
type MutationUpdateRoundArgs =
  | 'data'
  | 'where'
type MutationUpdateManyRoundsArgs =
  | 'data'
  | 'where'
type MutationUpsertRoundArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteRoundArgs =
  | 'where'
type MutationDeleteManyRoundsArgs =
  | 'where'
type MutationCreateFixtureArgs =
  | 'data'
type MutationUpdateFixtureArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFixturesArgs =
  | 'data'
  | 'where'
type MutationUpsertFixtureArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFixtureArgs =
  | 'where'
type MutationDeleteManyFixturesArgs =
  | 'where'
type MutationCreateFootballScoreArgs =
  | 'data'
type MutationUpdateFootballScoreArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFootballScoresArgs =
  | 'data'
  | 'where'
type MutationUpsertFootballScoreArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFootballScoreArgs =
  | 'where'
type MutationDeleteManyFootballScoresArgs =
  | 'where'
type MutationCreateFootballScoreActivityArgs =
  | 'data'
type MutationUpdateFootballScoreActivityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyFootballScoreActivitiesArgs =
  | 'data'
  | 'where'
type MutationUpsertFootballScoreActivityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteFootballScoreActivityArgs =
  | 'where'
type MutationDeleteManyFootballScoreActivitiesArgs =
  | 'where'
type MutationCreateChessScoreArgs =
  | 'data'
type MutationUpdateChessScoreArgs =
  | 'data'
  | 'where'
type MutationUpdateManyChessScoresArgs =
  | 'data'
  | 'where'
type MutationUpsertChessScoreArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteChessScoreArgs =
  | 'where'
type MutationDeleteManyChessScoresArgs =
  | 'where'
type MutationCreateCarromBoardScoreArgs =
  | 'data'
type MutationUpdateCarromBoardScoreArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCarromBoardScoresArgs =
  | 'data'
  | 'where'
type MutationUpsertCarromBoardScoreArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCarromBoardScoreArgs =
  | 'where'
type MutationDeleteManyCarromBoardScoresArgs =
  | 'where'
type MutationCreateCarromBoardScoreActivityArgs =
  | 'data'
type MutationUpdateCarromBoardScoreActivityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCarromBoardScoreActivitiesArgs =
  | 'data'
  | 'where'
type MutationUpsertCarromBoardScoreActivityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCarromBoardScoreActivityArgs =
  | 'where'
type MutationDeleteManyCarromBoardScoreActivitiesArgs =
  | 'where'
type MutationCreateTableTennisScoreArgs =
  | 'data'
type MutationUpdateTableTennisScoreArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTableTennisScoresArgs =
  | 'data'
  | 'where'
type MutationUpsertTableTennisScoreArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTableTennisScoreArgs =
  | 'where'
type MutationDeleteManyTableTennisScoresArgs =
  | 'where'
type MutationCreateTableTennisScoreActivityArgs =
  | 'data'
type MutationUpdateTableTennisScoreActivityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyTableTennisScoreActivitiesArgs =
  | 'data'
  | 'where'
type MutationUpsertTableTennisScoreActivityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteTableTennisScoreActivityArgs =
  | 'where'
type MutationDeleteManyTableTennisScoreActivitiesArgs =
  | 'where'
type MutationCreateCounterStrikeFScoreArgs =
  | 'data'
type MutationUpdateCounterStrikeFScoreArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCounterStrikeFScoresArgs =
  | 'data'
  | 'where'
type MutationUpsertCounterStrikeFScoreArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCounterStrikeFScoreArgs =
  | 'where'
type MutationDeleteManyCounterStrikeFScoresArgs =
  | 'where'
type MutationCreateCounterStrikeScoreSetArgs =
  | 'data'
type MutationUpdateCounterStrikeScoreSetArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCounterStrikeScoreSetsArgs =
  | 'data'
  | 'where'
type MutationUpsertCounterStrikeScoreSetArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCounterStrikeScoreSetArgs =
  | 'where'
type MutationDeleteManyCounterStrikeScoreSetsArgs =
  | 'where'
type MutationCreateCounterStrikeScoreSetActivityArgs =
  | 'data'
type MutationUpdateCounterStrikeScoreSetActivityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyCounterStrikeScoreSetActivitiesArgs =
  | 'data'
  | 'where'
type MutationUpsertCounterStrikeScoreSetActivityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteCounterStrikeScoreSetActivityArgs =
  | 'where'
type MutationDeleteManyCounterStrikeScoreSetActivitiesArgs =
  | 'where'
type MutationCreateDotaScoreArgs =
  | 'data'
type MutationUpdateDotaScoreArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDotaScoresArgs =
  | 'data'
  | 'where'
type MutationUpsertDotaScoreArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDotaScoreArgs =
  | 'where'
type MutationDeleteManyDotaScoresArgs =
  | 'where'
type MutationCreateDotaScoreActivityArgs =
  | 'data'
type MutationUpdateDotaScoreActivityArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDotaScoreActivitiesArgs =
  | 'data'
  | 'where'
type MutationUpsertDotaScoreActivityArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDotaScoreActivityArgs =
  | 'where'
type MutationDeleteManyDotaScoreActivitiesArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createEmployee: {
    type: 'Employee'
    args: Record<MutationCreateEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  updateEmployee: {
    type: 'Employee'
    args: Record<MutationUpdateEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeUpdateInput, where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  updateManyEmployees: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: EmployeeUpdateManyMutationInput, where?: EmployeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertEmployee: {
    type: 'Employee'
    args: Record<MutationUpsertEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeeWhereUniqueInput, create: EmployeeCreateInput, update: EmployeeUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee> | prisma.Employee
  }
  deleteEmployee: {
    type: 'Employee'
    args: Record<MutationDeleteEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: EmployeeWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  deleteManyEmployees: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyEmployeesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: EmployeeWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserAccount: {
    type: 'UserAccount'
    args: Record<MutationCreateUserAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserAccountCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  updateUserAccount: {
    type: 'UserAccount'
    args: Record<MutationUpdateUserAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserAccountUpdateInput, where: UserAccountWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount | null> | prisma.UserAccount | null
  }
  updateManyUserAccounts: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserAccountsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserAccountUpdateManyMutationInput, where?: UserAccountWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserAccount: {
    type: 'UserAccount'
    args: Record<MutationUpsertUserAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserAccountWhereUniqueInput, create: UserAccountCreateInput, update: UserAccountUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount> | prisma.UserAccount
  }
  deleteUserAccount: {
    type: 'UserAccount'
    args: Record<MutationDeleteUserAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserAccountWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount | null> | prisma.UserAccount | null
  }
  deleteManyUserAccounts: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserAccountsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserAccountWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createUserAccountToken: {
    type: 'UserAccountToken'
    args: Record<MutationCreateUserAccountTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserAccountTokenCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountToken> | prisma.UserAccountToken
  }
  updateUserAccountToken: {
    type: 'UserAccountToken'
    args: Record<MutationUpdateUserAccountTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserAccountTokenUpdateInput, where: UserAccountTokenWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountToken | null> | prisma.UserAccountToken | null
  }
  updateManyUserAccountTokens: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyUserAccountTokensArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: UserAccountTokenUpdateManyMutationInput, where?: UserAccountTokenWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertUserAccountToken: {
    type: 'UserAccountToken'
    args: Record<MutationUpsertUserAccountTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserAccountTokenWhereUniqueInput, create: UserAccountTokenCreateInput, update: UserAccountTokenUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountToken> | prisma.UserAccountToken
  }
  deleteUserAccountToken: {
    type: 'UserAccountToken'
    args: Record<MutationDeleteUserAccountTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: UserAccountTokenWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountToken | null> | prisma.UserAccountToken | null
  }
  deleteManyUserAccountTokens: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyUserAccountTokensArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: UserAccountTokenWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createGame: {
    type: 'Game'
    args: Record<MutationCreateGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GameCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game> | prisma.Game
  }
  updateGame: {
    type: 'Game'
    args: Record<MutationUpdateGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GameUpdateInput, where: GameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game | null> | prisma.Game | null
  }
  updateManyGames: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyGamesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: GameUpdateManyMutationInput, where?: GameWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertGame: {
    type: 'Game'
    args: Record<MutationUpsertGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GameWhereUniqueInput, create: GameCreateInput, update: GameUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game> | prisma.Game
  }
  deleteGame: {
    type: 'Game'
    args: Record<MutationDeleteGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: GameWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game | null> | prisma.Game | null
  }
  deleteManyGames: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyGamesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: GameWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTournament: {
    type: 'Tournament'
    args: Record<MutationCreateTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TournamentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament> | prisma.Tournament
  }
  updateTournament: {
    type: 'Tournament'
    args: Record<MutationUpdateTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TournamentUpdateInput, where: TournamentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament | null> | prisma.Tournament | null
  }
  updateManyTournaments: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTournamentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TournamentUpdateManyMutationInput, where?: TournamentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTournament: {
    type: 'Tournament'
    args: Record<MutationUpsertTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TournamentWhereUniqueInput, create: TournamentCreateInput, update: TournamentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament> | prisma.Tournament
  }
  deleteTournament: {
    type: 'Tournament'
    args: Record<MutationDeleteTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TournamentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament | null> | prisma.Tournament | null
  }
  deleteManyTournaments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTournamentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TournamentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCategory: {
    type: 'Category'
    args: Record<MutationCreateCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  updateCategory: {
    type: 'Category'
    args: Record<MutationUpdateCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryUpdateInput, where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  updateManyCategories: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CategoryUpdateManyMutationInput, where?: CategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCategory: {
    type: 'Category'
    args: Record<MutationUpsertCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CategoryWhereUniqueInput, create: CategoryCreateInput, update: CategoryUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category> | prisma.Category
  }
  deleteCategory: {
    type: 'Category'
    args: Record<MutationDeleteCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CategoryWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  deleteManyCategories: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCategoriesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CategoryWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSubTournament: {
    type: 'SubTournament'
    args: Record<MutationCreateSubTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubTournamentCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament> | prisma.SubTournament
  }
  updateSubTournament: {
    type: 'SubTournament'
    args: Record<MutationUpdateSubTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubTournamentUpdateInput, where: SubTournamentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament | null> | prisma.SubTournament | null
  }
  upsertSubTournament: {
    type: 'SubTournament'
    args: Record<MutationUpsertSubTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SubTournamentWhereUniqueInput, create: SubTournamentCreateInput, update: SubTournamentUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament> | prisma.SubTournament
  }
  deleteSubTournament: {
    type: 'SubTournament'
    args: Record<MutationDeleteSubTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SubTournamentWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament | null> | prisma.SubTournament | null
  }
  deleteManySubTournaments: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySubTournamentsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SubTournamentWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSubTournamentPlayer: {
    type: 'SubTournamentPlayer'
    args: Record<MutationCreateSubTournamentPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubTournamentPlayerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer> | prisma.SubTournamentPlayer
  }
  updateSubTournamentPlayer: {
    type: 'SubTournamentPlayer'
    args: Record<MutationUpdateSubTournamentPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubTournamentPlayerUpdateInput, where: SubTournamentPlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer | null> | prisma.SubTournamentPlayer | null
  }
  updateManySubTournamentPlayers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySubTournamentPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SubTournamentPlayerUpdateManyMutationInput, where?: SubTournamentPlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSubTournamentPlayer: {
    type: 'SubTournamentPlayer'
    args: Record<MutationUpsertSubTournamentPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SubTournamentPlayerWhereUniqueInput, create: SubTournamentPlayerCreateInput, update: SubTournamentPlayerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer> | prisma.SubTournamentPlayer
  }
  deleteSubTournamentPlayer: {
    type: 'SubTournamentPlayer'
    args: Record<MutationDeleteSubTournamentPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SubTournamentPlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer | null> | prisma.SubTournamentPlayer | null
  }
  deleteManySubTournamentPlayers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySubTournamentPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SubTournamentPlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTeam: {
    type: 'Team'
    args: Record<MutationCreateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  updateTeam: {
    type: 'Team'
    args: Record<MutationUpdateTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateInput, where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updateManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamUpdateManyMutationInput, where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTeam: {
    type: 'Team'
    args: Record<MutationUpsertTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput, create: TeamCreateInput, update: TeamUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team> | prisma.Team
  }
  deleteTeam: {
    type: 'Team'
    args: Record<MutationDeleteTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  deleteManyTeams: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTeamsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TeamWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTeamPlayer: {
    type: 'TeamPlayer'
    args: Record<MutationCreateTeamPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamPlayerCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer> | prisma.TeamPlayer
  }
  updateTeamPlayer: {
    type: 'TeamPlayer'
    args: Record<MutationUpdateTeamPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamPlayerUpdateInput, where: TeamPlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer | null> | prisma.TeamPlayer | null
  }
  updateManyTeamPlayers: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTeamPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TeamPlayerUpdateManyMutationInput, where?: TeamPlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTeamPlayer: {
    type: 'TeamPlayer'
    args: Record<MutationUpsertTeamPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamPlayerWhereUniqueInput, create: TeamPlayerCreateInput, update: TeamPlayerUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer> | prisma.TeamPlayer
  }
  deleteTeamPlayer: {
    type: 'TeamPlayer'
    args: Record<MutationDeleteTeamPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TeamPlayerWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer | null> | prisma.TeamPlayer | null
  }
  deleteManyTeamPlayers: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTeamPlayersArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TeamPlayerWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createStatus: {
    type: 'Status'
    args: Record<MutationCreateStatusArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StatusCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  updateStatus: {
    type: 'Status'
    args: Record<MutationUpdateStatusArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StatusUpdateInput, where: StatusWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status | null> | prisma.Status | null
  }
  updateManyStatuses: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyStatusesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: StatusUpdateManyMutationInput, where?: StatusWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertStatus: {
    type: 'Status'
    args: Record<MutationUpsertStatusArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StatusWhereUniqueInput, create: StatusCreateInput, update: StatusUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status> | prisma.Status
  }
  deleteStatus: {
    type: 'Status'
    args: Record<MutationDeleteStatusArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: StatusWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status | null> | prisma.Status | null
  }
  deleteManyStatuses: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyStatusesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: StatusWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createRound: {
    type: 'Round'
    args: Record<MutationCreateRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoundCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round> | prisma.Round
  }
  updateRound: {
    type: 'Round'
    args: Record<MutationUpdateRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoundUpdateInput, where: RoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round | null> | prisma.Round | null
  }
  updateManyRounds: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: RoundUpdateManyMutationInput, where?: RoundWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertRound: {
    type: 'Round'
    args: Record<MutationUpsertRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RoundWhereUniqueInput, create: RoundCreateInput, update: RoundUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round> | prisma.Round
  }
  deleteRound: {
    type: 'Round'
    args: Record<MutationDeleteRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: RoundWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round | null> | prisma.Round | null
  }
  deleteManyRounds: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyRoundsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: RoundWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFixture: {
    type: 'Fixture'
    args: Record<MutationCreateFixtureArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FixtureCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  updateFixture: {
    type: 'Fixture'
    args: Record<MutationUpdateFixtureArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FixtureUpdateInput, where: FixtureWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture | null> | prisma.Fixture | null
  }
  updateManyFixtures: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFixturesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FixtureUpdateManyMutationInput, where?: FixtureWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFixture: {
    type: 'Fixture'
    args: Record<MutationUpsertFixtureArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FixtureWhereUniqueInput, create: FixtureCreateInput, update: FixtureUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture> | prisma.Fixture
  }
  deleteFixture: {
    type: 'Fixture'
    args: Record<MutationDeleteFixtureArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FixtureWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture | null> | prisma.Fixture | null
  }
  deleteManyFixtures: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFixturesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FixtureWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFootballScore: {
    type: 'FootballScore'
    args: Record<MutationCreateFootballScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FootballScoreCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScore> | prisma.FootballScore
  }
  updateFootballScore: {
    type: 'FootballScore'
    args: Record<MutationUpdateFootballScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FootballScoreUpdateInput, where: FootballScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScore | null> | prisma.FootballScore | null
  }
  updateManyFootballScores: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFootballScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FootballScoreUpdateManyMutationInput, where?: FootballScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFootballScore: {
    type: 'FootballScore'
    args: Record<MutationUpsertFootballScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FootballScoreWhereUniqueInput, create: FootballScoreCreateInput, update: FootballScoreUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScore> | prisma.FootballScore
  }
  deleteFootballScore: {
    type: 'FootballScore'
    args: Record<MutationDeleteFootballScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FootballScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScore | null> | prisma.FootballScore | null
  }
  deleteManyFootballScores: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFootballScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FootballScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createFootballScoreActivity: {
    type: 'FootballScoreActivity'
    args: Record<MutationCreateFootballScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FootballScoreActivityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivity> | prisma.FootballScoreActivity
  }
  updateFootballScoreActivity: {
    type: 'FootballScoreActivity'
    args: Record<MutationUpdateFootballScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FootballScoreActivityUpdateInput, where: FootballScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivity | null> | prisma.FootballScoreActivity | null
  }
  updateManyFootballScoreActivities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyFootballScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: FootballScoreActivityUpdateManyMutationInput, where?: FootballScoreActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertFootballScoreActivity: {
    type: 'FootballScoreActivity'
    args: Record<MutationUpsertFootballScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FootballScoreActivityWhereUniqueInput, create: FootballScoreActivityCreateInput, update: FootballScoreActivityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivity> | prisma.FootballScoreActivity
  }
  deleteFootballScoreActivity: {
    type: 'FootballScoreActivity'
    args: Record<MutationDeleteFootballScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: FootballScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivity | null> | prisma.FootballScoreActivity | null
  }
  deleteManyFootballScoreActivities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyFootballScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: FootballScoreActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createChessScore: {
    type: 'ChessScore'
    args: Record<MutationCreateChessScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ChessScoreCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScore> | prisma.ChessScore
  }
  updateChessScore: {
    type: 'ChessScore'
    args: Record<MutationUpdateChessScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ChessScoreUpdateInput, where: ChessScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScore | null> | prisma.ChessScore | null
  }
  updateManyChessScores: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyChessScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: ChessScoreUpdateManyMutationInput, where?: ChessScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertChessScore: {
    type: 'ChessScore'
    args: Record<MutationUpsertChessScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ChessScoreWhereUniqueInput, create: ChessScoreCreateInput, update: ChessScoreUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScore> | prisma.ChessScore
  }
  deleteChessScore: {
    type: 'ChessScore'
    args: Record<MutationDeleteChessScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: ChessScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScore | null> | prisma.ChessScore | null
  }
  deleteManyChessScores: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyChessScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: ChessScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCarromBoardScore: {
    type: 'CarromBoardScore'
    args: Record<MutationCreateCarromBoardScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CarromBoardScoreCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScore> | prisma.CarromBoardScore
  }
  updateCarromBoardScore: {
    type: 'CarromBoardScore'
    args: Record<MutationUpdateCarromBoardScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CarromBoardScoreUpdateInput, where: CarromBoardScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScore | null> | prisma.CarromBoardScore | null
  }
  updateManyCarromBoardScores: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCarromBoardScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CarromBoardScoreUpdateManyMutationInput, where?: CarromBoardScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCarromBoardScore: {
    type: 'CarromBoardScore'
    args: Record<MutationUpsertCarromBoardScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CarromBoardScoreWhereUniqueInput, create: CarromBoardScoreCreateInput, update: CarromBoardScoreUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScore> | prisma.CarromBoardScore
  }
  deleteCarromBoardScore: {
    type: 'CarromBoardScore'
    args: Record<MutationDeleteCarromBoardScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CarromBoardScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScore | null> | prisma.CarromBoardScore | null
  }
  deleteManyCarromBoardScores: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCarromBoardScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CarromBoardScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCarromBoardScoreActivity: {
    type: 'CarromBoardScoreActivity'
    args: Record<MutationCreateCarromBoardScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CarromBoardScoreActivityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivity> | prisma.CarromBoardScoreActivity
  }
  updateCarromBoardScoreActivity: {
    type: 'CarromBoardScoreActivity'
    args: Record<MutationUpdateCarromBoardScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CarromBoardScoreActivityUpdateInput, where: CarromBoardScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivity | null> | prisma.CarromBoardScoreActivity | null
  }
  updateManyCarromBoardScoreActivities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCarromBoardScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CarromBoardScoreActivityUpdateManyMutationInput, where?: CarromBoardScoreActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCarromBoardScoreActivity: {
    type: 'CarromBoardScoreActivity'
    args: Record<MutationUpsertCarromBoardScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CarromBoardScoreActivityWhereUniqueInput, create: CarromBoardScoreActivityCreateInput, update: CarromBoardScoreActivityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivity> | prisma.CarromBoardScoreActivity
  }
  deleteCarromBoardScoreActivity: {
    type: 'CarromBoardScoreActivity'
    args: Record<MutationDeleteCarromBoardScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CarromBoardScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivity | null> | prisma.CarromBoardScoreActivity | null
  }
  deleteManyCarromBoardScoreActivities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCarromBoardScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CarromBoardScoreActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTableTennisScore: {
    type: 'TableTennisScore'
    args: Record<MutationCreateTableTennisScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TableTennisScoreCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScore> | prisma.TableTennisScore
  }
  updateTableTennisScore: {
    type: 'TableTennisScore'
    args: Record<MutationUpdateTableTennisScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TableTennisScoreUpdateInput, where: TableTennisScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScore | null> | prisma.TableTennisScore | null
  }
  updateManyTableTennisScores: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTableTennisScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TableTennisScoreUpdateManyMutationInput, where?: TableTennisScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTableTennisScore: {
    type: 'TableTennisScore'
    args: Record<MutationUpsertTableTennisScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TableTennisScoreWhereUniqueInput, create: TableTennisScoreCreateInput, update: TableTennisScoreUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScore> | prisma.TableTennisScore
  }
  deleteTableTennisScore: {
    type: 'TableTennisScore'
    args: Record<MutationDeleteTableTennisScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TableTennisScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScore | null> | prisma.TableTennisScore | null
  }
  deleteManyTableTennisScores: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTableTennisScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TableTennisScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createTableTennisScoreActivity: {
    type: 'TableTennisScoreActivity'
    args: Record<MutationCreateTableTennisScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TableTennisScoreActivityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivity> | prisma.TableTennisScoreActivity
  }
  updateTableTennisScoreActivity: {
    type: 'TableTennisScoreActivity'
    args: Record<MutationUpdateTableTennisScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TableTennisScoreActivityUpdateInput, where: TableTennisScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivity | null> | prisma.TableTennisScoreActivity | null
  }
  updateManyTableTennisScoreActivities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyTableTennisScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: TableTennisScoreActivityUpdateManyMutationInput, where?: TableTennisScoreActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertTableTennisScoreActivity: {
    type: 'TableTennisScoreActivity'
    args: Record<MutationUpsertTableTennisScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TableTennisScoreActivityWhereUniqueInput, create: TableTennisScoreActivityCreateInput, update: TableTennisScoreActivityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivity> | prisma.TableTennisScoreActivity
  }
  deleteTableTennisScoreActivity: {
    type: 'TableTennisScoreActivity'
    args: Record<MutationDeleteTableTennisScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: TableTennisScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivity | null> | prisma.TableTennisScoreActivity | null
  }
  deleteManyTableTennisScoreActivities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyTableTennisScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: TableTennisScoreActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCounterStrikeFScore: {
    type: 'CounterStrikeFScore'
    args: Record<MutationCreateCounterStrikeFScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeFScoreCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScore> | prisma.CounterStrikeFScore
  }
  updateCounterStrikeFScore: {
    type: 'CounterStrikeFScore'
    args: Record<MutationUpdateCounterStrikeFScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeFScoreUpdateInput, where: CounterStrikeFScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScore | null> | prisma.CounterStrikeFScore | null
  }
  updateManyCounterStrikeFScores: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCounterStrikeFScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeFScoreUpdateManyMutationInput, where?: CounterStrikeFScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCounterStrikeFScore: {
    type: 'CounterStrikeFScore'
    args: Record<MutationUpsertCounterStrikeFScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CounterStrikeFScoreWhereUniqueInput, create: CounterStrikeFScoreCreateInput, update: CounterStrikeFScoreUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScore> | prisma.CounterStrikeFScore
  }
  deleteCounterStrikeFScore: {
    type: 'CounterStrikeFScore'
    args: Record<MutationDeleteCounterStrikeFScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CounterStrikeFScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScore | null> | prisma.CounterStrikeFScore | null
  }
  deleteManyCounterStrikeFScores: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCounterStrikeFScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CounterStrikeFScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCounterStrikeScoreSet: {
    type: 'CounterStrikeScoreSet'
    args: Record<MutationCreateCounterStrikeScoreSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeScoreSetCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet> | prisma.CounterStrikeScoreSet
  }
  updateCounterStrikeScoreSet: {
    type: 'CounterStrikeScoreSet'
    args: Record<MutationUpdateCounterStrikeScoreSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeScoreSetUpdateInput, where: CounterStrikeScoreSetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet | null> | prisma.CounterStrikeScoreSet | null
  }
  updateManyCounterStrikeScoreSets: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCounterStrikeScoreSetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeScoreSetUpdateManyMutationInput, where?: CounterStrikeScoreSetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCounterStrikeScoreSet: {
    type: 'CounterStrikeScoreSet'
    args: Record<MutationUpsertCounterStrikeScoreSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CounterStrikeScoreSetWhereUniqueInput, create: CounterStrikeScoreSetCreateInput, update: CounterStrikeScoreSetUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet> | prisma.CounterStrikeScoreSet
  }
  deleteCounterStrikeScoreSet: {
    type: 'CounterStrikeScoreSet'
    args: Record<MutationDeleteCounterStrikeScoreSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CounterStrikeScoreSetWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet | null> | prisma.CounterStrikeScoreSet | null
  }
  deleteManyCounterStrikeScoreSets: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCounterStrikeScoreSetsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CounterStrikeScoreSetWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createCounterStrikeScoreSetActivity: {
    type: 'CounterStrikeScoreSetActivity'
    args: Record<MutationCreateCounterStrikeScoreSetActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeScoreSetActivityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivity> | prisma.CounterStrikeScoreSetActivity
  }
  updateCounterStrikeScoreSetActivity: {
    type: 'CounterStrikeScoreSetActivity'
    args: Record<MutationUpdateCounterStrikeScoreSetActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeScoreSetActivityUpdateInput, where: CounterStrikeScoreSetActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivity | null> | prisma.CounterStrikeScoreSetActivity | null
  }
  updateManyCounterStrikeScoreSetActivities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyCounterStrikeScoreSetActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: CounterStrikeScoreSetActivityUpdateManyMutationInput, where?: CounterStrikeScoreSetActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertCounterStrikeScoreSetActivity: {
    type: 'CounterStrikeScoreSetActivity'
    args: Record<MutationUpsertCounterStrikeScoreSetActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CounterStrikeScoreSetActivityWhereUniqueInput, create: CounterStrikeScoreSetActivityCreateInput, update: CounterStrikeScoreSetActivityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivity> | prisma.CounterStrikeScoreSetActivity
  }
  deleteCounterStrikeScoreSetActivity: {
    type: 'CounterStrikeScoreSetActivity'
    args: Record<MutationDeleteCounterStrikeScoreSetActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: CounterStrikeScoreSetActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivity | null> | prisma.CounterStrikeScoreSetActivity | null
  }
  deleteManyCounterStrikeScoreSetActivities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyCounterStrikeScoreSetActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: CounterStrikeScoreSetActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDotaScore: {
    type: 'DotaScore'
    args: Record<MutationCreateDotaScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DotaScoreCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScore> | prisma.DotaScore
  }
  updateDotaScore: {
    type: 'DotaScore'
    args: Record<MutationUpdateDotaScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DotaScoreUpdateInput, where: DotaScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScore | null> | prisma.DotaScore | null
  }
  updateManyDotaScores: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDotaScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DotaScoreUpdateManyMutationInput, where?: DotaScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDotaScore: {
    type: 'DotaScore'
    args: Record<MutationUpsertDotaScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DotaScoreWhereUniqueInput, create: DotaScoreCreateInput, update: DotaScoreUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScore> | prisma.DotaScore
  }
  deleteDotaScore: {
    type: 'DotaScore'
    args: Record<MutationDeleteDotaScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DotaScoreWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScore | null> | prisma.DotaScore | null
  }
  deleteManyDotaScores: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDotaScoresArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DotaScoreWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createDotaScoreActivity: {
    type: 'DotaScoreActivity'
    args: Record<MutationCreateDotaScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DotaScoreActivityCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivity> | prisma.DotaScoreActivity
  }
  updateDotaScoreActivity: {
    type: 'DotaScoreActivity'
    args: Record<MutationUpdateDotaScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DotaScoreActivityUpdateInput, where: DotaScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivity | null> | prisma.DotaScoreActivity | null
  }
  updateManyDotaScoreActivities: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDotaScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DotaScoreActivityUpdateManyMutationInput, where?: DotaScoreActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDotaScoreActivity: {
    type: 'DotaScoreActivity'
    args: Record<MutationUpsertDotaScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DotaScoreActivityWhereUniqueInput, create: DotaScoreActivityCreateInput, update: DotaScoreActivityUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivity> | prisma.DotaScoreActivity
  }
  deleteDotaScoreActivity: {
    type: 'DotaScoreActivity'
    args: Record<MutationDeleteDotaScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DotaScoreActivityWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivity | null> | prisma.DotaScoreActivity | null
  }
  deleteManyDotaScoreActivities: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDotaScoreActivitiesArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DotaScoreActivityWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'employee', args?: SubscriptionEmployeeArgs[] | false, alias?: string  } 
  | { name: 'userAccount', args?: SubscriptionUserAccountArgs[] | false, alias?: string  } 
  | { name: 'userAccountToken', args?: SubscriptionUserAccountTokenArgs[] | false, alias?: string  } 
  | { name: 'game', args?: SubscriptionGameArgs[] | false, alias?: string  } 
  | { name: 'tournament', args?: SubscriptionTournamentArgs[] | false, alias?: string  } 
  | { name: 'category', args?: SubscriptionCategoryArgs[] | false, alias?: string  } 
  | { name: 'subTournament', args?: SubscriptionSubTournamentArgs[] | false, alias?: string  } 
  | { name: 'subTournamentPlayer', args?: SubscriptionSubTournamentPlayerArgs[] | false, alias?: string  } 
  | { name: 'team', args?: SubscriptionTeamArgs[] | false, alias?: string  } 
  | { name: 'teamPlayer', args?: SubscriptionTeamPlayerArgs[] | false, alias?: string  } 
  | { name: 'status', args?: SubscriptionStatusArgs[] | false, alias?: string  } 
  | { name: 'round', args?: SubscriptionRoundArgs[] | false, alias?: string  } 
  | { name: 'fixture', args?: SubscriptionFixtureArgs[] | false, alias?: string  } 
  | { name: 'footballScore', args?: SubscriptionFootballScoreArgs[] | false, alias?: string  } 
  | { name: 'footballScoreActivity', args?: SubscriptionFootballScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'chessScore', args?: SubscriptionChessScoreArgs[] | false, alias?: string  } 
  | { name: 'carromBoardScore', args?: SubscriptionCarromBoardScoreArgs[] | false, alias?: string  } 
  | { name: 'carromBoardScoreActivity', args?: SubscriptionCarromBoardScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'tableTennisScore', args?: SubscriptionTableTennisScoreArgs[] | false, alias?: string  } 
  | { name: 'tableTennisScoreActivity', args?: SubscriptionTableTennisScoreActivityArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeFScore', args?: SubscriptionCounterStrikeFScoreArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeScoreSet', args?: SubscriptionCounterStrikeScoreSetArgs[] | false, alias?: string  } 
  | { name: 'counterStrikeScoreSetActivity', args?: SubscriptionCounterStrikeScoreSetActivityArgs[] | false, alias?: string  } 
  | { name: 'dotaScore', args?: SubscriptionDotaScoreArgs[] | false, alias?: string  } 
  | { name: 'dotaScoreActivity', args?: SubscriptionDotaScoreActivityArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'employee'
  | 'userAccount'
  | 'userAccountToken'
  | 'game'
  | 'tournament'
  | 'category'
  | 'subTournament'
  | 'subTournamentPlayer'
  | 'team'
  | 'teamPlayer'
  | 'status'
  | 'round'
  | 'fixture'
  | 'footballScore'
  | 'footballScoreActivity'
  | 'chessScore'
  | 'carromBoardScore'
  | 'carromBoardScoreActivity'
  | 'tableTennisScore'
  | 'tableTennisScoreActivity'
  | 'counterStrikeFScore'
  | 'counterStrikeScoreSet'
  | 'counterStrikeScoreSetActivity'
  | 'dotaScore'
  | 'dotaScoreActivity'


type SubscriptionEmployeeArgs =
  | 'where'
type SubscriptionUserAccountArgs =
  | 'where'
type SubscriptionUserAccountTokenArgs =
  | 'where'
type SubscriptionGameArgs =
  | 'where'
type SubscriptionTournamentArgs =
  | 'where'
type SubscriptionCategoryArgs =
  | 'where'
type SubscriptionSubTournamentArgs =
  | 'where'
type SubscriptionSubTournamentPlayerArgs =
  | 'where'
type SubscriptionTeamArgs =
  | 'where'
type SubscriptionTeamPlayerArgs =
  | 'where'
type SubscriptionStatusArgs =
  | 'where'
type SubscriptionRoundArgs =
  | 'where'
type SubscriptionFixtureArgs =
  | 'where'
type SubscriptionFootballScoreArgs =
  | 'where'
type SubscriptionFootballScoreActivityArgs =
  | 'where'
type SubscriptionChessScoreArgs =
  | 'where'
type SubscriptionCarromBoardScoreArgs =
  | 'where'
type SubscriptionCarromBoardScoreActivityArgs =
  | 'where'
type SubscriptionTableTennisScoreArgs =
  | 'where'
type SubscriptionTableTennisScoreActivityArgs =
  | 'where'
type SubscriptionCounterStrikeFScoreArgs =
  | 'where'
type SubscriptionCounterStrikeScoreSetArgs =
  | 'where'
type SubscriptionCounterStrikeScoreSetActivityArgs =
  | 'where'
type SubscriptionDotaScoreArgs =
  | 'where'
type SubscriptionDotaScoreActivityArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  employee: {
    type: 'EmployeeSubscriptionPayload'
    args: Record<SubscriptionEmployeeArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: EmployeeSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeeSubscriptionPayload | null> | prisma.EmployeeSubscriptionPayload | null
  }
  userAccount: {
    type: 'UserAccountSubscriptionPayload'
    args: Record<SubscriptionUserAccountArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserAccountSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountSubscriptionPayload | null> | prisma.UserAccountSubscriptionPayload | null
  }
  userAccountToken: {
    type: 'UserAccountTokenSubscriptionPayload'
    args: Record<SubscriptionUserAccountTokenArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: UserAccountTokenSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountTokenSubscriptionPayload | null> | prisma.UserAccountTokenSubscriptionPayload | null
  }
  game: {
    type: 'GameSubscriptionPayload'
    args: Record<SubscriptionGameArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: GameSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GameSubscriptionPayload | null> | prisma.GameSubscriptionPayload | null
  }
  tournament: {
    type: 'TournamentSubscriptionPayload'
    args: Record<SubscriptionTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TournamentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TournamentSubscriptionPayload | null> | prisma.TournamentSubscriptionPayload | null
  }
  category: {
    type: 'CategorySubscriptionPayload'
    args: Record<SubscriptionCategoryArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CategorySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategorySubscriptionPayload | null> | prisma.CategorySubscriptionPayload | null
  }
  subTournament: {
    type: 'SubTournamentSubscriptionPayload'
    args: Record<SubscriptionSubTournamentArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SubTournamentSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentSubscriptionPayload | null> | prisma.SubTournamentSubscriptionPayload | null
  }
  subTournamentPlayer: {
    type: 'SubTournamentPlayerSubscriptionPayload'
    args: Record<SubscriptionSubTournamentPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SubTournamentPlayerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayerSubscriptionPayload | null> | prisma.SubTournamentPlayerSubscriptionPayload | null
  }
  team: {
    type: 'TeamSubscriptionPayload'
    args: Record<SubscriptionTeamArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TeamSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamSubscriptionPayload | null> | prisma.TeamSubscriptionPayload | null
  }
  teamPlayer: {
    type: 'TeamPlayerSubscriptionPayload'
    args: Record<SubscriptionTeamPlayerArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TeamPlayerSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayerSubscriptionPayload | null> | prisma.TeamPlayerSubscriptionPayload | null
  }
  status: {
    type: 'StatusSubscriptionPayload'
    args: Record<SubscriptionStatusArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: StatusSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatusSubscriptionPayload | null> | prisma.StatusSubscriptionPayload | null
  }
  round: {
    type: 'RoundSubscriptionPayload'
    args: Record<SubscriptionRoundArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: RoundSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoundSubscriptionPayload | null> | prisma.RoundSubscriptionPayload | null
  }
  fixture: {
    type: 'FixtureSubscriptionPayload'
    args: Record<SubscriptionFixtureArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FixtureSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FixtureSubscriptionPayload | null> | prisma.FixtureSubscriptionPayload | null
  }
  footballScore: {
    type: 'FootballScoreSubscriptionPayload'
    args: Record<SubscriptionFootballScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FootballScoreSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreSubscriptionPayload | null> | prisma.FootballScoreSubscriptionPayload | null
  }
  footballScoreActivity: {
    type: 'FootballScoreActivitySubscriptionPayload'
    args: Record<SubscriptionFootballScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: FootballScoreActivitySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivitySubscriptionPayload | null> | prisma.FootballScoreActivitySubscriptionPayload | null
  }
  chessScore: {
    type: 'ChessScoreSubscriptionPayload'
    args: Record<SubscriptionChessScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: ChessScoreSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScoreSubscriptionPayload | null> | prisma.ChessScoreSubscriptionPayload | null
  }
  carromBoardScore: {
    type: 'CarromBoardScoreSubscriptionPayload'
    args: Record<SubscriptionCarromBoardScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CarromBoardScoreSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreSubscriptionPayload | null> | prisma.CarromBoardScoreSubscriptionPayload | null
  }
  carromBoardScoreActivity: {
    type: 'CarromBoardScoreActivitySubscriptionPayload'
    args: Record<SubscriptionCarromBoardScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CarromBoardScoreActivitySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivitySubscriptionPayload | null> | prisma.CarromBoardScoreActivitySubscriptionPayload | null
  }
  tableTennisScore: {
    type: 'TableTennisScoreSubscriptionPayload'
    args: Record<SubscriptionTableTennisScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TableTennisScoreSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreSubscriptionPayload | null> | prisma.TableTennisScoreSubscriptionPayload | null
  }
  tableTennisScoreActivity: {
    type: 'TableTennisScoreActivitySubscriptionPayload'
    args: Record<SubscriptionTableTennisScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: TableTennisScoreActivitySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivitySubscriptionPayload | null> | prisma.TableTennisScoreActivitySubscriptionPayload | null
  }
  counterStrikeFScore: {
    type: 'CounterStrikeFScoreSubscriptionPayload'
    args: Record<SubscriptionCounterStrikeFScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CounterStrikeFScoreSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScoreSubscriptionPayload | null> | prisma.CounterStrikeFScoreSubscriptionPayload | null
  }
  counterStrikeScoreSet: {
    type: 'CounterStrikeScoreSetSubscriptionPayload'
    args: Record<SubscriptionCounterStrikeScoreSetArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CounterStrikeScoreSetSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetSubscriptionPayload | null> | prisma.CounterStrikeScoreSetSubscriptionPayload | null
  }
  counterStrikeScoreSetActivity: {
    type: 'CounterStrikeScoreSetActivitySubscriptionPayload'
    args: Record<SubscriptionCounterStrikeScoreSetActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: CounterStrikeScoreSetActivitySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivitySubscriptionPayload | null> | prisma.CounterStrikeScoreSetActivitySubscriptionPayload | null
  }
  dotaScore: {
    type: 'DotaScoreSubscriptionPayload'
    args: Record<SubscriptionDotaScoreArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DotaScoreSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreSubscriptionPayload | null> | prisma.DotaScoreSubscriptionPayload | null
  }
  dotaScoreActivity: {
    type: 'DotaScoreActivitySubscriptionPayload'
    args: Record<SubscriptionDotaScoreActivityArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DotaScoreActivitySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivitySubscriptionPayload | null> | prisma.DotaScoreActivitySubscriptionPayload | null
  }
}
  

// Types for EmployeeSubscriptionPayload

type EmployeeSubscriptionPayloadObject =
  | EmployeeSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type EmployeeSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface EmployeeSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Employee'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Employee | null> | prisma.Employee | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'EmployeePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"EmployeeSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.EmployeePreviousValues | null> | prisma.EmployeePreviousValues | null
  }
}
  

// Types for EmployeePreviousValues

type EmployeePreviousValuesObject =
  | EmployeePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'firstName', args?: [] | false, alias?: string  } 
  | { name: 'middleName', args?: [] | false, alias?: string  } 
  | { name: 'lastName', args?: [] | false, alias?: string  } 
  | { name: 'profilePictureUrl', args?: [] | false, alias?: string  } 
  | { name: 'lmsEmpId', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type EmployeePreviousValuesFields =
  | 'id'
  | 'firstName'
  | 'middleName'
  | 'lastName'
  | 'profilePictureUrl'
  | 'lmsEmpId'
  | 'createdAt'
  | 'updatedAt'



  

export interface EmployeePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  firstName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  middleName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lastName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  profilePictureUrl: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  lmsEmpId: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserAccountSubscriptionPayload

type UserAccountSubscriptionPayloadObject =
  | UserAccountSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserAccountSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserAccountSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserAccount'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserAccountSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccount | null> | prisma.UserAccount | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserAccountPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserAccountSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountPreviousValues | null> | prisma.UserAccountPreviousValues | null
  }
}
  

// Types for UserAccountPreviousValues

type UserAccountPreviousValuesObject =
  | UserAccountPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isActive', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'userRole', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type UserAccountPreviousValuesFields =
  | 'id'
  | 'isActive'
  | 'password'
  | 'userRole'
  | 'createdAt'
  | 'updatedAt'



  

export interface UserAccountPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isActive: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  userRole: {
    type: 'UserRole'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserRole> | prisma.UserRole
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for UserAccountTokenSubscriptionPayload

type UserAccountTokenSubscriptionPayloadObject =
  | UserAccountTokenSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type UserAccountTokenSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface UserAccountTokenSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"UserAccountTokenSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'UserAccountToken'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserAccountTokenSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountToken | null> | prisma.UserAccountToken | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'UserAccountTokenPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"UserAccountTokenSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.UserAccountTokenPreviousValues | null> | prisma.UserAccountTokenPreviousValues | null
  }
}
  

// Types for UserAccountTokenPreviousValues

type UserAccountTokenPreviousValuesObject =
  | UserAccountTokenPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'refreshToken', args?: [] | false, alias?: string  } 

type UserAccountTokenPreviousValuesFields =
  | 'id'
  | 'refreshToken'



  

export interface UserAccountTokenPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  refreshToken: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for GameSubscriptionPayload

type GameSubscriptionPayloadObject =
  | GameSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type GameSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface GameSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"GameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Game'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Game | null> | prisma.Game | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'GamePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"GameSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.GamePreviousValues | null> | prisma.GamePreviousValues | null
  }
}
  

// Types for GamePreviousValues

type GamePreviousValuesObject =
  | GamePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'shortName', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type GamePreviousValuesFields =
  | 'id'
  | 'name'
  | 'shortName'
  | 'createdAt'
  | 'updatedAt'



  

export interface GamePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  shortName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TournamentSubscriptionPayload

type TournamentSubscriptionPayloadObject =
  | TournamentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TournamentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TournamentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TournamentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Tournament'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TournamentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Tournament | null> | prisma.Tournament | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TournamentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TournamentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TournamentPreviousValues | null> | prisma.TournamentPreviousValues | null
  }
}
  

// Types for TournamentPreviousValues

type TournamentPreviousValuesObject =
  | TournamentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'season', args?: [] | false, alias?: string  } 
  | { name: 'startDate', args?: [] | false, alias?: string  } 
  | { name: 'finishDate', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TournamentPreviousValuesFields =
  | 'id'
  | 'season'
  | 'startDate'
  | 'finishDate'
  | 'createdAt'
  | 'updatedAt'



  

export interface TournamentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  season: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  finishDate: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CategorySubscriptionPayload

type CategorySubscriptionPayloadObject =
  | CategorySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CategorySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CategorySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Category'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Category | null> | prisma.Category | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CategoryPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CategorySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CategoryPreviousValues | null> | prisma.CategoryPreviousValues | null
  }
}
  

// Types for CategoryPreviousValues

type CategoryPreviousValuesObject =
  | CategoryPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CategoryPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface CategoryPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubTournamentSubscriptionPayload

type SubTournamentSubscriptionPayloadObject =
  | SubTournamentSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SubTournamentSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SubTournamentSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'SubTournament'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SubTournamentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournament | null> | prisma.SubTournament | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SubTournamentPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SubTournamentSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPreviousValues | null> | prisma.SubTournamentPreviousValues | null
  }
}
  

// Types for SubTournamentPreviousValues

type SubTournamentPreviousValuesObject =
  | SubTournamentPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SubTournamentPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'



  

export interface SubTournamentPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SubTournamentPlayerSubscriptionPayload

type SubTournamentPlayerSubscriptionPayloadObject =
  | SubTournamentPlayerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SubTournamentPlayerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SubTournamentPlayerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SubTournamentPlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'SubTournamentPlayer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SubTournamentPlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayer | null> | prisma.SubTournamentPlayer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SubTournamentPlayerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SubTournamentPlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SubTournamentPlayerPreviousValues | null> | prisma.SubTournamentPlayerPreviousValues | null
  }
}
  

// Types for SubTournamentPlayerPreviousValues

type SubTournamentPlayerPreviousValuesObject =
  | SubTournamentPlayerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'position', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type SubTournamentPlayerPreviousValuesFields =
  | 'id'
  | 'position'
  | 'createdAt'
  | 'updatedAt'



  

export interface SubTournamentPlayerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  position: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamSubscriptionPayload

type TeamSubscriptionPayloadObject =
  | TeamSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TeamSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TeamSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Team'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Team | null> | prisma.Team | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TeamPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPreviousValues | null> | prisma.TeamPreviousValues | null
  }
}
  

// Types for TeamPreviousValues

type TeamPreviousValuesObject =
  | TeamPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'logoImage', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TeamPreviousValuesFields =
  | 'id'
  | 'name'
  | 'logoImage'
  | 'createdAt'
  | 'updatedAt'



  

export interface TeamPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  logoImage: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TeamPlayerSubscriptionPayload

type TeamPlayerSubscriptionPayloadObject =
  | TeamPlayerSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TeamPlayerSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TeamPlayerSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TeamPlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TeamPlayer'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamPlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayer | null> | prisma.TeamPlayer | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TeamPlayerPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TeamPlayerSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TeamPlayerPreviousValues | null> | prisma.TeamPlayerPreviousValues | null
  }
}
  

// Types for TeamPlayerPreviousValues

type TeamPlayerPreviousValuesObject =
  | TeamPlayerPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'isCaptain', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TeamPlayerPreviousValuesFields =
  | 'id'
  | 'isCaptain'
  | 'createdAt'
  | 'updatedAt'



  

export interface TeamPlayerPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  isCaptain: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for StatusSubscriptionPayload

type StatusSubscriptionPayloadObject =
  | StatusSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type StatusSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface StatusSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"StatusSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Status'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StatusSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Status | null> | prisma.Status | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'StatusPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"StatusSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.StatusPreviousValues | null> | prisma.StatusPreviousValues | null
  }
}
  

// Types for StatusPreviousValues

type StatusPreviousValuesObject =
  | StatusPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type StatusPreviousValuesFields =
  | 'id'
  | 'name'
  | 'createdAt'
  | 'updatedAt'



  

export interface StatusPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for RoundSubscriptionPayload

type RoundSubscriptionPayloadObject =
  | RoundSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type RoundSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface RoundSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"RoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Round'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Round | null> | prisma.Round | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'RoundPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"RoundSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.RoundPreviousValues | null> | prisma.RoundPreviousValues | null
  }
}
  

// Types for RoundPreviousValues

type RoundPreviousValuesObject =
  | RoundPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'shortName', args?: [] | false, alias?: string  } 
  | { name: 'sortOrder', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type RoundPreviousValuesFields =
  | 'id'
  | 'name'
  | 'shortName'
  | 'sortOrder'
  | 'createdAt'
  | 'updatedAt'



  

export interface RoundPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  shortName: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  sortOrder: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FixtureSubscriptionPayload

type FixtureSubscriptionPayloadObject =
  | FixtureSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FixtureSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FixtureSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FixtureSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Fixture'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FixtureSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Fixture | null> | prisma.Fixture | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FixturePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FixtureSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FixturePreviousValues | null> | prisma.FixturePreviousValues | null
  }
}
  

// Types for FixturePreviousValues

type FixturePreviousValuesObject =
  | FixturePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'dateTime', args?: [] | false, alias?: string  } 
  | { name: 'images', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FixturePreviousValuesFields =
  | 'id'
  | 'dateTime'
  | 'images'
  | 'createdAt'
  | 'updatedAt'



  

export interface FixturePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  dateTime: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  images: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FootballScoreSubscriptionPayload

type FootballScoreSubscriptionPayloadObject =
  | FootballScoreSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FootballScoreSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FootballScoreSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FootballScore'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FootballScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScore | null> | prisma.FootballScore | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FootballScorePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FootballScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScorePreviousValues | null> | prisma.FootballScorePreviousValues | null
  }
}
  

// Types for FootballScorePreviousValues

type FootballScorePreviousValuesObject =
  | FootballScorePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamFTScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamFTScore', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamAetScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamAetScore', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamPenaltyScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamPenaltyScore', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FootballScorePreviousValuesFields =
  | 'id'
  | 'homeTeamFTScore'
  | 'awayTeamFTScore'
  | 'homeTeamAetScore'
  | 'awayTeamAetScore'
  | 'homeTeamPenaltyScore'
  | 'awayTeamPenaltyScore'
  | 'createdAt'
  | 'updatedAt'



  

export interface FootballScorePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  homeTeamFTScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamFTScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  homeTeamAetScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamAetScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  homeTeamPenaltyScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamPenaltyScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for FootballScoreActivitySubscriptionPayload

type FootballScoreActivitySubscriptionPayloadObject =
  | FootballScoreActivitySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type FootballScoreActivitySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface FootballScoreActivitySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'FootballScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FootballScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivity | null> | prisma.FootballScoreActivity | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'FootballScoreActivityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"FootballScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballScoreActivityPreviousValues | null> | prisma.FootballScoreActivityPreviousValues | null
  }
}
  

// Types for FootballScoreActivityPreviousValues

type FootballScoreActivityPreviousValuesObject =
  | FootballScoreActivityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'activityType', args?: [] | false, alias?: string  } 
  | { name: 'activityTime', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type FootballScoreActivityPreviousValuesFields =
  | 'id'
  | 'activityType'
  | 'activityTime'
  | 'createdAt'
  | 'updatedAt'



  

export interface FootballScoreActivityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  activityType: {
    type: 'FootballActivityType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"FootballScoreActivityPreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.FootballActivityType> | prisma.FootballActivityType
  }
  activityTime: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for ChessScoreSubscriptionPayload

type ChessScoreSubscriptionPayloadObject =
  | ChessScoreSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type ChessScoreSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface ChessScoreSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"ChessScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'ChessScore'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ChessScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScore | null> | prisma.ChessScore | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'ChessScorePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ChessScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessScorePreviousValues | null> | prisma.ChessScorePreviousValues | null
  }
}
  

// Types for ChessScorePreviousValues

type ChessScorePreviousValuesObject =
  | ChessScorePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'winningMethod', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type ChessScorePreviousValuesFields =
  | 'id'
  | 'winningMethod'
  | 'createdAt'
  | 'updatedAt'



  

export interface ChessScorePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  winningMethod: {
    type: 'ChessWinningMethod'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"ChessScorePreviousValues">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.ChessWinningMethod | null> | prisma.ChessWinningMethod | null
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CarromBoardScoreSubscriptionPayload

type CarromBoardScoreSubscriptionPayloadObject =
  | CarromBoardScoreSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CarromBoardScoreSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CarromBoardScoreSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CarromBoardScore'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CarromBoardScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScore | null> | prisma.CarromBoardScore | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CarromBoardScorePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CarromBoardScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScorePreviousValues | null> | prisma.CarromBoardScorePreviousValues | null
  }
}
  

// Types for CarromBoardScorePreviousValues

type CarromBoardScorePreviousValuesObject =
  | CarromBoardScorePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CarromBoardScorePreviousValuesFields =
  | 'id'
  | 'homeTeamScore'
  | 'awayTeamScore'
  | 'createdAt'
  | 'updatedAt'



  

export interface CarromBoardScorePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  homeTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CarromBoardScoreActivitySubscriptionPayload

type CarromBoardScoreActivitySubscriptionPayloadObject =
  | CarromBoardScoreActivitySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CarromBoardScoreActivitySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CarromBoardScoreActivitySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CarromBoardScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivity | null> | prisma.CarromBoardScoreActivity | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CarromBoardScoreActivityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CarromBoardScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CarromBoardScoreActivityPreviousValues | null> | prisma.CarromBoardScoreActivityPreviousValues | null
  }
}
  

// Types for CarromBoardScoreActivityPreviousValues

type CarromBoardScoreActivityPreviousValuesObject =
  | CarromBoardScoreActivityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'points', args?: [] | false, alias?: string  } 
  | { name: 'order', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CarromBoardScoreActivityPreviousValuesFields =
  | 'id'
  | 'points'
  | 'order'
  | 'createdAt'
  | 'updatedAt'



  

export interface CarromBoardScoreActivityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  points: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  order: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TableTennisScoreSubscriptionPayload

type TableTennisScoreSubscriptionPayloadObject =
  | TableTennisScoreSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TableTennisScoreSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TableTennisScoreSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TableTennisScore'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TableTennisScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScore | null> | prisma.TableTennisScore | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TableTennisScorePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TableTennisScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScorePreviousValues | null> | prisma.TableTennisScorePreviousValues | null
  }
}
  

// Types for TableTennisScorePreviousValues

type TableTennisScorePreviousValuesObject =
  | TableTennisScorePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'setsCount', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TableTennisScorePreviousValuesFields =
  | 'id'
  | 'homeTeamScore'
  | 'awayTeamScore'
  | 'setsCount'
  | 'createdAt'
  | 'updatedAt'



  

export interface TableTennisScorePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  homeTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  setsCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for TableTennisScoreActivitySubscriptionPayload

type TableTennisScoreActivitySubscriptionPayloadObject =
  | TableTennisScoreActivitySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type TableTennisScoreActivitySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface TableTennisScoreActivitySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"TableTennisScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'TableTennisScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TableTennisScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivity | null> | prisma.TableTennisScoreActivity | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'TableTennisScoreActivityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"TableTennisScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.TableTennisScoreActivityPreviousValues | null> | prisma.TableTennisScoreActivityPreviousValues | null
  }
}
  

// Types for TableTennisScoreActivityPreviousValues

type TableTennisScoreActivityPreviousValuesObject =
  | TableTennisScoreActivityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'set', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamPoints', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamPoints', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type TableTennisScoreActivityPreviousValuesFields =
  | 'id'
  | 'set'
  | 'homeTeamPoints'
  | 'awayTeamPoints'
  | 'createdAt'
  | 'updatedAt'



  

export interface TableTennisScoreActivityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  set: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  homeTeamPoints: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  awayTeamPoints: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeFScoreSubscriptionPayload

type CounterStrikeFScoreSubscriptionPayloadObject =
  | CounterStrikeFScoreSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CounterStrikeFScoreSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CounterStrikeFScoreSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeFScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CounterStrikeFScore'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CounterStrikeFScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScore | null> | prisma.CounterStrikeFScore | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CounterStrikeFScorePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CounterStrikeFScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeFScorePreviousValues | null> | prisma.CounterStrikeFScorePreviousValues | null
  }
}
  

// Types for CounterStrikeFScorePreviousValues

type CounterStrikeFScorePreviousValuesObject =
  | CounterStrikeFScorePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'setsCount', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CounterStrikeFScorePreviousValuesFields =
  | 'id'
  | 'homeTeamScore'
  | 'awayTeamScore'
  | 'setsCount'
  | 'createdAt'
  | 'updatedAt'



  

export interface CounterStrikeFScorePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  homeTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  awayTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  setsCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeScoreSetSubscriptionPayload

type CounterStrikeScoreSetSubscriptionPayloadObject =
  | CounterStrikeScoreSetSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CounterStrikeScoreSetSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CounterStrikeScoreSet'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSet | null> | prisma.CounterStrikeScoreSet | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CounterStrikeScoreSetPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetPreviousValues | null> | prisma.CounterStrikeScoreSetPreviousValues | null
  }
}
  

// Types for CounterStrikeScoreSetPreviousValues

type CounterStrikeScoreSetPreviousValuesObject =
  | CounterStrikeScoreSetPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'set', args?: [] | false, alias?: string  } 
  | { name: 'homeTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'awayTeamScore', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetPreviousValuesFields =
  | 'id'
  | 'set'
  | 'homeTeamScore'
  | 'awayTeamScore'
  | 'createdAt'
  | 'updatedAt'



  

export interface CounterStrikeScoreSetPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  set: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  homeTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  awayTeamScore: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for CounterStrikeScoreSetActivitySubscriptionPayload

type CounterStrikeScoreSetActivitySubscriptionPayloadObject =
  | CounterStrikeScoreSetActivitySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetActivitySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface CounterStrikeScoreSetActivitySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'CounterStrikeScoreSetActivity'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivity | null> | prisma.CounterStrikeScoreSetActivity | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'CounterStrikeScoreSetActivityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"CounterStrikeScoreSetActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.CounterStrikeScoreSetActivityPreviousValues | null> | prisma.CounterStrikeScoreSetActivityPreviousValues | null
  }
}
  

// Types for CounterStrikeScoreSetActivityPreviousValues

type CounterStrikeScoreSetActivityPreviousValuesObject =
  | CounterStrikeScoreSetActivityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'kills', args?: [] | false, alias?: string  } 
  | { name: 'deaths', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type CounterStrikeScoreSetActivityPreviousValuesFields =
  | 'id'
  | 'kills'
  | 'deaths'
  | 'createdAt'
  | 'updatedAt'



  

export interface CounterStrikeScoreSetActivityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  kills: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  deaths: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DotaScoreSubscriptionPayload

type DotaScoreSubscriptionPayloadObject =
  | DotaScoreSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DotaScoreSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DotaScoreSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'DotaScore'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DotaScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScore | null> | prisma.DotaScore | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DotaScorePreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DotaScoreSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScorePreviousValues | null> | prisma.DotaScorePreviousValues | null
  }
}
  

// Types for DotaScorePreviousValues

type DotaScorePreviousValuesObject =
  | DotaScorePreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'setsCount', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type DotaScorePreviousValuesFields =
  | 'id'
  | 'setsCount'
  | 'createdAt'
  | 'updatedAt'



  

export interface DotaScorePreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  setsCount: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for DotaScoreActivitySubscriptionPayload

type DotaScoreActivitySubscriptionPayloadObject =
  | DotaScoreActivitySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DotaScoreActivitySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DotaScoreActivitySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DotaScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'DotaScoreActivity'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DotaScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivity | null> | prisma.DotaScoreActivity | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DotaScoreActivityPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DotaScoreActivitySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DotaScoreActivityPreviousValues | null> | prisma.DotaScoreActivityPreviousValues | null
  }
}
  

// Types for DotaScoreActivityPreviousValues

type DotaScoreActivityPreviousValuesObject =
  | DotaScoreActivityPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'set', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 

type DotaScoreActivityPreviousValuesFields =
  | 'id'
  | 'set'
  | 'createdAt'
  | 'updatedAt'



  

export interface DotaScoreActivityPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  set: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface EmployeeWhereUniqueInput {
  id?: string | null
}
export type EmployeeWhereUniqueInputInputObject =
  | Extract<keyof EmployeeWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface EmployeeWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  firstName?: string | null
  firstName_not?: string | null
  firstName_in?: string[]
  firstName_not_in?: string[]
  firstName_lt?: string | null
  firstName_lte?: string | null
  firstName_gt?: string | null
  firstName_gte?: string | null
  firstName_contains?: string | null
  firstName_not_contains?: string | null
  firstName_starts_with?: string | null
  firstName_not_starts_with?: string | null
  firstName_ends_with?: string | null
  firstName_not_ends_with?: string | null
  middleName?: string | null
  middleName_not?: string | null
  middleName_in?: string[]
  middleName_not_in?: string[]
  middleName_lt?: string | null
  middleName_lte?: string | null
  middleName_gt?: string | null
  middleName_gte?: string | null
  middleName_contains?: string | null
  middleName_not_contains?: string | null
  middleName_starts_with?: string | null
  middleName_not_starts_with?: string | null
  middleName_ends_with?: string | null
  middleName_not_ends_with?: string | null
  lastName?: string | null
  lastName_not?: string | null
  lastName_in?: string[]
  lastName_not_in?: string[]
  lastName_lt?: string | null
  lastName_lte?: string | null
  lastName_gt?: string | null
  lastName_gte?: string | null
  lastName_contains?: string | null
  lastName_not_contains?: string | null
  lastName_starts_with?: string | null
  lastName_not_starts_with?: string | null
  lastName_ends_with?: string | null
  lastName_not_ends_with?: string | null
  profilePictureUrl?: string | null
  profilePictureUrl_not?: string | null
  profilePictureUrl_in?: string[]
  profilePictureUrl_not_in?: string[]
  profilePictureUrl_lt?: string | null
  profilePictureUrl_lte?: string | null
  profilePictureUrl_gt?: string | null
  profilePictureUrl_gte?: string | null
  profilePictureUrl_contains?: string | null
  profilePictureUrl_not_contains?: string | null
  profilePictureUrl_starts_with?: string | null
  profilePictureUrl_not_starts_with?: string | null
  profilePictureUrl_ends_with?: string | null
  profilePictureUrl_not_ends_with?: string | null
  lmsEmpId?: number | null
  lmsEmpId_not?: number | null
  lmsEmpId_in?: number[]
  lmsEmpId_not_in?: number[]
  lmsEmpId_lt?: number | null
  lmsEmpId_lte?: number | null
  lmsEmpId_gt?: number | null
  lmsEmpId_gte?: number | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: EmployeeWhereInput[]
  OR?: EmployeeWhereInput[]
  NOT?: EmployeeWhereInput[]
}
export type EmployeeWhereInputInputObject =
  | Extract<keyof EmployeeWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'firstName', alias?: string  } 
  | { name: 'firstName_not', alias?: string  } 
  | { name: 'firstName_in', alias?: string  } 
  | { name: 'firstName_not_in', alias?: string  } 
  | { name: 'firstName_lt', alias?: string  } 
  | { name: 'firstName_lte', alias?: string  } 
  | { name: 'firstName_gt', alias?: string  } 
  | { name: 'firstName_gte', alias?: string  } 
  | { name: 'firstName_contains', alias?: string  } 
  | { name: 'firstName_not_contains', alias?: string  } 
  | { name: 'firstName_starts_with', alias?: string  } 
  | { name: 'firstName_not_starts_with', alias?: string  } 
  | { name: 'firstName_ends_with', alias?: string  } 
  | { name: 'firstName_not_ends_with', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'middleName_not', alias?: string  } 
  | { name: 'middleName_in', alias?: string  } 
  | { name: 'middleName_not_in', alias?: string  } 
  | { name: 'middleName_lt', alias?: string  } 
  | { name: 'middleName_lte', alias?: string  } 
  | { name: 'middleName_gt', alias?: string  } 
  | { name: 'middleName_gte', alias?: string  } 
  | { name: 'middleName_contains', alias?: string  } 
  | { name: 'middleName_not_contains', alias?: string  } 
  | { name: 'middleName_starts_with', alias?: string  } 
  | { name: 'middleName_not_starts_with', alias?: string  } 
  | { name: 'middleName_ends_with', alias?: string  } 
  | { name: 'middleName_not_ends_with', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'lastName_not', alias?: string  } 
  | { name: 'lastName_in', alias?: string  } 
  | { name: 'lastName_not_in', alias?: string  } 
  | { name: 'lastName_lt', alias?: string  } 
  | { name: 'lastName_lte', alias?: string  } 
  | { name: 'lastName_gt', alias?: string  } 
  | { name: 'lastName_gte', alias?: string  } 
  | { name: 'lastName_contains', alias?: string  } 
  | { name: 'lastName_not_contains', alias?: string  } 
  | { name: 'lastName_starts_with', alias?: string  } 
  | { name: 'lastName_not_starts_with', alias?: string  } 
  | { name: 'lastName_ends_with', alias?: string  } 
  | { name: 'lastName_not_ends_with', alias?: string  } 
  | { name: 'profilePictureUrl', alias?: string  } 
  | { name: 'profilePictureUrl_not', alias?: string  } 
  | { name: 'profilePictureUrl_in', alias?: string  } 
  | { name: 'profilePictureUrl_not_in', alias?: string  } 
  | { name: 'profilePictureUrl_lt', alias?: string  } 
  | { name: 'profilePictureUrl_lte', alias?: string  } 
  | { name: 'profilePictureUrl_gt', alias?: string  } 
  | { name: 'profilePictureUrl_gte', alias?: string  } 
  | { name: 'profilePictureUrl_contains', alias?: string  } 
  | { name: 'profilePictureUrl_not_contains', alias?: string  } 
  | { name: 'profilePictureUrl_starts_with', alias?: string  } 
  | { name: 'profilePictureUrl_not_starts_with', alias?: string  } 
  | { name: 'profilePictureUrl_ends_with', alias?: string  } 
  | { name: 'profilePictureUrl_not_ends_with', alias?: string  } 
  | { name: 'lmsEmpId', alias?: string  } 
  | { name: 'lmsEmpId_not', alias?: string  } 
  | { name: 'lmsEmpId_in', alias?: string  } 
  | { name: 'lmsEmpId_not_in', alias?: string  } 
  | { name: 'lmsEmpId_lt', alias?: string  } 
  | { name: 'lmsEmpId_lte', alias?: string  } 
  | { name: 'lmsEmpId_gt', alias?: string  } 
  | { name: 'lmsEmpId_gte', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserAccountWhereUniqueInput {
  id?: string | null
}
export type UserAccountWhereUniqueInputInputObject =
  | Extract<keyof UserAccountWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserAccountWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  employeeId?: EmployeeWhereInput | null
  isActive?: boolean | null
  isActive_not?: boolean | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  userRole?: prisma.UserRole | null
  userRole_not?: prisma.UserRole | null
  userRole_in?: prisma.UserRole[]
  userRole_not_in?: prisma.UserRole[]
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: UserAccountWhereInput[]
  OR?: UserAccountWhereInput[]
  NOT?: UserAccountWhereInput[]
}
export type UserAccountWhereInputInputObject =
  | Extract<keyof UserAccountWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'employeeId', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'isActive_not', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'userRole', alias?: string  } 
  | { name: 'userRole_not', alias?: string  } 
  | { name: 'userRole_in', alias?: string  } 
  | { name: 'userRole_not_in', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserAccountTokenWhereUniqueInput {
  id?: string | null
}
export type UserAccountTokenWhereUniqueInputInputObject =
  | Extract<keyof UserAccountTokenWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface UserAccountTokenWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  user?: UserAccountWhereInput | null
  refreshToken?: string | null
  refreshToken_not?: string | null
  refreshToken_in?: string[]
  refreshToken_not_in?: string[]
  refreshToken_lt?: string | null
  refreshToken_lte?: string | null
  refreshToken_gt?: string | null
  refreshToken_gte?: string | null
  refreshToken_contains?: string | null
  refreshToken_not_contains?: string | null
  refreshToken_starts_with?: string | null
  refreshToken_not_starts_with?: string | null
  refreshToken_ends_with?: string | null
  refreshToken_not_ends_with?: string | null
  AND?: UserAccountTokenWhereInput[]
  OR?: UserAccountTokenWhereInput[]
  NOT?: UserAccountTokenWhereInput[]
}
export type UserAccountTokenWhereInputInputObject =
  | Extract<keyof UserAccountTokenWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'user', alias?: string  } 
  | { name: 'refreshToken', alias?: string  } 
  | { name: 'refreshToken_not', alias?: string  } 
  | { name: 'refreshToken_in', alias?: string  } 
  | { name: 'refreshToken_not_in', alias?: string  } 
  | { name: 'refreshToken_lt', alias?: string  } 
  | { name: 'refreshToken_lte', alias?: string  } 
  | { name: 'refreshToken_gt', alias?: string  } 
  | { name: 'refreshToken_gte', alias?: string  } 
  | { name: 'refreshToken_contains', alias?: string  } 
  | { name: 'refreshToken_not_contains', alias?: string  } 
  | { name: 'refreshToken_starts_with', alias?: string  } 
  | { name: 'refreshToken_not_starts_with', alias?: string  } 
  | { name: 'refreshToken_ends_with', alias?: string  } 
  | { name: 'refreshToken_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GameWhereUniqueInput {
  id?: string | null
}
export type GameWhereUniqueInputInputObject =
  | Extract<keyof GameWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface GameWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  shortName?: string | null
  shortName_not?: string | null
  shortName_in?: string[]
  shortName_not_in?: string[]
  shortName_lt?: string | null
  shortName_lte?: string | null
  shortName_gt?: string | null
  shortName_gte?: string | null
  shortName_contains?: string | null
  shortName_not_contains?: string | null
  shortName_starts_with?: string | null
  shortName_not_starts_with?: string | null
  shortName_ends_with?: string | null
  shortName_not_ends_with?: string | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: GameWhereInput[]
  OR?: GameWhereInput[]
  NOT?: GameWhereInput[]
}
export type GameWhereInputInputObject =
  | Extract<keyof GameWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'shortName_not', alias?: string  } 
  | { name: 'shortName_in', alias?: string  } 
  | { name: 'shortName_not_in', alias?: string  } 
  | { name: 'shortName_lt', alias?: string  } 
  | { name: 'shortName_lte', alias?: string  } 
  | { name: 'shortName_gt', alias?: string  } 
  | { name: 'shortName_gte', alias?: string  } 
  | { name: 'shortName_contains', alias?: string  } 
  | { name: 'shortName_not_contains', alias?: string  } 
  | { name: 'shortName_starts_with', alias?: string  } 
  | { name: 'shortName_not_starts_with', alias?: string  } 
  | { name: 'shortName_ends_with', alias?: string  } 
  | { name: 'shortName_not_ends_with', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TournamentWhereUniqueInput {
  id?: string | null
}
export type TournamentWhereUniqueInputInputObject =
  | Extract<keyof TournamentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TournamentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  game?: GameWhereInput | null
  season?: string | null
  season_not?: string | null
  season_in?: string[]
  season_not_in?: string[]
  season_lt?: string | null
  season_lte?: string | null
  season_gt?: string | null
  season_gte?: string | null
  season_contains?: string | null
  season_not_contains?: string | null
  season_starts_with?: string | null
  season_not_starts_with?: string | null
  season_ends_with?: string | null
  season_not_ends_with?: string | null
  startDate?: string | null
  startDate_not?: string | null
  startDate_in?: string[]
  startDate_not_in?: string[]
  startDate_lt?: string | null
  startDate_lte?: string | null
  startDate_gt?: string | null
  startDate_gte?: string | null
  finishDate?: string | null
  finishDate_not?: string | null
  finishDate_in?: string[]
  finishDate_not_in?: string[]
  finishDate_lt?: string | null
  finishDate_lte?: string | null
  finishDate_gt?: string | null
  finishDate_gte?: string | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TournamentWhereInput[]
  OR?: TournamentWhereInput[]
  NOT?: TournamentWhereInput[]
}
export type TournamentWhereInputInputObject =
  | Extract<keyof TournamentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'game', alias?: string  } 
  | { name: 'season', alias?: string  } 
  | { name: 'season_not', alias?: string  } 
  | { name: 'season_in', alias?: string  } 
  | { name: 'season_not_in', alias?: string  } 
  | { name: 'season_lt', alias?: string  } 
  | { name: 'season_lte', alias?: string  } 
  | { name: 'season_gt', alias?: string  } 
  | { name: 'season_gte', alias?: string  } 
  | { name: 'season_contains', alias?: string  } 
  | { name: 'season_not_contains', alias?: string  } 
  | { name: 'season_starts_with', alias?: string  } 
  | { name: 'season_not_starts_with', alias?: string  } 
  | { name: 'season_ends_with', alias?: string  } 
  | { name: 'season_not_ends_with', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'startDate_not', alias?: string  } 
  | { name: 'startDate_in', alias?: string  } 
  | { name: 'startDate_not_in', alias?: string  } 
  | { name: 'startDate_lt', alias?: string  } 
  | { name: 'startDate_lte', alias?: string  } 
  | { name: 'startDate_gt', alias?: string  } 
  | { name: 'startDate_gte', alias?: string  } 
  | { name: 'finishDate', alias?: string  } 
  | { name: 'finishDate_not', alias?: string  } 
  | { name: 'finishDate_in', alias?: string  } 
  | { name: 'finishDate_not_in', alias?: string  } 
  | { name: 'finishDate_lt', alias?: string  } 
  | { name: 'finishDate_lte', alias?: string  } 
  | { name: 'finishDate_gt', alias?: string  } 
  | { name: 'finishDate_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategoryWhereUniqueInput {
  id?: string | null
}
export type CategoryWhereUniqueInputInputObject =
  | Extract<keyof CategoryWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CategoryWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CategoryWhereInput[]
  OR?: CategoryWhereInput[]
  NOT?: CategoryWhereInput[]
}
export type CategoryWhereInputInputObject =
  | Extract<keyof CategoryWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubTournamentWhereUniqueInput {
  id?: string | null
}
export type SubTournamentWhereUniqueInputInputObject =
  | Extract<keyof SubTournamentWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SubTournamentWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  tournament?: TournamentWhereInput | null
  category?: CategoryWhereInput | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: SubTournamentWhereInput[]
  OR?: SubTournamentWhereInput[]
  NOT?: SubTournamentWhereInput[]
}
export type SubTournamentWhereInputInputObject =
  | Extract<keyof SubTournamentWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'tournament', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubTournamentPlayerWhereUniqueInput {
  id?: string | null
}
export type SubTournamentPlayerWhereUniqueInputInputObject =
  | Extract<keyof SubTournamentPlayerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface SubTournamentPlayerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  subTournament?: SubTournamentWhereInput | null
  player?: EmployeeWhereInput | null
  position?: string | null
  position_not?: string | null
  position_in?: string[]
  position_not_in?: string[]
  position_lt?: string | null
  position_lte?: string | null
  position_gt?: string | null
  position_gte?: string | null
  position_contains?: string | null
  position_not_contains?: string | null
  position_starts_with?: string | null
  position_not_starts_with?: string | null
  position_ends_with?: string | null
  position_not_ends_with?: string | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: SubTournamentPlayerWhereInput[]
  OR?: SubTournamentPlayerWhereInput[]
  NOT?: SubTournamentPlayerWhereInput[]
}
export type SubTournamentPlayerWhereInputInputObject =
  | Extract<keyof SubTournamentPlayerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'subTournament', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'position_not', alias?: string  } 
  | { name: 'position_in', alias?: string  } 
  | { name: 'position_not_in', alias?: string  } 
  | { name: 'position_lt', alias?: string  } 
  | { name: 'position_lte', alias?: string  } 
  | { name: 'position_gt', alias?: string  } 
  | { name: 'position_gte', alias?: string  } 
  | { name: 'position_contains', alias?: string  } 
  | { name: 'position_not_contains', alias?: string  } 
  | { name: 'position_starts_with', alias?: string  } 
  | { name: 'position_not_starts_with', alias?: string  } 
  | { name: 'position_ends_with', alias?: string  } 
  | { name: 'position_not_ends_with', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamWhereUniqueInput {
  id?: string | null
}
export type TeamWhereUniqueInputInputObject =
  | Extract<keyof TeamWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TeamWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  logoImage?: string | null
  logoImage_not?: string | null
  logoImage_in?: string[]
  logoImage_not_in?: string[]
  logoImage_lt?: string | null
  logoImage_lte?: string | null
  logoImage_gt?: string | null
  logoImage_gte?: string | null
  logoImage_contains?: string | null
  logoImage_not_contains?: string | null
  logoImage_starts_with?: string | null
  logoImage_not_starts_with?: string | null
  logoImage_ends_with?: string | null
  logoImage_not_ends_with?: string | null
  subTournament?: SubTournamentWhereInput | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TeamWhereInput[]
  OR?: TeamWhereInput[]
  NOT?: TeamWhereInput[]
}
export type TeamWhereInputInputObject =
  | Extract<keyof TeamWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'logoImage', alias?: string  } 
  | { name: 'logoImage_not', alias?: string  } 
  | { name: 'logoImage_in', alias?: string  } 
  | { name: 'logoImage_not_in', alias?: string  } 
  | { name: 'logoImage_lt', alias?: string  } 
  | { name: 'logoImage_lte', alias?: string  } 
  | { name: 'logoImage_gt', alias?: string  } 
  | { name: 'logoImage_gte', alias?: string  } 
  | { name: 'logoImage_contains', alias?: string  } 
  | { name: 'logoImage_not_contains', alias?: string  } 
  | { name: 'logoImage_starts_with', alias?: string  } 
  | { name: 'logoImage_not_starts_with', alias?: string  } 
  | { name: 'logoImage_ends_with', alias?: string  } 
  | { name: 'logoImage_not_ends_with', alias?: string  } 
  | { name: 'subTournament', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamPlayerWhereUniqueInput {
  id?: string | null
}
export type TeamPlayerWhereUniqueInputInputObject =
  | Extract<keyof TeamPlayerWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TeamPlayerWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  team?: TeamWhereInput | null
  player?: SubTournamentPlayerWhereInput | null
  isCaptain?: boolean | null
  isCaptain_not?: boolean | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TeamPlayerWhereInput[]
  OR?: TeamPlayerWhereInput[]
  NOT?: TeamPlayerWhereInput[]
}
export type TeamPlayerWhereInputInputObject =
  | Extract<keyof TeamPlayerWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'isCaptain', alias?: string  } 
  | { name: 'isCaptain_not', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface StatusWhereUniqueInput {
  id?: string | null
}
export type StatusWhereUniqueInputInputObject =
  | Extract<keyof StatusWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface StatusWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: StatusWhereInput[]
  OR?: StatusWhereInput[]
  NOT?: StatusWhereInput[]
}
export type StatusWhereInputInputObject =
  | Extract<keyof StatusWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RoundWhereUniqueInput {
  id?: string | null
}
export type RoundWhereUniqueInputInputObject =
  | Extract<keyof RoundWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface RoundWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  shortName?: string | null
  shortName_not?: string | null
  shortName_in?: string[]
  shortName_not_in?: string[]
  shortName_lt?: string | null
  shortName_lte?: string | null
  shortName_gt?: string | null
  shortName_gte?: string | null
  shortName_contains?: string | null
  shortName_not_contains?: string | null
  shortName_starts_with?: string | null
  shortName_not_starts_with?: string | null
  shortName_ends_with?: string | null
  shortName_not_ends_with?: string | null
  sortOrder?: number | null
  sortOrder_not?: number | null
  sortOrder_in?: number[]
  sortOrder_not_in?: number[]
  sortOrder_lt?: number | null
  sortOrder_lte?: number | null
  sortOrder_gt?: number | null
  sortOrder_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: RoundWhereInput[]
  OR?: RoundWhereInput[]
  NOT?: RoundWhereInput[]
}
export type RoundWhereInputInputObject =
  | Extract<keyof RoundWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'shortName_not', alias?: string  } 
  | { name: 'shortName_in', alias?: string  } 
  | { name: 'shortName_not_in', alias?: string  } 
  | { name: 'shortName_lt', alias?: string  } 
  | { name: 'shortName_lte', alias?: string  } 
  | { name: 'shortName_gt', alias?: string  } 
  | { name: 'shortName_gte', alias?: string  } 
  | { name: 'shortName_contains', alias?: string  } 
  | { name: 'shortName_not_contains', alias?: string  } 
  | { name: 'shortName_starts_with', alias?: string  } 
  | { name: 'shortName_not_starts_with', alias?: string  } 
  | { name: 'shortName_ends_with', alias?: string  } 
  | { name: 'shortName_not_ends_with', alias?: string  } 
  | { name: 'sortOrder', alias?: string  } 
  | { name: 'sortOrder_not', alias?: string  } 
  | { name: 'sortOrder_in', alias?: string  } 
  | { name: 'sortOrder_not_in', alias?: string  } 
  | { name: 'sortOrder_lt', alias?: string  } 
  | { name: 'sortOrder_lte', alias?: string  } 
  | { name: 'sortOrder_gt', alias?: string  } 
  | { name: 'sortOrder_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FixtureWhereUniqueInput {
  id?: string | null
}
export type FixtureWhereUniqueInputInputObject =
  | Extract<keyof FixtureWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FixtureWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  subTournament?: SubTournamentWhereInput | null
  status?: StatusWhereInput | null
  dateTime?: string | null
  dateTime_not?: string | null
  dateTime_in?: string[]
  dateTime_not_in?: string[]
  dateTime_lt?: string | null
  dateTime_lte?: string | null
  dateTime_gt?: string | null
  dateTime_gte?: string | null
  homeTeam?: TeamWhereInput | null
  awayTeam?: TeamWhereInput | null
  round?: RoundWhereInput | null
  homeTeamParentFixture?: FixtureWhereInput | null
  awayTeamParentFixture?: FixtureWhereInput | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: FixtureWhereInput[]
  OR?: FixtureWhereInput[]
  NOT?: FixtureWhereInput[]
}
export type FixtureWhereInputInputObject =
  | Extract<keyof FixtureWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'subTournament', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'dateTime', alias?: string  } 
  | { name: 'dateTime_not', alias?: string  } 
  | { name: 'dateTime_in', alias?: string  } 
  | { name: 'dateTime_not_in', alias?: string  } 
  | { name: 'dateTime_lt', alias?: string  } 
  | { name: 'dateTime_lte', alias?: string  } 
  | { name: 'dateTime_gt', alias?: string  } 
  | { name: 'dateTime_gte', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'round', alias?: string  } 
  | { name: 'homeTeamParentFixture', alias?: string  } 
  | { name: 'awayTeamParentFixture', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FootballScoreWhereUniqueInput {
  id?: string | null
}
export type FootballScoreWhereUniqueInputInputObject =
  | Extract<keyof FootballScoreWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FootballScoreWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  homeTeamFTScore?: number | null
  homeTeamFTScore_not?: number | null
  homeTeamFTScore_in?: number[]
  homeTeamFTScore_not_in?: number[]
  homeTeamFTScore_lt?: number | null
  homeTeamFTScore_lte?: number | null
  homeTeamFTScore_gt?: number | null
  homeTeamFTScore_gte?: number | null
  awayTeamFTScore?: number | null
  awayTeamFTScore_not?: number | null
  awayTeamFTScore_in?: number[]
  awayTeamFTScore_not_in?: number[]
  awayTeamFTScore_lt?: number | null
  awayTeamFTScore_lte?: number | null
  awayTeamFTScore_gt?: number | null
  awayTeamFTScore_gte?: number | null
  homeTeamAetScore?: number | null
  homeTeamAetScore_not?: number | null
  homeTeamAetScore_in?: number[]
  homeTeamAetScore_not_in?: number[]
  homeTeamAetScore_lt?: number | null
  homeTeamAetScore_lte?: number | null
  homeTeamAetScore_gt?: number | null
  homeTeamAetScore_gte?: number | null
  awayTeamAetScore?: number | null
  awayTeamAetScore_not?: number | null
  awayTeamAetScore_in?: number[]
  awayTeamAetScore_not_in?: number[]
  awayTeamAetScore_lt?: number | null
  awayTeamAetScore_lte?: number | null
  awayTeamAetScore_gt?: number | null
  awayTeamAetScore_gte?: number | null
  homeTeamPenaltyScore?: number | null
  homeTeamPenaltyScore_not?: number | null
  homeTeamPenaltyScore_in?: number[]
  homeTeamPenaltyScore_not_in?: number[]
  homeTeamPenaltyScore_lt?: number | null
  homeTeamPenaltyScore_lte?: number | null
  homeTeamPenaltyScore_gt?: number | null
  homeTeamPenaltyScore_gte?: number | null
  awayTeamPenaltyScore?: number | null
  awayTeamPenaltyScore_not?: number | null
  awayTeamPenaltyScore_in?: number[]
  awayTeamPenaltyScore_not_in?: number[]
  awayTeamPenaltyScore_lt?: number | null
  awayTeamPenaltyScore_lte?: number | null
  awayTeamPenaltyScore_gt?: number | null
  awayTeamPenaltyScore_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: FootballScoreWhereInput[]
  OR?: FootballScoreWhereInput[]
  NOT?: FootballScoreWhereInput[]
}
export type FootballScoreWhereInputInputObject =
  | Extract<keyof FootballScoreWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamFTScore', alias?: string  } 
  | { name: 'homeTeamFTScore_not', alias?: string  } 
  | { name: 'homeTeamFTScore_in', alias?: string  } 
  | { name: 'homeTeamFTScore_not_in', alias?: string  } 
  | { name: 'homeTeamFTScore_lt', alias?: string  } 
  | { name: 'homeTeamFTScore_lte', alias?: string  } 
  | { name: 'homeTeamFTScore_gt', alias?: string  } 
  | { name: 'homeTeamFTScore_gte', alias?: string  } 
  | { name: 'awayTeamFTScore', alias?: string  } 
  | { name: 'awayTeamFTScore_not', alias?: string  } 
  | { name: 'awayTeamFTScore_in', alias?: string  } 
  | { name: 'awayTeamFTScore_not_in', alias?: string  } 
  | { name: 'awayTeamFTScore_lt', alias?: string  } 
  | { name: 'awayTeamFTScore_lte', alias?: string  } 
  | { name: 'awayTeamFTScore_gt', alias?: string  } 
  | { name: 'awayTeamFTScore_gte', alias?: string  } 
  | { name: 'homeTeamAetScore', alias?: string  } 
  | { name: 'homeTeamAetScore_not', alias?: string  } 
  | { name: 'homeTeamAetScore_in', alias?: string  } 
  | { name: 'homeTeamAetScore_not_in', alias?: string  } 
  | { name: 'homeTeamAetScore_lt', alias?: string  } 
  | { name: 'homeTeamAetScore_lte', alias?: string  } 
  | { name: 'homeTeamAetScore_gt', alias?: string  } 
  | { name: 'homeTeamAetScore_gte', alias?: string  } 
  | { name: 'awayTeamAetScore', alias?: string  } 
  | { name: 'awayTeamAetScore_not', alias?: string  } 
  | { name: 'awayTeamAetScore_in', alias?: string  } 
  | { name: 'awayTeamAetScore_not_in', alias?: string  } 
  | { name: 'awayTeamAetScore_lt', alias?: string  } 
  | { name: 'awayTeamAetScore_lte', alias?: string  } 
  | { name: 'awayTeamAetScore_gt', alias?: string  } 
  | { name: 'awayTeamAetScore_gte', alias?: string  } 
  | { name: 'homeTeamPenaltyScore', alias?: string  } 
  | { name: 'homeTeamPenaltyScore_not', alias?: string  } 
  | { name: 'homeTeamPenaltyScore_in', alias?: string  } 
  | { name: 'homeTeamPenaltyScore_not_in', alias?: string  } 
  | { name: 'homeTeamPenaltyScore_lt', alias?: string  } 
  | { name: 'homeTeamPenaltyScore_lte', alias?: string  } 
  | { name: 'homeTeamPenaltyScore_gt', alias?: string  } 
  | { name: 'homeTeamPenaltyScore_gte', alias?: string  } 
  | { name: 'awayTeamPenaltyScore', alias?: string  } 
  | { name: 'awayTeamPenaltyScore_not', alias?: string  } 
  | { name: 'awayTeamPenaltyScore_in', alias?: string  } 
  | { name: 'awayTeamPenaltyScore_not_in', alias?: string  } 
  | { name: 'awayTeamPenaltyScore_lt', alias?: string  } 
  | { name: 'awayTeamPenaltyScore_lte', alias?: string  } 
  | { name: 'awayTeamPenaltyScore_gt', alias?: string  } 
  | { name: 'awayTeamPenaltyScore_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FootballScoreActivityWhereUniqueInput {
  id?: string | null
}
export type FootballScoreActivityWhereUniqueInputInputObject =
  | Extract<keyof FootballScoreActivityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface FootballScoreActivityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  teamPlayer?: TeamPlayerWhereInput | null
  activityType?: prisma.FootballActivityType | null
  activityType_not?: prisma.FootballActivityType | null
  activityType_in?: prisma.FootballActivityType[]
  activityType_not_in?: prisma.FootballActivityType[]
  assistedBy?: TeamPlayerWhereInput | null
  activityTime?: string | null
  activityTime_not?: string | null
  activityTime_in?: string[]
  activityTime_not_in?: string[]
  activityTime_lt?: string | null
  activityTime_lte?: string | null
  activityTime_gt?: string | null
  activityTime_gte?: string | null
  activityTime_contains?: string | null
  activityTime_not_contains?: string | null
  activityTime_starts_with?: string | null
  activityTime_not_starts_with?: string | null
  activityTime_ends_with?: string | null
  activityTime_not_ends_with?: string | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: FootballScoreActivityWhereInput[]
  OR?: FootballScoreActivityWhereInput[]
  NOT?: FootballScoreActivityWhereInput[]
}
export type FootballScoreActivityWhereInputInputObject =
  | Extract<keyof FootballScoreActivityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'teamPlayer', alias?: string  } 
  | { name: 'activityType', alias?: string  } 
  | { name: 'activityType_not', alias?: string  } 
  | { name: 'activityType_in', alias?: string  } 
  | { name: 'activityType_not_in', alias?: string  } 
  | { name: 'assistedBy', alias?: string  } 
  | { name: 'activityTime', alias?: string  } 
  | { name: 'activityTime_not', alias?: string  } 
  | { name: 'activityTime_in', alias?: string  } 
  | { name: 'activityTime_not_in', alias?: string  } 
  | { name: 'activityTime_lt', alias?: string  } 
  | { name: 'activityTime_lte', alias?: string  } 
  | { name: 'activityTime_gt', alias?: string  } 
  | { name: 'activityTime_gte', alias?: string  } 
  | { name: 'activityTime_contains', alias?: string  } 
  | { name: 'activityTime_not_contains', alias?: string  } 
  | { name: 'activityTime_starts_with', alias?: string  } 
  | { name: 'activityTime_not_starts_with', alias?: string  } 
  | { name: 'activityTime_ends_with', alias?: string  } 
  | { name: 'activityTime_not_ends_with', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ChessScoreWhereUniqueInput {
  id?: string | null
}
export type ChessScoreWhereUniqueInputInputObject =
  | Extract<keyof ChessScoreWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface ChessScoreWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  winnerTeam?: TeamWhereInput | null
  winningMethod?: prisma.ChessWinningMethod | null
  winningMethod_not?: prisma.ChessWinningMethod | null
  winningMethod_in?: prisma.ChessWinningMethod[]
  winningMethod_not_in?: prisma.ChessWinningMethod[]
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: ChessScoreWhereInput[]
  OR?: ChessScoreWhereInput[]
  NOT?: ChessScoreWhereInput[]
}
export type ChessScoreWhereInputInputObject =
  | Extract<keyof ChessScoreWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'winningMethod', alias?: string  } 
  | { name: 'winningMethod_not', alias?: string  } 
  | { name: 'winningMethod_in', alias?: string  } 
  | { name: 'winningMethod_not_in', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CarromBoardScoreWhereUniqueInput {
  id?: string | null
}
export type CarromBoardScoreWhereUniqueInputInputObject =
  | Extract<keyof CarromBoardScoreWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CarromBoardScoreWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  homeTeamScore?: number | null
  homeTeamScore_not?: number | null
  homeTeamScore_in?: number[]
  homeTeamScore_not_in?: number[]
  homeTeamScore_lt?: number | null
  homeTeamScore_lte?: number | null
  homeTeamScore_gt?: number | null
  homeTeamScore_gte?: number | null
  awayTeamScore?: number | null
  awayTeamScore_not?: number | null
  awayTeamScore_in?: number[]
  awayTeamScore_not_in?: number[]
  awayTeamScore_lt?: number | null
  awayTeamScore_lte?: number | null
  awayTeamScore_gt?: number | null
  awayTeamScore_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CarromBoardScoreWhereInput[]
  OR?: CarromBoardScoreWhereInput[]
  NOT?: CarromBoardScoreWhereInput[]
}
export type CarromBoardScoreWhereInputInputObject =
  | Extract<keyof CarromBoardScoreWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'homeTeamScore_not', alias?: string  } 
  | { name: 'homeTeamScore_in', alias?: string  } 
  | { name: 'homeTeamScore_not_in', alias?: string  } 
  | { name: 'homeTeamScore_lt', alias?: string  } 
  | { name: 'homeTeamScore_lte', alias?: string  } 
  | { name: 'homeTeamScore_gt', alias?: string  } 
  | { name: 'homeTeamScore_gte', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'awayTeamScore_not', alias?: string  } 
  | { name: 'awayTeamScore_in', alias?: string  } 
  | { name: 'awayTeamScore_not_in', alias?: string  } 
  | { name: 'awayTeamScore_lt', alias?: string  } 
  | { name: 'awayTeamScore_lte', alias?: string  } 
  | { name: 'awayTeamScore_gt', alias?: string  } 
  | { name: 'awayTeamScore_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CarromBoardScoreActivityWhereUniqueInput {
  id?: string | null
}
export type CarromBoardScoreActivityWhereUniqueInputInputObject =
  | Extract<keyof CarromBoardScoreActivityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CarromBoardScoreActivityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  team?: TeamWhereInput | null
  points?: number | null
  points_not?: number | null
  points_in?: number[]
  points_not_in?: number[]
  points_lt?: number | null
  points_lte?: number | null
  points_gt?: number | null
  points_gte?: number | null
  order?: number | null
  order_not?: number | null
  order_in?: number[]
  order_not_in?: number[]
  order_lt?: number | null
  order_lte?: number | null
  order_gt?: number | null
  order_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CarromBoardScoreActivityWhereInput[]
  OR?: CarromBoardScoreActivityWhereInput[]
  NOT?: CarromBoardScoreActivityWhereInput[]
}
export type CarromBoardScoreActivityWhereInputInputObject =
  | Extract<keyof CarromBoardScoreActivityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'points', alias?: string  } 
  | { name: 'points_not', alias?: string  } 
  | { name: 'points_in', alias?: string  } 
  | { name: 'points_not_in', alias?: string  } 
  | { name: 'points_lt', alias?: string  } 
  | { name: 'points_lte', alias?: string  } 
  | { name: 'points_gt', alias?: string  } 
  | { name: 'points_gte', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'order_not', alias?: string  } 
  | { name: 'order_in', alias?: string  } 
  | { name: 'order_not_in', alias?: string  } 
  | { name: 'order_lt', alias?: string  } 
  | { name: 'order_lte', alias?: string  } 
  | { name: 'order_gt', alias?: string  } 
  | { name: 'order_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TableTennisScoreWhereUniqueInput {
  id?: string | null
}
export type TableTennisScoreWhereUniqueInputInputObject =
  | Extract<keyof TableTennisScoreWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TableTennisScoreWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  homeTeamScore?: number | null
  homeTeamScore_not?: number | null
  homeTeamScore_in?: number[]
  homeTeamScore_not_in?: number[]
  homeTeamScore_lt?: number | null
  homeTeamScore_lte?: number | null
  homeTeamScore_gt?: number | null
  homeTeamScore_gte?: number | null
  awayTeamScore?: number | null
  awayTeamScore_not?: number | null
  awayTeamScore_in?: number[]
  awayTeamScore_not_in?: number[]
  awayTeamScore_lt?: number | null
  awayTeamScore_lte?: number | null
  awayTeamScore_gt?: number | null
  awayTeamScore_gte?: number | null
  setsCount?: number | null
  setsCount_not?: number | null
  setsCount_in?: number[]
  setsCount_not_in?: number[]
  setsCount_lt?: number | null
  setsCount_lte?: number | null
  setsCount_gt?: number | null
  setsCount_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TableTennisScoreWhereInput[]
  OR?: TableTennisScoreWhereInput[]
  NOT?: TableTennisScoreWhereInput[]
}
export type TableTennisScoreWhereInputInputObject =
  | Extract<keyof TableTennisScoreWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'homeTeamScore_not', alias?: string  } 
  | { name: 'homeTeamScore_in', alias?: string  } 
  | { name: 'homeTeamScore_not_in', alias?: string  } 
  | { name: 'homeTeamScore_lt', alias?: string  } 
  | { name: 'homeTeamScore_lte', alias?: string  } 
  | { name: 'homeTeamScore_gt', alias?: string  } 
  | { name: 'homeTeamScore_gte', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'awayTeamScore_not', alias?: string  } 
  | { name: 'awayTeamScore_in', alias?: string  } 
  | { name: 'awayTeamScore_not_in', alias?: string  } 
  | { name: 'awayTeamScore_lt', alias?: string  } 
  | { name: 'awayTeamScore_lte', alias?: string  } 
  | { name: 'awayTeamScore_gt', alias?: string  } 
  | { name: 'awayTeamScore_gte', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'setsCount_not', alias?: string  } 
  | { name: 'setsCount_in', alias?: string  } 
  | { name: 'setsCount_not_in', alias?: string  } 
  | { name: 'setsCount_lt', alias?: string  } 
  | { name: 'setsCount_lte', alias?: string  } 
  | { name: 'setsCount_gt', alias?: string  } 
  | { name: 'setsCount_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TableTennisScoreActivityWhereUniqueInput {
  id?: string | null
}
export type TableTennisScoreActivityWhereUniqueInputInputObject =
  | Extract<keyof TableTennisScoreActivityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface TableTennisScoreActivityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  set?: number | null
  set_not?: number | null
  set_in?: number[]
  set_not_in?: number[]
  set_lt?: number | null
  set_lte?: number | null
  set_gt?: number | null
  set_gte?: number | null
  homeTeamPoints?: number | null
  homeTeamPoints_not?: number | null
  homeTeamPoints_in?: number[]
  homeTeamPoints_not_in?: number[]
  homeTeamPoints_lt?: number | null
  homeTeamPoints_lte?: number | null
  homeTeamPoints_gt?: number | null
  homeTeamPoints_gte?: number | null
  awayTeamPoints?: number | null
  awayTeamPoints_not?: number | null
  awayTeamPoints_in?: number[]
  awayTeamPoints_not_in?: number[]
  awayTeamPoints_lt?: number | null
  awayTeamPoints_lte?: number | null
  awayTeamPoints_gt?: number | null
  awayTeamPoints_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: TableTennisScoreActivityWhereInput[]
  OR?: TableTennisScoreActivityWhereInput[]
  NOT?: TableTennisScoreActivityWhereInput[]
}
export type TableTennisScoreActivityWhereInputInputObject =
  | Extract<keyof TableTennisScoreActivityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'set_not', alias?: string  } 
  | { name: 'set_in', alias?: string  } 
  | { name: 'set_not_in', alias?: string  } 
  | { name: 'set_lt', alias?: string  } 
  | { name: 'set_lte', alias?: string  } 
  | { name: 'set_gt', alias?: string  } 
  | { name: 'set_gte', alias?: string  } 
  | { name: 'homeTeamPoints', alias?: string  } 
  | { name: 'homeTeamPoints_not', alias?: string  } 
  | { name: 'homeTeamPoints_in', alias?: string  } 
  | { name: 'homeTeamPoints_not_in', alias?: string  } 
  | { name: 'homeTeamPoints_lt', alias?: string  } 
  | { name: 'homeTeamPoints_lte', alias?: string  } 
  | { name: 'homeTeamPoints_gt', alias?: string  } 
  | { name: 'homeTeamPoints_gte', alias?: string  } 
  | { name: 'awayTeamPoints', alias?: string  } 
  | { name: 'awayTeamPoints_not', alias?: string  } 
  | { name: 'awayTeamPoints_in', alias?: string  } 
  | { name: 'awayTeamPoints_not_in', alias?: string  } 
  | { name: 'awayTeamPoints_lt', alias?: string  } 
  | { name: 'awayTeamPoints_lte', alias?: string  } 
  | { name: 'awayTeamPoints_gt', alias?: string  } 
  | { name: 'awayTeamPoints_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CounterStrikeFScoreWhereUniqueInput {
  id?: string | null
}
export type CounterStrikeFScoreWhereUniqueInputInputObject =
  | Extract<keyof CounterStrikeFScoreWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CounterStrikeFScoreWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  homeTeamScore?: number | null
  homeTeamScore_not?: number | null
  homeTeamScore_in?: number[]
  homeTeamScore_not_in?: number[]
  homeTeamScore_lt?: number | null
  homeTeamScore_lte?: number | null
  homeTeamScore_gt?: number | null
  homeTeamScore_gte?: number | null
  awayTeamScore?: number | null
  awayTeamScore_not?: number | null
  awayTeamScore_in?: number[]
  awayTeamScore_not_in?: number[]
  awayTeamScore_lt?: number | null
  awayTeamScore_lte?: number | null
  awayTeamScore_gt?: number | null
  awayTeamScore_gte?: number | null
  setsCount?: number | null
  setsCount_not?: number | null
  setsCount_in?: number[]
  setsCount_not_in?: number[]
  setsCount_lt?: number | null
  setsCount_lte?: number | null
  setsCount_gt?: number | null
  setsCount_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CounterStrikeFScoreWhereInput[]
  OR?: CounterStrikeFScoreWhereInput[]
  NOT?: CounterStrikeFScoreWhereInput[]
}
export type CounterStrikeFScoreWhereInputInputObject =
  | Extract<keyof CounterStrikeFScoreWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'homeTeamScore_not', alias?: string  } 
  | { name: 'homeTeamScore_in', alias?: string  } 
  | { name: 'homeTeamScore_not_in', alias?: string  } 
  | { name: 'homeTeamScore_lt', alias?: string  } 
  | { name: 'homeTeamScore_lte', alias?: string  } 
  | { name: 'homeTeamScore_gt', alias?: string  } 
  | { name: 'homeTeamScore_gte', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'awayTeamScore_not', alias?: string  } 
  | { name: 'awayTeamScore_in', alias?: string  } 
  | { name: 'awayTeamScore_not_in', alias?: string  } 
  | { name: 'awayTeamScore_lt', alias?: string  } 
  | { name: 'awayTeamScore_lte', alias?: string  } 
  | { name: 'awayTeamScore_gt', alias?: string  } 
  | { name: 'awayTeamScore_gte', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'setsCount_not', alias?: string  } 
  | { name: 'setsCount_in', alias?: string  } 
  | { name: 'setsCount_not_in', alias?: string  } 
  | { name: 'setsCount_lt', alias?: string  } 
  | { name: 'setsCount_lte', alias?: string  } 
  | { name: 'setsCount_gt', alias?: string  } 
  | { name: 'setsCount_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CounterStrikeScoreSetWhereUniqueInput {
  id?: string | null
}
export type CounterStrikeScoreSetWhereUniqueInputInputObject =
  | Extract<keyof CounterStrikeScoreSetWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CounterStrikeScoreSetWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  set?: number | null
  set_not?: number | null
  set_in?: number[]
  set_not_in?: number[]
  set_lt?: number | null
  set_lte?: number | null
  set_gt?: number | null
  set_gte?: number | null
  homeTeamScore?: number | null
  homeTeamScore_not?: number | null
  homeTeamScore_in?: number[]
  homeTeamScore_not_in?: number[]
  homeTeamScore_lt?: number | null
  homeTeamScore_lte?: number | null
  homeTeamScore_gt?: number | null
  homeTeamScore_gte?: number | null
  awayTeamScore?: number | null
  awayTeamScore_not?: number | null
  awayTeamScore_in?: number[]
  awayTeamScore_not_in?: number[]
  awayTeamScore_lt?: number | null
  awayTeamScore_lte?: number | null
  awayTeamScore_gt?: number | null
  awayTeamScore_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CounterStrikeScoreSetWhereInput[]
  OR?: CounterStrikeScoreSetWhereInput[]
  NOT?: CounterStrikeScoreSetWhereInput[]
}
export type CounterStrikeScoreSetWhereInputInputObject =
  | Extract<keyof CounterStrikeScoreSetWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'set_not', alias?: string  } 
  | { name: 'set_in', alias?: string  } 
  | { name: 'set_not_in', alias?: string  } 
  | { name: 'set_lt', alias?: string  } 
  | { name: 'set_lte', alias?: string  } 
  | { name: 'set_gt', alias?: string  } 
  | { name: 'set_gte', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'homeTeamScore_not', alias?: string  } 
  | { name: 'homeTeamScore_in', alias?: string  } 
  | { name: 'homeTeamScore_not_in', alias?: string  } 
  | { name: 'homeTeamScore_lt', alias?: string  } 
  | { name: 'homeTeamScore_lte', alias?: string  } 
  | { name: 'homeTeamScore_gt', alias?: string  } 
  | { name: 'homeTeamScore_gte', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'awayTeamScore_not', alias?: string  } 
  | { name: 'awayTeamScore_in', alias?: string  } 
  | { name: 'awayTeamScore_not_in', alias?: string  } 
  | { name: 'awayTeamScore_lt', alias?: string  } 
  | { name: 'awayTeamScore_lte', alias?: string  } 
  | { name: 'awayTeamScore_gt', alias?: string  } 
  | { name: 'awayTeamScore_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CounterStrikeScoreSetActivityWhereUniqueInput {
  id?: string | null
}
export type CounterStrikeScoreSetActivityWhereUniqueInputInputObject =
  | Extract<keyof CounterStrikeScoreSetActivityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface CounterStrikeScoreSetActivityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  set?: CounterStrikeScoreSetWhereInput | null
  teamPlayer?: TeamPlayerWhereInput | null
  kills?: number | null
  kills_not?: number | null
  kills_in?: number[]
  kills_not_in?: number[]
  kills_lt?: number | null
  kills_lte?: number | null
  kills_gt?: number | null
  kills_gte?: number | null
  deaths?: number | null
  deaths_not?: number | null
  deaths_in?: number[]
  deaths_not_in?: number[]
  deaths_lt?: number | null
  deaths_lte?: number | null
  deaths_gt?: number | null
  deaths_gte?: number | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: CounterStrikeScoreSetActivityWhereInput[]
  OR?: CounterStrikeScoreSetActivityWhereInput[]
  NOT?: CounterStrikeScoreSetActivityWhereInput[]
}
export type CounterStrikeScoreSetActivityWhereInputInputObject =
  | Extract<keyof CounterStrikeScoreSetActivityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'teamPlayer', alias?: string  } 
  | { name: 'kills', alias?: string  } 
  | { name: 'kills_not', alias?: string  } 
  | { name: 'kills_in', alias?: string  } 
  | { name: 'kills_not_in', alias?: string  } 
  | { name: 'kills_lt', alias?: string  } 
  | { name: 'kills_lte', alias?: string  } 
  | { name: 'kills_gt', alias?: string  } 
  | { name: 'kills_gte', alias?: string  } 
  | { name: 'deaths', alias?: string  } 
  | { name: 'deaths_not', alias?: string  } 
  | { name: 'deaths_in', alias?: string  } 
  | { name: 'deaths_not_in', alias?: string  } 
  | { name: 'deaths_lt', alias?: string  } 
  | { name: 'deaths_lte', alias?: string  } 
  | { name: 'deaths_gt', alias?: string  } 
  | { name: 'deaths_gte', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DotaScoreWhereUniqueInput {
  id?: string | null
}
export type DotaScoreWhereUniqueInputInputObject =
  | Extract<keyof DotaScoreWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DotaScoreWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  setsCount?: number | null
  setsCount_not?: number | null
  setsCount_in?: number[]
  setsCount_not_in?: number[]
  setsCount_lt?: number | null
  setsCount_lte?: number | null
  setsCount_gt?: number | null
  setsCount_gte?: number | null
  winnerTeam?: TeamWhereInput | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: DotaScoreWhereInput[]
  OR?: DotaScoreWhereInput[]
  NOT?: DotaScoreWhereInput[]
}
export type DotaScoreWhereInputInputObject =
  | Extract<keyof DotaScoreWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'setsCount_not', alias?: string  } 
  | { name: 'setsCount_in', alias?: string  } 
  | { name: 'setsCount_not_in', alias?: string  } 
  | { name: 'setsCount_lt', alias?: string  } 
  | { name: 'setsCount_lte', alias?: string  } 
  | { name: 'setsCount_gt', alias?: string  } 
  | { name: 'setsCount_gte', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DotaScoreActivityWhereUniqueInput {
  id?: string | null
}
export type DotaScoreActivityWhereUniqueInputInputObject =
  | Extract<keyof DotaScoreActivityWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DotaScoreActivityWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  fixture?: FixtureWhereInput | null
  set?: number | null
  set_not?: number | null
  set_in?: number[]
  set_not_in?: number[]
  set_lt?: number | null
  set_lte?: number | null
  set_gt?: number | null
  set_gte?: number | null
  winnerTeam?: TeamWhereInput | null
  updatedBy?: UserAccountWhereInput | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  AND?: DotaScoreActivityWhereInput[]
  OR?: DotaScoreActivityWhereInput[]
  NOT?: DotaScoreActivityWhereInput[]
}
export type DotaScoreActivityWhereInputInputObject =
  | Extract<keyof DotaScoreActivityWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'set_not', alias?: string  } 
  | { name: 'set_in', alias?: string  } 
  | { name: 'set_not_in', alias?: string  } 
  | { name: 'set_lt', alias?: string  } 
  | { name: 'set_lte', alias?: string  } 
  | { name: 'set_gt', alias?: string  } 
  | { name: 'set_gte', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface EmployeeCreateInput {
  firstName?: string
  middleName?: string | null
  lastName?: string
  profilePictureUrl?: string | null
  lmsEmpId?: number | null
}
export type EmployeeCreateInputInputObject =
  | Extract<keyof EmployeeCreateInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'profilePictureUrl', alias?: string  } 
  | { name: 'lmsEmpId', alias?: string  } 
  
export interface EmployeeUpdateInput {
  firstName?: string | null
  middleName?: string | null
  lastName?: string | null
  profilePictureUrl?: string | null
  lmsEmpId?: number | null
}
export type EmployeeUpdateInputInputObject =
  | Extract<keyof EmployeeUpdateInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'profilePictureUrl', alias?: string  } 
  | { name: 'lmsEmpId', alias?: string  } 
  
export interface EmployeeUpdateManyMutationInput {
  firstName?: string | null
  middleName?: string | null
  lastName?: string | null
  profilePictureUrl?: string | null
  lmsEmpId?: number | null
}
export type EmployeeUpdateManyMutationInputInputObject =
  | Extract<keyof EmployeeUpdateManyMutationInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'profilePictureUrl', alias?: string  } 
  | { name: 'lmsEmpId', alias?: string  } 
  
export interface UserAccountCreateInput {
  employeeId?: EmployeeCreateOneInput
  isActive?: boolean
  password?: string
  userRole?: prisma.UserRole
}
export type UserAccountCreateInputInputObject =
  | Extract<keyof UserAccountCreateInput, string>
  | { name: 'employeeId', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'userRole', alias?: string  } 
  
export interface EmployeeCreateOneInput {
  create?: EmployeeCreateInput | null
  connect?: EmployeeWhereUniqueInput | null
}
export type EmployeeCreateOneInputInputObject =
  | Extract<keyof EmployeeCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserAccountUpdateInput {
  employeeId?: EmployeeUpdateOneRequiredInput | null
  isActive?: boolean | null
  password?: string | null
  userRole?: prisma.UserRole | null
}
export type UserAccountUpdateInputInputObject =
  | Extract<keyof UserAccountUpdateInput, string>
  | { name: 'employeeId', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'userRole', alias?: string  } 
  
export interface EmployeeUpdateOneRequiredInput {
  create?: EmployeeCreateInput | null
  update?: EmployeeUpdateDataInput | null
  upsert?: EmployeeUpsertNestedInput | null
  connect?: EmployeeWhereUniqueInput | null
}
export type EmployeeUpdateOneRequiredInputInputObject =
  | Extract<keyof EmployeeUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface EmployeeUpdateDataInput {
  firstName?: string | null
  middleName?: string | null
  lastName?: string | null
  profilePictureUrl?: string | null
  lmsEmpId?: number | null
}
export type EmployeeUpdateDataInputInputObject =
  | Extract<keyof EmployeeUpdateDataInput, string>
  | { name: 'firstName', alias?: string  } 
  | { name: 'middleName', alias?: string  } 
  | { name: 'lastName', alias?: string  } 
  | { name: 'profilePictureUrl', alias?: string  } 
  | { name: 'lmsEmpId', alias?: string  } 
  
export interface EmployeeUpsertNestedInput {
  update?: EmployeeUpdateDataInput
  create?: EmployeeCreateInput
}
export type EmployeeUpsertNestedInputInputObject =
  | Extract<keyof EmployeeUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserAccountUpdateManyMutationInput {
  isActive?: boolean | null
  password?: string | null
  userRole?: prisma.UserRole | null
}
export type UserAccountUpdateManyMutationInputInputObject =
  | Extract<keyof UserAccountUpdateManyMutationInput, string>
  | { name: 'isActive', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'userRole', alias?: string  } 
  
export interface UserAccountTokenCreateInput {
  user?: UserAccountCreateOneInput
  refreshToken?: string | null
}
export type UserAccountTokenCreateInputInputObject =
  | Extract<keyof UserAccountTokenCreateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'refreshToken', alias?: string  } 
  
export interface UserAccountCreateOneInput {
  create?: UserAccountCreateInput | null
  connect?: UserAccountWhereUniqueInput | null
}
export type UserAccountCreateOneInputInputObject =
  | Extract<keyof UserAccountCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserAccountTokenUpdateInput {
  user?: UserAccountUpdateOneRequiredInput | null
  refreshToken?: string | null
}
export type UserAccountTokenUpdateInputInputObject =
  | Extract<keyof UserAccountTokenUpdateInput, string>
  | { name: 'user', alias?: string  } 
  | { name: 'refreshToken', alias?: string  } 
  
export interface UserAccountUpdateOneRequiredInput {
  create?: UserAccountCreateInput | null
  update?: UserAccountUpdateDataInput | null
  upsert?: UserAccountUpsertNestedInput | null
  connect?: UserAccountWhereUniqueInput | null
}
export type UserAccountUpdateOneRequiredInputInputObject =
  | Extract<keyof UserAccountUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface UserAccountUpdateDataInput {
  employeeId?: EmployeeUpdateOneRequiredInput | null
  isActive?: boolean | null
  password?: string | null
  userRole?: prisma.UserRole | null
}
export type UserAccountUpdateDataInputInputObject =
  | Extract<keyof UserAccountUpdateDataInput, string>
  | { name: 'employeeId', alias?: string  } 
  | { name: 'isActive', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'userRole', alias?: string  } 
  
export interface UserAccountUpsertNestedInput {
  update?: UserAccountUpdateDataInput
  create?: UserAccountCreateInput
}
export type UserAccountUpsertNestedInputInputObject =
  | Extract<keyof UserAccountUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface UserAccountTokenUpdateManyMutationInput {
  refreshToken?: string | null
}
export type UserAccountTokenUpdateManyMutationInputInputObject =
  | Extract<keyof UserAccountTokenUpdateManyMutationInput, string>
  | { name: 'refreshToken', alias?: string  } 
  
export interface GameCreateInput {
  name?: string
  shortName?: string
  updatedBy?: UserAccountCreateOneInput
}
export type GameCreateInputInputObject =
  | Extract<keyof GameCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface GameUpdateInput {
  name?: string | null
  shortName?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type GameUpdateInputInputObject =
  | Extract<keyof GameUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface GameUpdateManyMutationInput {
  name?: string | null
  shortName?: string | null
}
export type GameUpdateManyMutationInputInputObject =
  | Extract<keyof GameUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  
export interface TournamentCreateInput {
  game?: GameCreateOneInput
  season?: string
  startDate?: string
  finishDate?: string | null
  updatedBy?: UserAccountCreateOneInput
}
export type TournamentCreateInputInputObject =
  | Extract<keyof TournamentCreateInput, string>
  | { name: 'game', alias?: string  } 
  | { name: 'season', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'finishDate', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface GameCreateOneInput {
  create?: GameCreateInput | null
  connect?: GameWhereUniqueInput | null
}
export type GameCreateOneInputInputObject =
  | Extract<keyof GameCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TournamentUpdateInput {
  game?: GameUpdateOneRequiredInput | null
  season?: string | null
  startDate?: string | null
  finishDate?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type TournamentUpdateInputInputObject =
  | Extract<keyof TournamentUpdateInput, string>
  | { name: 'game', alias?: string  } 
  | { name: 'season', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'finishDate', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface GameUpdateOneRequiredInput {
  create?: GameCreateInput | null
  update?: GameUpdateDataInput | null
  upsert?: GameUpsertNestedInput | null
  connect?: GameWhereUniqueInput | null
}
export type GameUpdateOneRequiredInputInputObject =
  | Extract<keyof GameUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface GameUpdateDataInput {
  name?: string | null
  shortName?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type GameUpdateDataInputInputObject =
  | Extract<keyof GameUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface GameUpsertNestedInput {
  update?: GameUpdateDataInput
  create?: GameCreateInput
}
export type GameUpsertNestedInputInputObject =
  | Extract<keyof GameUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TournamentUpdateManyMutationInput {
  season?: string | null
  startDate?: string | null
  finishDate?: string | null
}
export type TournamentUpdateManyMutationInputInputObject =
  | Extract<keyof TournamentUpdateManyMutationInput, string>
  | { name: 'season', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'finishDate', alias?: string  } 
  
export interface CategoryCreateInput {
  name?: string
  updatedBy?: UserAccountCreateOneInput
}
export type CategoryCreateInputInputObject =
  | Extract<keyof CategoryCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CategoryUpdateInput {
  name?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type CategoryUpdateInputInputObject =
  | Extract<keyof CategoryUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CategoryUpdateManyMutationInput {
  name?: string | null
}
export type CategoryUpdateManyMutationInputInputObject =
  | Extract<keyof CategoryUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface SubTournamentCreateInput {
  tournament?: TournamentCreateOneInput
  category?: CategoryCreateOneInput
  updatedBy?: UserAccountCreateOneInput
}
export type SubTournamentCreateInputInputObject =
  | Extract<keyof SubTournamentCreateInput, string>
  | { name: 'tournament', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TournamentCreateOneInput {
  create?: TournamentCreateInput | null
  connect?: TournamentWhereUniqueInput | null
}
export type TournamentCreateOneInputInputObject =
  | Extract<keyof TournamentCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryCreateOneInput {
  create?: CategoryCreateInput | null
  connect?: CategoryWhereUniqueInput | null
}
export type CategoryCreateOneInputInputObject =
  | Extract<keyof CategoryCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SubTournamentUpdateInput {
  tournament?: TournamentUpdateOneRequiredInput | null
  category?: CategoryUpdateOneRequiredInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type SubTournamentUpdateInputInputObject =
  | Extract<keyof SubTournamentUpdateInput, string>
  | { name: 'tournament', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TournamentUpdateOneRequiredInput {
  create?: TournamentCreateInput | null
  update?: TournamentUpdateDataInput | null
  upsert?: TournamentUpsertNestedInput | null
  connect?: TournamentWhereUniqueInput | null
}
export type TournamentUpdateOneRequiredInputInputObject =
  | Extract<keyof TournamentUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TournamentUpdateDataInput {
  game?: GameUpdateOneRequiredInput | null
  season?: string | null
  startDate?: string | null
  finishDate?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type TournamentUpdateDataInputInputObject =
  | Extract<keyof TournamentUpdateDataInput, string>
  | { name: 'game', alias?: string  } 
  | { name: 'season', alias?: string  } 
  | { name: 'startDate', alias?: string  } 
  | { name: 'finishDate', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TournamentUpsertNestedInput {
  update?: TournamentUpdateDataInput
  create?: TournamentCreateInput
}
export type TournamentUpsertNestedInputInputObject =
  | Extract<keyof TournamentUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CategoryUpdateOneRequiredInput {
  create?: CategoryCreateInput | null
  update?: CategoryUpdateDataInput | null
  upsert?: CategoryUpsertNestedInput | null
  connect?: CategoryWhereUniqueInput | null
}
export type CategoryUpdateOneRequiredInputInputObject =
  | Extract<keyof CategoryUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CategoryUpdateDataInput {
  name?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type CategoryUpdateDataInputInputObject =
  | Extract<keyof CategoryUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CategoryUpsertNestedInput {
  update?: CategoryUpdateDataInput
  create?: CategoryCreateInput
}
export type CategoryUpsertNestedInputInputObject =
  | Extract<keyof CategoryUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SubTournamentPlayerCreateInput {
  subTournament?: SubTournamentCreateOneInput
  player?: EmployeeCreateOneInput
  position?: string | null
  updatedBy?: UserAccountCreateOneInput
}
export type SubTournamentPlayerCreateInputInputObject =
  | Extract<keyof SubTournamentPlayerCreateInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface SubTournamentCreateOneInput {
  create?: SubTournamentCreateInput | null
  connect?: SubTournamentWhereUniqueInput | null
}
export type SubTournamentCreateOneInputInputObject =
  | Extract<keyof SubTournamentCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SubTournamentPlayerUpdateInput {
  subTournament?: SubTournamentUpdateOneRequiredInput | null
  player?: EmployeeUpdateOneRequiredInput | null
  position?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type SubTournamentPlayerUpdateInputInputObject =
  | Extract<keyof SubTournamentPlayerUpdateInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface SubTournamentUpdateOneRequiredInput {
  create?: SubTournamentCreateInput | null
  update?: SubTournamentUpdateDataInput | null
  upsert?: SubTournamentUpsertNestedInput | null
  connect?: SubTournamentWhereUniqueInput | null
}
export type SubTournamentUpdateOneRequiredInputInputObject =
  | Extract<keyof SubTournamentUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SubTournamentUpdateDataInput {
  tournament?: TournamentUpdateOneRequiredInput | null
  category?: CategoryUpdateOneRequiredInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type SubTournamentUpdateDataInputInputObject =
  | Extract<keyof SubTournamentUpdateDataInput, string>
  | { name: 'tournament', alias?: string  } 
  | { name: 'category', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface SubTournamentUpsertNestedInput {
  update?: SubTournamentUpdateDataInput
  create?: SubTournamentCreateInput
}
export type SubTournamentUpsertNestedInputInputObject =
  | Extract<keyof SubTournamentUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SubTournamentPlayerUpdateManyMutationInput {
  position?: string | null
}
export type SubTournamentPlayerUpdateManyMutationInputInputObject =
  | Extract<keyof SubTournamentPlayerUpdateManyMutationInput, string>
  | { name: 'position', alias?: string  } 
  
export interface TeamCreateInput {
  name?: string
  logoImage?: string | null
  subTournament?: SubTournamentCreateOneInput
  updatedBy?: UserAccountCreateOneInput
}
export type TeamCreateInputInputObject =
  | Extract<keyof TeamCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'logoImage', alias?: string  } 
  | { name: 'subTournament', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TeamUpdateInput {
  name?: string | null
  logoImage?: string | null
  subTournament?: SubTournamentUpdateOneRequiredInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type TeamUpdateInputInputObject =
  | Extract<keyof TeamUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'logoImage', alias?: string  } 
  | { name: 'subTournament', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TeamUpdateManyMutationInput {
  name?: string | null
  logoImage?: string | null
}
export type TeamUpdateManyMutationInputInputObject =
  | Extract<keyof TeamUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'logoImage', alias?: string  } 
  
export interface TeamPlayerCreateInput {
  team?: TeamCreateOneInput
  player?: SubTournamentPlayerCreateOneInput
  isCaptain?: boolean | null
  updatedBy?: UserAccountCreateOneInput
}
export type TeamPlayerCreateInputInputObject =
  | Extract<keyof TeamPlayerCreateInput, string>
  | { name: 'team', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'isCaptain', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TeamCreateOneInput {
  create?: TeamCreateInput | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamCreateOneInputInputObject =
  | Extract<keyof TeamCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SubTournamentPlayerCreateOneInput {
  create?: SubTournamentPlayerCreateInput | null
  connect?: SubTournamentPlayerWhereUniqueInput | null
}
export type SubTournamentPlayerCreateOneInputInputObject =
  | Extract<keyof SubTournamentPlayerCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamPlayerUpdateInput {
  team?: TeamUpdateOneRequiredInput | null
  player?: SubTournamentPlayerUpdateOneRequiredInput | null
  isCaptain?: boolean | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type TeamPlayerUpdateInputInputObject =
  | Extract<keyof TeamPlayerUpdateInput, string>
  | { name: 'team', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'isCaptain', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TeamUpdateOneRequiredInput {
  create?: TeamCreateInput | null
  update?: TeamUpdateDataInput | null
  upsert?: TeamUpsertNestedInput | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamUpdateOneRequiredInputInputObject =
  | Extract<keyof TeamUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamUpdateDataInput {
  name?: string | null
  logoImage?: string | null
  subTournament?: SubTournamentUpdateOneRequiredInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type TeamUpdateDataInputInputObject =
  | Extract<keyof TeamUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'logoImage', alias?: string  } 
  | { name: 'subTournament', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TeamUpsertNestedInput {
  update?: TeamUpdateDataInput
  create?: TeamCreateInput
}
export type TeamUpsertNestedInputInputObject =
  | Extract<keyof TeamUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SubTournamentPlayerUpdateOneRequiredInput {
  create?: SubTournamentPlayerCreateInput | null
  update?: SubTournamentPlayerUpdateDataInput | null
  upsert?: SubTournamentPlayerUpsertNestedInput | null
  connect?: SubTournamentPlayerWhereUniqueInput | null
}
export type SubTournamentPlayerUpdateOneRequiredInputInputObject =
  | Extract<keyof SubTournamentPlayerUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SubTournamentPlayerUpdateDataInput {
  subTournament?: SubTournamentUpdateOneRequiredInput | null
  player?: EmployeeUpdateOneRequiredInput | null
  position?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type SubTournamentPlayerUpdateDataInputInputObject =
  | Extract<keyof SubTournamentPlayerUpdateDataInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'position', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface SubTournamentPlayerUpsertNestedInput {
  update?: SubTournamentPlayerUpdateDataInput
  create?: SubTournamentPlayerCreateInput
}
export type SubTournamentPlayerUpsertNestedInputInputObject =
  | Extract<keyof SubTournamentPlayerUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamPlayerUpdateManyMutationInput {
  isCaptain?: boolean | null
}
export type TeamPlayerUpdateManyMutationInputInputObject =
  | Extract<keyof TeamPlayerUpdateManyMutationInput, string>
  | { name: 'isCaptain', alias?: string  } 
  
export interface StatusCreateInput {
  name?: string
  updatedBy?: UserAccountCreateOneInput
}
export type StatusCreateInputInputObject =
  | Extract<keyof StatusCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface StatusUpdateInput {
  name?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type StatusUpdateInputInputObject =
  | Extract<keyof StatusUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface StatusUpdateManyMutationInput {
  name?: string | null
}
export type StatusUpdateManyMutationInputInputObject =
  | Extract<keyof StatusUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  
export interface RoundCreateInput {
  name?: string
  shortName?: string
  sortOrder?: number
  updatedBy?: UserAccountCreateOneInput
}
export type RoundCreateInputInputObject =
  | Extract<keyof RoundCreateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'sortOrder', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface RoundUpdateInput {
  name?: string | null
  shortName?: string | null
  sortOrder?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type RoundUpdateInputInputObject =
  | Extract<keyof RoundUpdateInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'sortOrder', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface RoundUpdateManyMutationInput {
  name?: string | null
  shortName?: string | null
  sortOrder?: number | null
}
export type RoundUpdateManyMutationInputInputObject =
  | Extract<keyof RoundUpdateManyMutationInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'sortOrder', alias?: string  } 
  
export interface FixtureCreateInput {
  subTournament?: SubTournamentCreateOneInput
  status?: StatusCreateOneInput
  dateTime?: string | null
  homeTeam?: TeamCreateOneInput | null
  awayTeam?: TeamCreateOneInput | null
  round?: RoundCreateOneInput
  homeTeamParentFixture?: FixtureCreateOneWithoutHomeTeamParentFixtureInput | null
  awayTeamParentFixture?: FixtureCreateOneWithoutAwayTeamParentFixtureInput | null
  images?: FixtureCreateimagesInput | null
  updatedBy?: UserAccountCreateOneInput
}
export type FixtureCreateInputInputObject =
  | Extract<keyof FixtureCreateInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'dateTime', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'round', alias?: string  } 
  | { name: 'homeTeamParentFixture', alias?: string  } 
  | { name: 'awayTeamParentFixture', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface StatusCreateOneInput {
  create?: StatusCreateInput | null
  connect?: StatusWhereUniqueInput | null
}
export type StatusCreateOneInputInputObject =
  | Extract<keyof StatusCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RoundCreateOneInput {
  create?: RoundCreateInput | null
  connect?: RoundWhereUniqueInput | null
}
export type RoundCreateOneInputInputObject =
  | Extract<keyof RoundCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FixtureCreateOneWithoutHomeTeamParentFixtureInput {
  create?: FixtureCreateWithoutHomeTeamParentFixtureInput | null
  connect?: FixtureWhereUniqueInput | null
}
export type FixtureCreateOneWithoutHomeTeamParentFixtureInputInputObject =
  | Extract<keyof FixtureCreateOneWithoutHomeTeamParentFixtureInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FixtureCreateWithoutHomeTeamParentFixtureInput {
  subTournament?: SubTournamentCreateOneInput
  status?: StatusCreateOneInput
  dateTime?: string | null
  homeTeam?: TeamCreateOneInput | null
  awayTeam?: TeamCreateOneInput | null
  round?: RoundCreateOneInput
  awayTeamParentFixture?: FixtureCreateOneWithoutAwayTeamParentFixtureInput | null
  images?: FixtureCreateimagesInput | null
  updatedBy?: UserAccountCreateOneInput
}
export type FixtureCreateWithoutHomeTeamParentFixtureInputInputObject =
  | Extract<keyof FixtureCreateWithoutHomeTeamParentFixtureInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'dateTime', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'round', alias?: string  } 
  | { name: 'awayTeamParentFixture', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface FixtureCreateOneWithoutAwayTeamParentFixtureInput {
  create?: FixtureCreateWithoutAwayTeamParentFixtureInput | null
  connect?: FixtureWhereUniqueInput | null
}
export type FixtureCreateOneWithoutAwayTeamParentFixtureInputInputObject =
  | Extract<keyof FixtureCreateOneWithoutAwayTeamParentFixtureInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FixtureCreateWithoutAwayTeamParentFixtureInput {
  subTournament?: SubTournamentCreateOneInput
  status?: StatusCreateOneInput
  dateTime?: string | null
  homeTeam?: TeamCreateOneInput | null
  awayTeam?: TeamCreateOneInput | null
  round?: RoundCreateOneInput
  homeTeamParentFixture?: FixtureCreateOneWithoutHomeTeamParentFixtureInput | null
  images?: FixtureCreateimagesInput | null
  updatedBy?: UserAccountCreateOneInput
}
export type FixtureCreateWithoutAwayTeamParentFixtureInputInputObject =
  | Extract<keyof FixtureCreateWithoutAwayTeamParentFixtureInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'dateTime', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'round', alias?: string  } 
  | { name: 'homeTeamParentFixture', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface FixtureCreateimagesInput {
  set?: string[]
}
export type FixtureCreateimagesInputInputObject =
  | Extract<keyof FixtureCreateimagesInput, string>
  | { name: 'set', alias?: string  } 
  
export interface FixtureUpdateInput {
  subTournament?: SubTournamentUpdateOneRequiredInput | null
  status?: StatusUpdateOneRequiredInput | null
  dateTime?: string | null
  homeTeam?: TeamUpdateOneInput | null
  awayTeam?: TeamUpdateOneInput | null
  round?: RoundUpdateOneRequiredInput | null
  homeTeamParentFixture?: FixtureUpdateOneWithoutHomeTeamParentFixtureInput | null
  awayTeamParentFixture?: FixtureUpdateOneWithoutAwayTeamParentFixtureInput | null
  images?: FixtureUpdateimagesInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type FixtureUpdateInputInputObject =
  | Extract<keyof FixtureUpdateInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'dateTime', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'round', alias?: string  } 
  | { name: 'homeTeamParentFixture', alias?: string  } 
  | { name: 'awayTeamParentFixture', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface StatusUpdateOneRequiredInput {
  create?: StatusCreateInput | null
  update?: StatusUpdateDataInput | null
  upsert?: StatusUpsertNestedInput | null
  connect?: StatusWhereUniqueInput | null
}
export type StatusUpdateOneRequiredInputInputObject =
  | Extract<keyof StatusUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface StatusUpdateDataInput {
  name?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type StatusUpdateDataInputInputObject =
  | Extract<keyof StatusUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface StatusUpsertNestedInput {
  update?: StatusUpdateDataInput
  create?: StatusCreateInput
}
export type StatusUpsertNestedInputInputObject =
  | Extract<keyof StatusUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamUpdateOneInput {
  create?: TeamCreateInput | null
  update?: TeamUpdateDataInput | null
  upsert?: TeamUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TeamWhereUniqueInput | null
}
export type TeamUpdateOneInputInputObject =
  | Extract<keyof TeamUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RoundUpdateOneRequiredInput {
  create?: RoundCreateInput | null
  update?: RoundUpdateDataInput | null
  upsert?: RoundUpsertNestedInput | null
  connect?: RoundWhereUniqueInput | null
}
export type RoundUpdateOneRequiredInputInputObject =
  | Extract<keyof RoundUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface RoundUpdateDataInput {
  name?: string | null
  shortName?: string | null
  sortOrder?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type RoundUpdateDataInputInputObject =
  | Extract<keyof RoundUpdateDataInput, string>
  | { name: 'name', alias?: string  } 
  | { name: 'shortName', alias?: string  } 
  | { name: 'sortOrder', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface RoundUpsertNestedInput {
  update?: RoundUpdateDataInput
  create?: RoundCreateInput
}
export type RoundUpsertNestedInputInputObject =
  | Extract<keyof RoundUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FixtureUpdateOneWithoutHomeTeamParentFixtureInput {
  create?: FixtureCreateWithoutHomeTeamParentFixtureInput | null
  update?: FixtureUpdateWithoutHomeTeamParentFixtureDataInput | null
  upsert?: FixtureUpsertWithoutHomeTeamParentFixtureInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: FixtureWhereUniqueInput | null
}
export type FixtureUpdateOneWithoutHomeTeamParentFixtureInputInputObject =
  | Extract<keyof FixtureUpdateOneWithoutHomeTeamParentFixtureInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FixtureUpdateWithoutHomeTeamParentFixtureDataInput {
  subTournament?: SubTournamentUpdateOneRequiredInput | null
  status?: StatusUpdateOneRequiredInput | null
  dateTime?: string | null
  homeTeam?: TeamUpdateOneInput | null
  awayTeam?: TeamUpdateOneInput | null
  round?: RoundUpdateOneRequiredInput | null
  awayTeamParentFixture?: FixtureUpdateOneWithoutAwayTeamParentFixtureInput | null
  images?: FixtureUpdateimagesInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type FixtureUpdateWithoutHomeTeamParentFixtureDataInputInputObject =
  | Extract<keyof FixtureUpdateWithoutHomeTeamParentFixtureDataInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'dateTime', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'round', alias?: string  } 
  | { name: 'awayTeamParentFixture', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface FixtureUpdateOneWithoutAwayTeamParentFixtureInput {
  create?: FixtureCreateWithoutAwayTeamParentFixtureInput | null
  update?: FixtureUpdateWithoutAwayTeamParentFixtureDataInput | null
  upsert?: FixtureUpsertWithoutAwayTeamParentFixtureInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: FixtureWhereUniqueInput | null
}
export type FixtureUpdateOneWithoutAwayTeamParentFixtureInputInputObject =
  | Extract<keyof FixtureUpdateOneWithoutAwayTeamParentFixtureInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FixtureUpdateWithoutAwayTeamParentFixtureDataInput {
  subTournament?: SubTournamentUpdateOneRequiredInput | null
  status?: StatusUpdateOneRequiredInput | null
  dateTime?: string | null
  homeTeam?: TeamUpdateOneInput | null
  awayTeam?: TeamUpdateOneInput | null
  round?: RoundUpdateOneRequiredInput | null
  homeTeamParentFixture?: FixtureUpdateOneWithoutHomeTeamParentFixtureInput | null
  images?: FixtureUpdateimagesInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type FixtureUpdateWithoutAwayTeamParentFixtureDataInputInputObject =
  | Extract<keyof FixtureUpdateWithoutAwayTeamParentFixtureDataInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'dateTime', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'round', alias?: string  } 
  | { name: 'homeTeamParentFixture', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface FixtureUpdateimagesInput {
  set?: string[]
}
export type FixtureUpdateimagesInputInputObject =
  | Extract<keyof FixtureUpdateimagesInput, string>
  | { name: 'set', alias?: string  } 
  
export interface FixtureUpsertWithoutAwayTeamParentFixtureInput {
  update?: FixtureUpdateWithoutAwayTeamParentFixtureDataInput
  create?: FixtureCreateWithoutAwayTeamParentFixtureInput
}
export type FixtureUpsertWithoutAwayTeamParentFixtureInputInputObject =
  | Extract<keyof FixtureUpsertWithoutAwayTeamParentFixtureInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FixtureUpsertWithoutHomeTeamParentFixtureInput {
  update?: FixtureUpdateWithoutHomeTeamParentFixtureDataInput
  create?: FixtureCreateWithoutHomeTeamParentFixtureInput
}
export type FixtureUpsertWithoutHomeTeamParentFixtureInputInputObject =
  | Extract<keyof FixtureUpsertWithoutHomeTeamParentFixtureInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FixtureUpdateManyMutationInput {
  dateTime?: string | null
  images?: FixtureUpdateimagesInput | null
}
export type FixtureUpdateManyMutationInputInputObject =
  | Extract<keyof FixtureUpdateManyMutationInput, string>
  | { name: 'dateTime', alias?: string  } 
  | { name: 'images', alias?: string  } 
  
export interface FootballScoreCreateInput {
  fixture?: FixtureCreateOneInput
  homeTeamFTScore?: number | null
  awayTeamFTScore?: number | null
  homeTeamAetScore?: number | null
  awayTeamAetScore?: number | null
  homeTeamPenaltyScore?: number | null
  awayTeamPenaltyScore?: number | null
  updatedBy?: UserAccountCreateOneInput
}
export type FootballScoreCreateInputInputObject =
  | Extract<keyof FootballScoreCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamFTScore', alias?: string  } 
  | { name: 'awayTeamFTScore', alias?: string  } 
  | { name: 'homeTeamAetScore', alias?: string  } 
  | { name: 'awayTeamAetScore', alias?: string  } 
  | { name: 'homeTeamPenaltyScore', alias?: string  } 
  | { name: 'awayTeamPenaltyScore', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface FixtureCreateOneInput {
  create?: FixtureCreateInput | null
  connect?: FixtureWhereUniqueInput | null
}
export type FixtureCreateOneInputInputObject =
  | Extract<keyof FixtureCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FootballScoreUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  homeTeamFTScore?: number | null
  awayTeamFTScore?: number | null
  homeTeamAetScore?: number | null
  awayTeamAetScore?: number | null
  homeTeamPenaltyScore?: number | null
  awayTeamPenaltyScore?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type FootballScoreUpdateInputInputObject =
  | Extract<keyof FootballScoreUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamFTScore', alias?: string  } 
  | { name: 'awayTeamFTScore', alias?: string  } 
  | { name: 'homeTeamAetScore', alias?: string  } 
  | { name: 'awayTeamAetScore', alias?: string  } 
  | { name: 'homeTeamPenaltyScore', alias?: string  } 
  | { name: 'awayTeamPenaltyScore', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface FixtureUpdateOneRequiredInput {
  create?: FixtureCreateInput | null
  update?: FixtureUpdateDataInput | null
  upsert?: FixtureUpsertNestedInput | null
  connect?: FixtureWhereUniqueInput | null
}
export type FixtureUpdateOneRequiredInputInputObject =
  | Extract<keyof FixtureUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FixtureUpdateDataInput {
  subTournament?: SubTournamentUpdateOneRequiredInput | null
  status?: StatusUpdateOneRequiredInput | null
  dateTime?: string | null
  homeTeam?: TeamUpdateOneInput | null
  awayTeam?: TeamUpdateOneInput | null
  round?: RoundUpdateOneRequiredInput | null
  homeTeamParentFixture?: FixtureUpdateOneWithoutHomeTeamParentFixtureInput | null
  awayTeamParentFixture?: FixtureUpdateOneWithoutAwayTeamParentFixtureInput | null
  images?: FixtureUpdateimagesInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type FixtureUpdateDataInputInputObject =
  | Extract<keyof FixtureUpdateDataInput, string>
  | { name: 'subTournament', alias?: string  } 
  | { name: 'status', alias?: string  } 
  | { name: 'dateTime', alias?: string  } 
  | { name: 'homeTeam', alias?: string  } 
  | { name: 'awayTeam', alias?: string  } 
  | { name: 'round', alias?: string  } 
  | { name: 'homeTeamParentFixture', alias?: string  } 
  | { name: 'awayTeamParentFixture', alias?: string  } 
  | { name: 'images', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface FixtureUpsertNestedInput {
  update?: FixtureUpdateDataInput
  create?: FixtureCreateInput
}
export type FixtureUpsertNestedInputInputObject =
  | Extract<keyof FixtureUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface FootballScoreUpdateManyMutationInput {
  homeTeamFTScore?: number | null
  awayTeamFTScore?: number | null
  homeTeamAetScore?: number | null
  awayTeamAetScore?: number | null
  homeTeamPenaltyScore?: number | null
  awayTeamPenaltyScore?: number | null
}
export type FootballScoreUpdateManyMutationInputInputObject =
  | Extract<keyof FootballScoreUpdateManyMutationInput, string>
  | { name: 'homeTeamFTScore', alias?: string  } 
  | { name: 'awayTeamFTScore', alias?: string  } 
  | { name: 'homeTeamAetScore', alias?: string  } 
  | { name: 'awayTeamAetScore', alias?: string  } 
  | { name: 'homeTeamPenaltyScore', alias?: string  } 
  | { name: 'awayTeamPenaltyScore', alias?: string  } 
  
export interface FootballScoreActivityCreateInput {
  fixture?: FixtureCreateOneInput
  teamPlayer?: TeamPlayerCreateOneInput
  activityType?: prisma.FootballActivityType
  assistedBy?: TeamPlayerCreateOneInput | null
  activityTime?: string | null
  updatedBy?: UserAccountCreateOneInput
}
export type FootballScoreActivityCreateInputInputObject =
  | Extract<keyof FootballScoreActivityCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'teamPlayer', alias?: string  } 
  | { name: 'activityType', alias?: string  } 
  | { name: 'assistedBy', alias?: string  } 
  | { name: 'activityTime', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TeamPlayerCreateOneInput {
  create?: TeamPlayerCreateInput | null
  connect?: TeamPlayerWhereUniqueInput | null
}
export type TeamPlayerCreateOneInputInputObject =
  | Extract<keyof TeamPlayerCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FootballScoreActivityUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  teamPlayer?: TeamPlayerUpdateOneRequiredInput | null
  activityType?: prisma.FootballActivityType | null
  assistedBy?: TeamPlayerUpdateOneInput | null
  activityTime?: string | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type FootballScoreActivityUpdateInputInputObject =
  | Extract<keyof FootballScoreActivityUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'teamPlayer', alias?: string  } 
  | { name: 'activityType', alias?: string  } 
  | { name: 'assistedBy', alias?: string  } 
  | { name: 'activityTime', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TeamPlayerUpdateOneRequiredInput {
  create?: TeamPlayerCreateInput | null
  update?: TeamPlayerUpdateDataInput | null
  upsert?: TeamPlayerUpsertNestedInput | null
  connect?: TeamPlayerWhereUniqueInput | null
}
export type TeamPlayerUpdateOneRequiredInputInputObject =
  | Extract<keyof TeamPlayerUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface TeamPlayerUpdateDataInput {
  team?: TeamUpdateOneRequiredInput | null
  player?: SubTournamentPlayerUpdateOneRequiredInput | null
  isCaptain?: boolean | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type TeamPlayerUpdateDataInputInputObject =
  | Extract<keyof TeamPlayerUpdateDataInput, string>
  | { name: 'team', alias?: string  } 
  | { name: 'player', alias?: string  } 
  | { name: 'isCaptain', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TeamPlayerUpsertNestedInput {
  update?: TeamPlayerUpdateDataInput
  create?: TeamPlayerCreateInput
}
export type TeamPlayerUpsertNestedInputInputObject =
  | Extract<keyof TeamPlayerUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface TeamPlayerUpdateOneInput {
  create?: TeamPlayerCreateInput | null
  update?: TeamPlayerUpdateDataInput | null
  upsert?: TeamPlayerUpsertNestedInput | null
  delete?: boolean | null
  disconnect?: boolean | null
  connect?: TeamPlayerWhereUniqueInput | null
}
export type TeamPlayerUpdateOneInputInputObject =
  | Extract<keyof TeamPlayerUpdateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface FootballScoreActivityUpdateManyMutationInput {
  activityType?: prisma.FootballActivityType | null
  activityTime?: string | null
}
export type FootballScoreActivityUpdateManyMutationInputInputObject =
  | Extract<keyof FootballScoreActivityUpdateManyMutationInput, string>
  | { name: 'activityType', alias?: string  } 
  | { name: 'activityTime', alias?: string  } 
  
export interface ChessScoreCreateInput {
  fixture?: FixtureCreateOneInput
  winnerTeam?: TeamCreateOneInput | null
  winningMethod?: prisma.ChessWinningMethod | null
  updatedBy?: UserAccountCreateOneInput
}
export type ChessScoreCreateInputInputObject =
  | Extract<keyof ChessScoreCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'winningMethod', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface ChessScoreUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  winnerTeam?: TeamUpdateOneInput | null
  winningMethod?: prisma.ChessWinningMethod | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type ChessScoreUpdateInputInputObject =
  | Extract<keyof ChessScoreUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'winningMethod', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface ChessScoreUpdateManyMutationInput {
  winningMethod?: prisma.ChessWinningMethod | null
}
export type ChessScoreUpdateManyMutationInputInputObject =
  | Extract<keyof ChessScoreUpdateManyMutationInput, string>
  | { name: 'winningMethod', alias?: string  } 
  
export interface CarromBoardScoreCreateInput {
  fixture?: FixtureCreateOneInput
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  updatedBy?: UserAccountCreateOneInput
}
export type CarromBoardScoreCreateInputInputObject =
  | Extract<keyof CarromBoardScoreCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CarromBoardScoreUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type CarromBoardScoreUpdateInputInputObject =
  | Extract<keyof CarromBoardScoreUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CarromBoardScoreUpdateManyMutationInput {
  homeTeamScore?: number | null
  awayTeamScore?: number | null
}
export type CarromBoardScoreUpdateManyMutationInputInputObject =
  | Extract<keyof CarromBoardScoreUpdateManyMutationInput, string>
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  
export interface CarromBoardScoreActivityCreateInput {
  fixture?: FixtureCreateOneInput
  team?: TeamCreateOneInput
  points?: number
  order?: number
  updatedBy?: UserAccountCreateOneInput
}
export type CarromBoardScoreActivityCreateInputInputObject =
  | Extract<keyof CarromBoardScoreActivityCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'points', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CarromBoardScoreActivityUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  team?: TeamUpdateOneRequiredInput | null
  points?: number | null
  order?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type CarromBoardScoreActivityUpdateInputInputObject =
  | Extract<keyof CarromBoardScoreActivityUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'team', alias?: string  } 
  | { name: 'points', alias?: string  } 
  | { name: 'order', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CarromBoardScoreActivityUpdateManyMutationInput {
  points?: number | null
  order?: number | null
}
export type CarromBoardScoreActivityUpdateManyMutationInputInputObject =
  | Extract<keyof CarromBoardScoreActivityUpdateManyMutationInput, string>
  | { name: 'points', alias?: string  } 
  | { name: 'order', alias?: string  } 
  
export interface TableTennisScoreCreateInput {
  fixture?: FixtureCreateOneInput
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  setsCount?: number
  updatedBy?: UserAccountCreateOneInput
}
export type TableTennisScoreCreateInputInputObject =
  | Extract<keyof TableTennisScoreCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TableTennisScoreUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  setsCount?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type TableTennisScoreUpdateInputInputObject =
  | Extract<keyof TableTennisScoreUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TableTennisScoreUpdateManyMutationInput {
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  setsCount?: number | null
}
export type TableTennisScoreUpdateManyMutationInputInputObject =
  | Extract<keyof TableTennisScoreUpdateManyMutationInput, string>
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  
export interface TableTennisScoreActivityCreateInput {
  fixture?: FixtureCreateOneInput
  set?: number
  homeTeamPoints?: number
  awayTeamPoints?: number
  updatedBy?: UserAccountCreateOneInput
}
export type TableTennisScoreActivityCreateInputInputObject =
  | Extract<keyof TableTennisScoreActivityCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'homeTeamPoints', alias?: string  } 
  | { name: 'awayTeamPoints', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TableTennisScoreActivityUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  set?: number | null
  homeTeamPoints?: number | null
  awayTeamPoints?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type TableTennisScoreActivityUpdateInputInputObject =
  | Extract<keyof TableTennisScoreActivityUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'homeTeamPoints', alias?: string  } 
  | { name: 'awayTeamPoints', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface TableTennisScoreActivityUpdateManyMutationInput {
  set?: number | null
  homeTeamPoints?: number | null
  awayTeamPoints?: number | null
}
export type TableTennisScoreActivityUpdateManyMutationInputInputObject =
  | Extract<keyof TableTennisScoreActivityUpdateManyMutationInput, string>
  | { name: 'set', alias?: string  } 
  | { name: 'homeTeamPoints', alias?: string  } 
  | { name: 'awayTeamPoints', alias?: string  } 
  
export interface CounterStrikeFScoreCreateInput {
  fixture?: FixtureCreateOneInput
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  setsCount?: number
  updatedBy?: UserAccountCreateOneInput
}
export type CounterStrikeFScoreCreateInputInputObject =
  | Extract<keyof CounterStrikeFScoreCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CounterStrikeFScoreUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  setsCount?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type CounterStrikeFScoreUpdateInputInputObject =
  | Extract<keyof CounterStrikeFScoreUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CounterStrikeFScoreUpdateManyMutationInput {
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  setsCount?: number | null
}
export type CounterStrikeFScoreUpdateManyMutationInputInputObject =
  | Extract<keyof CounterStrikeFScoreUpdateManyMutationInput, string>
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  
export interface CounterStrikeScoreSetCreateInput {
  fixture?: FixtureCreateOneInput
  set?: number
  homeTeamScore?: number
  awayTeamScore?: number
  updatedBy?: UserAccountCreateOneInput
}
export type CounterStrikeScoreSetCreateInputInputObject =
  | Extract<keyof CounterStrikeScoreSetCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CounterStrikeScoreSetUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  set?: number | null
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type CounterStrikeScoreSetUpdateInputInputObject =
  | Extract<keyof CounterStrikeScoreSetUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CounterStrikeScoreSetUpdateManyMutationInput {
  set?: number | null
  homeTeamScore?: number | null
  awayTeamScore?: number | null
}
export type CounterStrikeScoreSetUpdateManyMutationInputInputObject =
  | Extract<keyof CounterStrikeScoreSetUpdateManyMutationInput, string>
  | { name: 'set', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  
export interface CounterStrikeScoreSetActivityCreateInput {
  set?: CounterStrikeScoreSetCreateOneInput
  teamPlayer?: TeamPlayerCreateOneInput
  kills?: number
  deaths?: number
  updatedBy?: UserAccountCreateOneInput
}
export type CounterStrikeScoreSetActivityCreateInputInputObject =
  | Extract<keyof CounterStrikeScoreSetActivityCreateInput, string>
  | { name: 'set', alias?: string  } 
  | { name: 'teamPlayer', alias?: string  } 
  | { name: 'kills', alias?: string  } 
  | { name: 'deaths', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CounterStrikeScoreSetCreateOneInput {
  create?: CounterStrikeScoreSetCreateInput | null
  connect?: CounterStrikeScoreSetWhereUniqueInput | null
}
export type CounterStrikeScoreSetCreateOneInputInputObject =
  | Extract<keyof CounterStrikeScoreSetCreateOneInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CounterStrikeScoreSetActivityUpdateInput {
  set?: CounterStrikeScoreSetUpdateOneRequiredInput | null
  teamPlayer?: TeamPlayerUpdateOneRequiredInput | null
  kills?: number | null
  deaths?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type CounterStrikeScoreSetActivityUpdateInputInputObject =
  | Extract<keyof CounterStrikeScoreSetActivityUpdateInput, string>
  | { name: 'set', alias?: string  } 
  | { name: 'teamPlayer', alias?: string  } 
  | { name: 'kills', alias?: string  } 
  | { name: 'deaths', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CounterStrikeScoreSetUpdateOneRequiredInput {
  create?: CounterStrikeScoreSetCreateInput | null
  update?: CounterStrikeScoreSetUpdateDataInput | null
  upsert?: CounterStrikeScoreSetUpsertNestedInput | null
  connect?: CounterStrikeScoreSetWhereUniqueInput | null
}
export type CounterStrikeScoreSetUpdateOneRequiredInputInputObject =
  | Extract<keyof CounterStrikeScoreSetUpdateOneRequiredInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface CounterStrikeScoreSetUpdateDataInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  set?: number | null
  homeTeamScore?: number | null
  awayTeamScore?: number | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type CounterStrikeScoreSetUpdateDataInputInputObject =
  | Extract<keyof CounterStrikeScoreSetUpdateDataInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'homeTeamScore', alias?: string  } 
  | { name: 'awayTeamScore', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface CounterStrikeScoreSetUpsertNestedInput {
  update?: CounterStrikeScoreSetUpdateDataInput
  create?: CounterStrikeScoreSetCreateInput
}
export type CounterStrikeScoreSetUpsertNestedInputInputObject =
  | Extract<keyof CounterStrikeScoreSetUpsertNestedInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface CounterStrikeScoreSetActivityUpdateManyMutationInput {
  kills?: number | null
  deaths?: number | null
}
export type CounterStrikeScoreSetActivityUpdateManyMutationInputInputObject =
  | Extract<keyof CounterStrikeScoreSetActivityUpdateManyMutationInput, string>
  | { name: 'kills', alias?: string  } 
  | { name: 'deaths', alias?: string  } 
  
export interface DotaScoreCreateInput {
  fixture?: FixtureCreateOneInput
  setsCount?: number
  winnerTeam?: TeamCreateOneInput | null
  updatedBy?: UserAccountCreateOneInput
}
export type DotaScoreCreateInputInputObject =
  | Extract<keyof DotaScoreCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface DotaScoreUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  setsCount?: number | null
  winnerTeam?: TeamUpdateOneInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type DotaScoreUpdateInputInputObject =
  | Extract<keyof DotaScoreUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'setsCount', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface DotaScoreUpdateManyMutationInput {
  setsCount?: number | null
}
export type DotaScoreUpdateManyMutationInputInputObject =
  | Extract<keyof DotaScoreUpdateManyMutationInput, string>
  | { name: 'setsCount', alias?: string  } 
  
export interface DotaScoreActivityCreateInput {
  fixture?: FixtureCreateOneInput
  set?: number
  winnerTeam?: TeamCreateOneInput
  updatedBy?: UserAccountCreateOneInput
}
export type DotaScoreActivityCreateInputInputObject =
  | Extract<keyof DotaScoreActivityCreateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface DotaScoreActivityUpdateInput {
  fixture?: FixtureUpdateOneRequiredInput | null
  set?: number | null
  winnerTeam?: TeamUpdateOneRequiredInput | null
  updatedBy?: UserAccountUpdateOneRequiredInput | null
}
export type DotaScoreActivityUpdateInputInputObject =
  | Extract<keyof DotaScoreActivityUpdateInput, string>
  | { name: 'fixture', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'winnerTeam', alias?: string  } 
  | { name: 'updatedBy', alias?: string  } 
  
export interface DotaScoreActivityUpdateManyMutationInput {
  set?: number | null
}
export type DotaScoreActivityUpdateManyMutationInputInputObject =
  | Extract<keyof DotaScoreActivityUpdateManyMutationInput, string>
  | { name: 'set', alias?: string  } 
  
export interface EmployeeSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: EmployeeWhereInput | null
  AND?: EmployeeSubscriptionWhereInput[]
  OR?: EmployeeSubscriptionWhereInput[]
  NOT?: EmployeeSubscriptionWhereInput[]
}
export type EmployeeSubscriptionWhereInputInputObject =
  | Extract<keyof EmployeeSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserAccountSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserAccountWhereInput | null
  AND?: UserAccountSubscriptionWhereInput[]
  OR?: UserAccountSubscriptionWhereInput[]
  NOT?: UserAccountSubscriptionWhereInput[]
}
export type UserAccountSubscriptionWhereInputInputObject =
  | Extract<keyof UserAccountSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface UserAccountTokenSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: UserAccountTokenWhereInput | null
  AND?: UserAccountTokenSubscriptionWhereInput[]
  OR?: UserAccountTokenSubscriptionWhereInput[]
  NOT?: UserAccountTokenSubscriptionWhereInput[]
}
export type UserAccountTokenSubscriptionWhereInputInputObject =
  | Extract<keyof UserAccountTokenSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface GameSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: GameWhereInput | null
  AND?: GameSubscriptionWhereInput[]
  OR?: GameSubscriptionWhereInput[]
  NOT?: GameSubscriptionWhereInput[]
}
export type GameSubscriptionWhereInputInputObject =
  | Extract<keyof GameSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TournamentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TournamentWhereInput | null
  AND?: TournamentSubscriptionWhereInput[]
  OR?: TournamentSubscriptionWhereInput[]
  NOT?: TournamentSubscriptionWhereInput[]
}
export type TournamentSubscriptionWhereInputInputObject =
  | Extract<keyof TournamentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CategorySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CategoryWhereInput | null
  AND?: CategorySubscriptionWhereInput[]
  OR?: CategorySubscriptionWhereInput[]
  NOT?: CategorySubscriptionWhereInput[]
}
export type CategorySubscriptionWhereInputInputObject =
  | Extract<keyof CategorySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubTournamentSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SubTournamentWhereInput | null
  AND?: SubTournamentSubscriptionWhereInput[]
  OR?: SubTournamentSubscriptionWhereInput[]
  NOT?: SubTournamentSubscriptionWhereInput[]
}
export type SubTournamentSubscriptionWhereInputInputObject =
  | Extract<keyof SubTournamentSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SubTournamentPlayerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SubTournamentPlayerWhereInput | null
  AND?: SubTournamentPlayerSubscriptionWhereInput[]
  OR?: SubTournamentPlayerSubscriptionWhereInput[]
  NOT?: SubTournamentPlayerSubscriptionWhereInput[]
}
export type SubTournamentPlayerSubscriptionWhereInputInputObject =
  | Extract<keyof SubTournamentPlayerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TeamWhereInput | null
  AND?: TeamSubscriptionWhereInput[]
  OR?: TeamSubscriptionWhereInput[]
  NOT?: TeamSubscriptionWhereInput[]
}
export type TeamSubscriptionWhereInputInputObject =
  | Extract<keyof TeamSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TeamPlayerSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TeamPlayerWhereInput | null
  AND?: TeamPlayerSubscriptionWhereInput[]
  OR?: TeamPlayerSubscriptionWhereInput[]
  NOT?: TeamPlayerSubscriptionWhereInput[]
}
export type TeamPlayerSubscriptionWhereInputInputObject =
  | Extract<keyof TeamPlayerSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface StatusSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: StatusWhereInput | null
  AND?: StatusSubscriptionWhereInput[]
  OR?: StatusSubscriptionWhereInput[]
  NOT?: StatusSubscriptionWhereInput[]
}
export type StatusSubscriptionWhereInputInputObject =
  | Extract<keyof StatusSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface RoundSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: RoundWhereInput | null
  AND?: RoundSubscriptionWhereInput[]
  OR?: RoundSubscriptionWhereInput[]
  NOT?: RoundSubscriptionWhereInput[]
}
export type RoundSubscriptionWhereInputInputObject =
  | Extract<keyof RoundSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FixtureSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FixtureWhereInput | null
  AND?: FixtureSubscriptionWhereInput[]
  OR?: FixtureSubscriptionWhereInput[]
  NOT?: FixtureSubscriptionWhereInput[]
}
export type FixtureSubscriptionWhereInputInputObject =
  | Extract<keyof FixtureSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FootballScoreSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FootballScoreWhereInput | null
  AND?: FootballScoreSubscriptionWhereInput[]
  OR?: FootballScoreSubscriptionWhereInput[]
  NOT?: FootballScoreSubscriptionWhereInput[]
}
export type FootballScoreSubscriptionWhereInputInputObject =
  | Extract<keyof FootballScoreSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface FootballScoreActivitySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: FootballScoreActivityWhereInput | null
  AND?: FootballScoreActivitySubscriptionWhereInput[]
  OR?: FootballScoreActivitySubscriptionWhereInput[]
  NOT?: FootballScoreActivitySubscriptionWhereInput[]
}
export type FootballScoreActivitySubscriptionWhereInputInputObject =
  | Extract<keyof FootballScoreActivitySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface ChessScoreSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: ChessScoreWhereInput | null
  AND?: ChessScoreSubscriptionWhereInput[]
  OR?: ChessScoreSubscriptionWhereInput[]
  NOT?: ChessScoreSubscriptionWhereInput[]
}
export type ChessScoreSubscriptionWhereInputInputObject =
  | Extract<keyof ChessScoreSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CarromBoardScoreSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CarromBoardScoreWhereInput | null
  AND?: CarromBoardScoreSubscriptionWhereInput[]
  OR?: CarromBoardScoreSubscriptionWhereInput[]
  NOT?: CarromBoardScoreSubscriptionWhereInput[]
}
export type CarromBoardScoreSubscriptionWhereInputInputObject =
  | Extract<keyof CarromBoardScoreSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CarromBoardScoreActivitySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CarromBoardScoreActivityWhereInput | null
  AND?: CarromBoardScoreActivitySubscriptionWhereInput[]
  OR?: CarromBoardScoreActivitySubscriptionWhereInput[]
  NOT?: CarromBoardScoreActivitySubscriptionWhereInput[]
}
export type CarromBoardScoreActivitySubscriptionWhereInputInputObject =
  | Extract<keyof CarromBoardScoreActivitySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TableTennisScoreSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TableTennisScoreWhereInput | null
  AND?: TableTennisScoreSubscriptionWhereInput[]
  OR?: TableTennisScoreSubscriptionWhereInput[]
  NOT?: TableTennisScoreSubscriptionWhereInput[]
}
export type TableTennisScoreSubscriptionWhereInputInputObject =
  | Extract<keyof TableTennisScoreSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface TableTennisScoreActivitySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: TableTennisScoreActivityWhereInput | null
  AND?: TableTennisScoreActivitySubscriptionWhereInput[]
  OR?: TableTennisScoreActivitySubscriptionWhereInput[]
  NOT?: TableTennisScoreActivitySubscriptionWhereInput[]
}
export type TableTennisScoreActivitySubscriptionWhereInputInputObject =
  | Extract<keyof TableTennisScoreActivitySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CounterStrikeFScoreSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CounterStrikeFScoreWhereInput | null
  AND?: CounterStrikeFScoreSubscriptionWhereInput[]
  OR?: CounterStrikeFScoreSubscriptionWhereInput[]
  NOT?: CounterStrikeFScoreSubscriptionWhereInput[]
}
export type CounterStrikeFScoreSubscriptionWhereInputInputObject =
  | Extract<keyof CounterStrikeFScoreSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CounterStrikeScoreSetSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CounterStrikeScoreSetWhereInput | null
  AND?: CounterStrikeScoreSetSubscriptionWhereInput[]
  OR?: CounterStrikeScoreSetSubscriptionWhereInput[]
  NOT?: CounterStrikeScoreSetSubscriptionWhereInput[]
}
export type CounterStrikeScoreSetSubscriptionWhereInputInputObject =
  | Extract<keyof CounterStrikeScoreSetSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface CounterStrikeScoreSetActivitySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: CounterStrikeScoreSetActivityWhereInput | null
  AND?: CounterStrikeScoreSetActivitySubscriptionWhereInput[]
  OR?: CounterStrikeScoreSetActivitySubscriptionWhereInput[]
  NOT?: CounterStrikeScoreSetActivitySubscriptionWhereInput[]
}
export type CounterStrikeScoreSetActivitySubscriptionWhereInputInputObject =
  | Extract<keyof CounterStrikeScoreSetActivitySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DotaScoreSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DotaScoreWhereInput | null
  AND?: DotaScoreSubscriptionWhereInput[]
  OR?: DotaScoreSubscriptionWhereInput[]
  NOT?: DotaScoreSubscriptionWhereInput[]
}
export type DotaScoreSubscriptionWhereInputInputObject =
  | Extract<keyof DotaScoreSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DotaScoreActivitySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DotaScoreActivityWhereInput | null
  AND?: DotaScoreActivitySubscriptionWhereInput[]
  OR?: DotaScoreActivitySubscriptionWhereInput[]
  NOT?: DotaScoreActivitySubscriptionWhereInput[]
}
export type DotaScoreActivitySubscriptionWhereInputInputObject =
  | Extract<keyof DotaScoreActivitySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type EmployeeOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'firstName_ASC'
  | 'firstName_DESC'
  | 'middleName_ASC'
  | 'middleName_DESC'
  | 'lastName_ASC'
  | 'lastName_DESC'
  | 'profilePictureUrl_ASC'
  | 'profilePictureUrl_DESC'
  | 'lmsEmpId_ASC'
  | 'lmsEmpId_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserRoleValues =
  | 'ADMIN'
  | 'USER'
  
export type UserAccountOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'isActive_ASC'
  | 'isActive_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'userRole_ASC'
  | 'userRole_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type UserAccountTokenOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'refreshToken_ASC'
  | 'refreshToken_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type GameOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'shortName_ASC'
  | 'shortName_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TournamentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'season_ASC'
  | 'season_DESC'
  | 'startDate_ASC'
  | 'startDate_DESC'
  | 'finishDate_ASC'
  | 'finishDate_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CategoryOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SubTournamentOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SubTournamentPlayerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'position_ASC'
  | 'position_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TeamOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'logoImage_ASC'
  | 'logoImage_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TeamPlayerOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'isCaptain_ASC'
  | 'isCaptain_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type StatusOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type RoundOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'shortName_ASC'
  | 'shortName_DESC'
  | 'sortOrder_ASC'
  | 'sortOrder_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FixtureOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'dateTime_ASC'
  | 'dateTime_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FootballScoreOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'homeTeamFTScore_ASC'
  | 'homeTeamFTScore_DESC'
  | 'awayTeamFTScore_ASC'
  | 'awayTeamFTScore_DESC'
  | 'homeTeamAetScore_ASC'
  | 'homeTeamAetScore_DESC'
  | 'awayTeamAetScore_ASC'
  | 'awayTeamAetScore_DESC'
  | 'homeTeamPenaltyScore_ASC'
  | 'homeTeamPenaltyScore_DESC'
  | 'awayTeamPenaltyScore_ASC'
  | 'awayTeamPenaltyScore_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type FootballActivityTypeValues =
  | 'GOAL'
  | 'OWN_GOAL'
  | 'RED_CARD'
  | 'YELLOW_CARD'
  | 'DOUBLE_YELLOW_CARD'
  
export type FootballScoreActivityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'activityType_ASC'
  | 'activityType_DESC'
  | 'activityTime_ASC'
  | 'activityTime_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type ChessWinningMethodValues =
  | 'TIME'
  | 'CHECKMATE'
  
export type ChessScoreOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'winningMethod_ASC'
  | 'winningMethod_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CarromBoardScoreOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'homeTeamScore_ASC'
  | 'homeTeamScore_DESC'
  | 'awayTeamScore_ASC'
  | 'awayTeamScore_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CarromBoardScoreActivityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'points_ASC'
  | 'points_DESC'
  | 'order_ASC'
  | 'order_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TableTennisScoreOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'homeTeamScore_ASC'
  | 'homeTeamScore_DESC'
  | 'awayTeamScore_ASC'
  | 'awayTeamScore_DESC'
  | 'setsCount_ASC'
  | 'setsCount_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type TableTennisScoreActivityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'set_ASC'
  | 'set_DESC'
  | 'homeTeamPoints_ASC'
  | 'homeTeamPoints_DESC'
  | 'awayTeamPoints_ASC'
  | 'awayTeamPoints_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CounterStrikeFScoreOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'homeTeamScore_ASC'
  | 'homeTeamScore_DESC'
  | 'awayTeamScore_ASC'
  | 'awayTeamScore_DESC'
  | 'setsCount_ASC'
  | 'setsCount_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CounterStrikeScoreSetOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'set_ASC'
  | 'set_DESC'
  | 'homeTeamScore_ASC'
  | 'homeTeamScore_DESC'
  | 'awayTeamScore_ASC'
  | 'awayTeamScore_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type CounterStrikeScoreSetActivityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'kills_ASC'
  | 'kills_DESC'
  | 'deaths_ASC'
  | 'deaths_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type DotaScoreOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'setsCount_ASC'
  | 'setsCount_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type DotaScoreActivityOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'set_ASC'
  | 'set_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  